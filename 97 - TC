/*

https://codeforces.com/problemset/problem/1612/F

Write a C++ Solution ArmorAndWeapons to determine the minimum number of hours Monocarp has to spend to obtain both the num_armor-th armor set and the num_weapon-th weapon.


Monocarp plays a computer game. There are num_armor different sets of armor and num_weapon different weapons in this game. If a character equips the i-th set of armor and wields the j-th weapon, their power is usually equal to i+j : but some combinations of armor and weapons synergize well. Formally, there is a list of q_len
ordered pairs, and if the pair (i,j) belongs to this list, the power of the character equipped with the i-th set of armor and wielding the j-th weapon is not i+j, 
but i+j+1.

Initially, Monocarp's character has got only the 1-st armor set and the 1-st weapon. Monocarp can obtain a new weapon or a new set of armor in one hour. 
If he wants to obtain the k-th armor set or the k-th weapon, he must possess a combination of an armor set and a weapon that gets his power to k
or greater. Of course, after Monocarp obtains a weapon or an armor set, he can use it to obtain new armor sets or weapons, but he can go with any of the older armor sets and/or weapons as well.

Monocarp wants to obtain the num_armor-th armor set and the num_weapon-th weapon. What is the minimum number of hours he has to spend on it?

Input : 

An integer num_armor.
An integer num_weapon.
A vector of a pair of integers synergistic_pair.

Constraints :

num_armor: ranges from 2 to 200000.
num_weapon: ranges from 2 to 200000.
synergistic_pair.size() : ranges from 0 to min(200000,num_armor*num_weapon).
synergistic_pair : synergistic_pair[i][0] ranges from 1 to num_armor.
                   synergistic_pair[i][1] ranges from 1 to num_weapon.
Output:

An integer hours_spent is the minimum number of hours Monocarp has to spend to obtain both the num_armor-th armor set and the num_weapon-th weapon.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

*/



#include <set>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <utility>
#include <iostream>
#include <vector>
#include <functional>
#include <cassert>
#include <stdexcept>

std::pair<int, int> Normalize(const std::pair<int, int>& pair, int num_armor, int num_weapon)
{
    return std::make_pair(std::min(pair.first, num_armor), std::min(pair.second, num_weapon));
}

bool ComparePairs(const std::pair<int, int>& pair_1, const std::pair<int, int>& pair_2)
{
    if (pair_1.first != pair_2.first){
        return pair_1.first > pair_2.first;
    }
    return pair_1.second > pair_2.second;
}




int ArmorAndWeapons(int num_armor,int num_weapon,std::vector<std::pair<int,int>> &synergistic_pair){
    if (num_armor < 2 || num_armor > 200000) {
        throw std::invalid_argument("The number of armor sets must be in the range [2, 210000].");
    }
    if (num_weapon < 2 || num_weapon > 200000) {
        throw std::invalid_argument("The number of weapons must be in the range [2, 210000].");
    }
    int q_len=synergistic_pair.size();
    int max_synergistic_pairs = std::min(200000, num_armor * num_weapon);
    if (q_len < 0 || q_len > max_synergistic_pairs) {
        throw std::invalid_argument("The number of synergistic pairs must be in the range [0, " + std::to_string(max_synergistic_pairs) + "].");
    }
    for (std::pair<int,int>& pair : synergistic_pair) {
        int armor_index = pair.first;
        int weapon_index = pair.second;
        if (armor_index < 1 || armor_index > num_armor) {
            throw std::invalid_argument("Armor index " + std::to_string(armor_index) + " is out of range [1, " + std::to_string(num_armor) + "].");
        }
        if (weapon_index < 1 || weapon_index > num_weapon) {
            throw std::invalid_argument("Weapon index " + std::to_string(weapon_index) + " is out of range [1, " + std::to_string(num_weapon) + "].");
        }
    }
    
    std::set<std::pair<int, int>> synergistic_pairs;
    for (int i = 0; i < q_len; i++)
    {
        int armor_index=synergistic_pair[i].first, weapon_index=synergistic_pair[i].second;
        synergistic_pairs.insert(std::make_pair(armor_index, weapon_index));
    }
    
    int hours_spent = 0;
    std::vector<std::pair<int, int>> current_combinations;
    current_combinations.push_back(std::make_pair(1, 1));
    while (true)
    {
        if (current_combinations[0] == std::make_pair(num_armor, num_weapon)){
            break;
        }
        std::vector<std::pair<int, int>> next_combinations;
        for (int i = 0; i < current_combinations.size(); i++)
        {
            std::pair<int, int> current_pair = current_combinations[i];
            int power_sum = current_pair.first + current_pair.second;
            if (synergistic_pairs.count(current_pair)){
                power_sum++;
            }
            std::pair<int, int> temp_pair = current_pair;
            temp_pair.first = power_sum;
            next_combinations.push_back(Normalize(temp_pair, num_armor, num_weapon));
            temp_pair = current_pair;
            temp_pair.second = power_sum;
            next_combinations.push_back(Normalize(temp_pair, num_armor, num_weapon));
        }
        std::sort(next_combinations.begin(), next_combinations.end(), ComparePairs);
        int max_weapon_power = 0;
        std::vector<std::pair<int, int>> filtered_combinations;
        for (int i = 0; i < next_combinations.size(); i++){
            std::pair<int, int> next_pair = next_combinations[i];
            if (next_pair.second <= max_weapon_power){
                continue;
            }
            max_weapon_power = std::max(max_weapon_power, next_pair.second);
            filtered_combinations.push_back(next_pair);
        }
        current_combinations = filtered_combinations;
        hours_spent++;
    }
    return hours_spent;
}

#include <set>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <utility>
#include <iostream>
#include <vector>
#include <functional>
#include <cassert>
#include <stdexcept>

int main()
{
    int num_armor, num_weapon;
    std::scanf("%d %d", &num_armor, &num_weapon);
    int q_len;
    std::scanf("%d", &q_len);
    std::vector<std::pair<int, int>> synergistic_pairs;
    for (int i = 0; i < q_len; i++)
    {
        int armor_index, weapon_index;
        std::scanf("%d %d", &armor_index, &weapon_index);
        synergistic_pairs.push_back(std::make_pair(armor_index, weapon_index));
    }
    int ans=ArmorAndWeapons(num_armor, num_weapon,synergistic_pairs);
    std::cout<<ans;
}
