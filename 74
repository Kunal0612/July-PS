/*

https://codeforces.com/contest/1842/problem/H

Write a C++ Solution TenzingAndTree to find the probability that all 
the conditions are satisfied, modulo mod=998244353.

There are len uniform random real variables between 0 and 1, inclusive, 
which are denoted as x1,x2,…,xn.

Tenzing has lem conditions. Each condition has the form of xi+xj≤1 or xi+xj≥1.

Tenzing wants to know the probability that all the conditions are satisfied, modulo 998244353.

Formally, let mod=998244353. It can be shown that the answer can be expressed as an 
irreducible fraction p/q, where p and q are integers and q≢0(modM). 
Output the integer equal to (p*q−1)%mod. In other words, output the integer x that 
0≤x<mod and x⋅q≡p(%mod).

Input :

An integer len.
An integer lem.
A vector of vector of integers queries.

Constraints :
len : ranges from 1 to 20.
lem : ranges from 0 to len*len + len.
queries : queries[i][0] contains either 0 or 1 , queries[i][1] ranges from 1 to queries[i][2]
          queries[i][2] ranges from queries[i][1] to len.

Output:

An integer ans to find the probability that all the conditions are satisfied, modulo mod=998244353.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

*/

#include <iostream>
#include <vector>
#include <functional>
#include <cassert>
#include <stdexcept>

long long Power(long long base, int exponent)
{
    long long result = 1;
    int mod = 998244353;
    while (exponent)
    {
        if (exponent & 1)
        {
            result = result * base % mod;
        }
        base = base * base % mod;
        exponent >>= 1;
    }
    return result;
}

inline void Increment(int &value, int addition)
{
    int mod = 998244353;
    if ((value += addition) >= mod)
    {
        value -= mod;
    }
}

int RandomRealNumbers(int len, int lem, std::vector<std::vector<int>> queries)
{
    if (len < 1 or len > 20)
    {
        throw std::invalid_argument("Invalid len");
    }
    if (lem < 0 or lem > len * len + len or lem !=queries.size())
    {
        throw std::invalid_argument("Invalid len");
    }
    std::vector<std::vector<int>> condt(len, std::vector<int>(2, 0));
    std::vector<int> dp(1 << len, 0);

    for (int i = 0; i < lem; i++)
    {
        int type = queries[i][0], num_i = queries[i][1], num_j = queries[i][2];
        if (type != 0 and type != 1)
        {
            throw std::invalid_argument("Invalid Query");
        }
        if (num_i < 1 or num_i > num_j or num_j > len)
        {
            throw std::invalid_argument("Invalid Query");
        }
        num_i--, num_j--;
        condt[num_i][type] |= 1 << num_j;
        condt[num_j][type] |= 1 << num_i;
    }

    int mod = 998244353;
    dp[0] = 1;

    for (int subset = 0; subset < (1 << len); ++subset)
    {
        for (int node = 0; node < len; ++node)
        {
            if (~subset >> node & 1)
            {
                if ((condt[node][0] | subset) == subset)
                {
                    Increment(dp[subset | (1 << node)], dp[subset]);
                }
                if ((condt[node][1] | subset) == subset)
                {
                    Increment(dp[subset | (1 << node)], dp[subset]);
                }
            }
        }
    }

    long long factorial_term = 1;
    for (int i = 1; i <= len; ++i)
    {
        factorial_term = factorial_term * i * 2 % mod;
    }

    int ans = dp[(1 << len) - 1] * Power(factorial_term, mod - 2) % mod;
    return ans;
}

#include <iostream>
#include <vector>
#include <functional>
#include <cassert>
#include <stdexcept>

int main()
{
    // TEST
    int len_1 = 3;
    int lem_1 = 2;
    std::vector<std::vector<int>> queries_1 = {{0, 1, 2}, {1, 3, 3}};
    int expected_1 = 748683265;
    int result_1 = RandomRealNumbers(len_1, lem_1, queries_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int len_2 = 1;
    int lem_2 = 1;
    std::vector<std::vector<int>> queries_2 = {{0, 1, 1}};
    int expected_2 = 499122177;
    int result_2 = RandomRealNumbers(len_2, lem_2, queries_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int len_3 = 4;
    int lem_3 = 5;
    std::vector<std::vector<int>> queries_3 = {{1, 2, 4}, {0, 1, 3}, {1, 1, 2}, {0, 3, 4}, {1, 1, 4}};
    int expected_3 = 291154603;
    int result_3 = RandomRealNumbers(len_3, lem_3, queries_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int len_4 = 2;
    int lem_4 = 2;
    std::vector<std::vector<int>> queries_4 = {{1, 1, 2}, {0, 1, 2}};
    int expected_4 = 0;
    int result_4 = RandomRealNumbers(len_4, lem_4, queries_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int len_5 = 5;
    int lem_5 = 3;
    std::vector<std::vector<int>> queries_5 = {{0, 2, 3}, {1, 1, 5}, {0, 4, 5}};
    int expected_5 = 582309206;
    int result_5 = RandomRealNumbers(len_5, lem_5, queries_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int len_6 = 6;
    int lem_6 = 6;
    std::vector<std::vector<int>> queries_6 = {{1, 1, 6}, {0, 2, 5}, {1, 3, 6}, {0, 1, 4}, {1, 1, 2}, {0, 3, 6}};
    int expected_6 = 0;
    int result_6 = RandomRealNumbers(len_6, lem_6, queries_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int len_7 = 7;
    int lem_7 = 7;
    std::vector<std::vector<int>> queries_7 = {{0, 1, 7}, {1, 2, 5}, {0, 3, 4}, {1, 4, 6}, {0, 1, 3}, {1, 5, 7}, {0, 2, 6}};
    int expected_7 = 973189212;
    int result_7 = RandomRealNumbers(len_7, lem_7, queries_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int len_8 = 8;
    int lem_8 = 8;
    std::vector<std::vector<int>> queries_8 = {{1, 1, 8}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 8}, {1, 2, 4}, {0, 3, 7}};
    int expected_8 = 354089552;
    int result_8 = RandomRealNumbers(len_8, lem_8, queries_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int len_9 = 25;
    int lem_9 = 9;
    std::vector<std::vector<int>> queries_9 = {{1, 1, 9}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 9}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_9, lem_9, queries_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_10 = 0;
    int lem_10 = 9;
    std::vector<std::vector<int>> queries_10 = {{1, 1, 9}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 9}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_10, lem_10, queries_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_11 = -1;
    int lem_11 = 9;
    std::vector<std::vector<int>> queries_11 = {{1, 1, 9}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 9}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_11, lem_11, queries_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_12 = 1;
    int lem_12 = 8;
    std::vector<std::vector<int>> queries_12 = {{1, 1, 9},{1, 1, 9}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 9}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_12, lem_12, queries_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_13 = 1;
    int lem_13 = -8;
    std::vector<std::vector<int>> queries_13 = {{1, 1, 9},{1, 1, 9}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 9}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_13, lem_13, queries_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_14 = 1;
    int lem_14 = 0;
    std::vector<std::vector<int>> queries_14 = {{1, 1, 9},{1, 1, 9}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 9}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_14, lem_14, queries_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_15 = 1;
    int lem_15 = -5;
    std::vector<std::vector<int>> queries_15 = {{1, 1, 9},{1, 1, 9}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 9}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_15, lem_15, queries_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int len_16 = 1;
    int lem_16 = 5;
    std::vector<std::vector<int>> queries_16 = {{1, 1, 9},{1, 1, 9}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 9}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_16, lem_16, queries_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int len_17 = 8;
    int lem_17 = 8;
     std::vector<std::vector<int>> queries_17 = {{10, 5, 8}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 8}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_17, lem_17, queries_17);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int len_18 = 8;
    int lem_18 = 8;
     std::vector<std::vector<int>> queries_18 = {{0, 0, 8}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 8}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_18, lem_18, queries_18);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int len_19 = 8;
    int lem_19 = 8;
     std::vector<std::vector<int>> queries_19 = {{-5, -5, 8}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 8}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_19, lem_19, queries_19);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int len_20 = 8;
    int lem_20 = 8;
     std::vector<std::vector<int>> queries_20 = {{0, 2, 50}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 8}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_20, lem_20, queries_20);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int len_21 = 8;
    int lem_21 = 8;
     std::vector<std::vector<int>> queries_21 = {{0, 2, 0}, {0, 2, 6}, {1, 3, 5}, {0, 4, 7}, {1, 1, 4}, {0, 5, 8}, {1, 2, 4}, {0, 3, 7}};
    try
    {
        RandomRealNumbers(len_21, lem_21, queries_21);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
