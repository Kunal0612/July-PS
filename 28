/*

https://codeforces.com/problemset/problem/1665/E

Write a C++ function MinimizOr to find the answer for each query.

You are given an array nums of n non-negative integers, numbered from 1 to n.

Let's define the cost of the array a as min nums[i]|nums[j] 
where i!=j, where |denotes the bitwise OR operation.

There are q_len queries. For each query you are given two integers l and r 
(l<r). For each query you should 
find the cost of the subarray nums[l],nums[l+1],â€¦,nums[r].


Input :

A  vector of long long integers nums.
A vector of vector of integers queries.

Output :

An vector of integer answer to find the answer for each query.


Constraints :

nums.size() : ranges from 1 to 100000.
nums : ranges from 0 to 2^30 .
queries.size() : ranges from 1 to 100000.
queries : queries[i][0] ranges from 1 to queries[i][1] and queries[i][1] 
ranges from queries[i][0] to nums.size().

Use appropriate Error Handling using the stdexcept library for the invalid test cases


*/


#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>
#include <limits>
#include <stdexcept>



std::pair<int, int> Get(int len, int left, int right, int query_l, int query_r, 
const std::vector<std::pair<int, int>> &res) {
    const int max= 31;
    const int inf = std::numeric_limits<int>::max();
    if (left >= query_l && right <= query_r) return res[len];
    if (query_r <= left || query_l >= right) return std::make_pair(inf, inf);
    int mid = (left + right) / 2;
    return std::min(Get(2 * len + 1, left, mid, query_l, query_r, res), 
    Get(2 * len + 2, mid, right, query_l, query_r, res));
}

void Mod(int len, int left, int right, int idx, int val, std::vector<std::pair<int, int>> &res) {
    if (right - left == 1) {
        res[len] = std::make_pair(val, idx);
        return;
    }
    const int max= 31;
    const int inf = std::numeric_limits<int>::max();
    int mid = (left + right) / 2;
    if (idx < mid) Mod(2 * len + 1, left, mid, idx, val, res);
    else Mod(2 * len + 2, mid, right, idx, val, res);
    res[len] = std::min(res[2 * len + 1], res[2 * len + 2]);
}

std::vector<int> MinimizOr(std::vector<long long int> nums,std::vector<std::vector<int>> queries){
    const int max= 31;
    const int inf = std::numeric_limits<int>::max();
    int len=nums.size();
    if (nums.size() <= 0 or nums.size()>100000 or queries.size() <= 0 or queries.size()>100000) {
        throw std::invalid_argument("vec length must be positive.");
    }
    for (int i = 0; i < nums.size(); ++i)
    {
        if (nums[i]<0 || nums[i] > (1LL<<30))
        {
            throw std::invalid_argument("Invalid element value");
        }
    }
    for(int i=0;i<queries.size();i++){
        if(queries[i][0]<1 or queries[i][0]>queries[i][1] or queries[i][1]>len){
            throw std::invalid_argument("Invalid nums value");
        }
    }
    std::vector<std::pair<int, int>> res(4 * len);
    for (int i = 0; i < len; i++){
        Mod(0, 0, len, i, nums[i], res);
    }

    int q_len=queries.size();
    std::vector<int> answer;
    for(int i = 0; i < q_len; i++) {
        int query_l=queries[i][0], query_r=queries[i][1];
        query_l--;

        std::vector<std::pair<int, int>> brr;
        for (int i = 0; i < std::min(query_r - query_l, max); i++) {
            std::pair<int,int> now = Get(0, 0, len, query_l, query_r, res);
            brr.push_back(now);
            Mod(0, 0, len, now.second, inf, res);
        }

        int ans = (1LL << 31) - 1;
        for (int i = 0; i < static_cast<int>(brr.size()); i++) {
            for (int j = i + 1; j < static_cast<int>(brr.size()); j++) {
                ans = std::min(ans, brr[i].first | brr[j].first);
            }
        }

        for (std::pair<int,int> &c : brr){
            Mod(0, 0, len, c.second, c.first, res);
        } 
        answer.push_back(ans);
    }
    return answer;
}


#include <cassert>

int main() {
    // TEST
    std::vector<long long int> nums_1 = {6, 1, 3, 2, 1};
    std::vector<std::vector<int>> queries_1 = {{1, 2}, {2, 3}, {2, 4}, {2, 5}};
    std::vector<int> expected_1 = {7,3,3,1};
    std::vector<int> result_1 = MinimizOr(nums_1, queries_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<long long int> nums_2 = {5, 5, 5, 5};
    std::vector<std::vector<int>> queries_2 = {{1, 4}};
    std::vector<int> expected_2 = {5};
    std::vector<int> result_2 = MinimizOr(nums_2, queries_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<long long int> nums_3 = {1, 2, 3, 4, 5};
    std::vector<std::vector<int>> queries_3 = {{1, 5}, {2, 4}};
    std::vector<int> expected_3 = {3,3};
    std::vector<int> result_3 = MinimizOr(nums_3, queries_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<long long int> nums_4 = {10, 20, 30, 40, 50};
    std::vector<std::vector<int>> queries_4 = {{1, 2}, {3, 5}};
    std::vector<int> expected_4 = {30,58};
    std::vector<int> result_4 = MinimizOr(nums_4, queries_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<long long int> nums_5 = {2, 3, 7, 15};
    std::vector<std::vector<int>> queries_5 = {{1, 4}};
    std::vector<int> expected_5 = {3};
    std::vector<int> result_5 = MinimizOr(nums_5, queries_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<long long int> nums_6 = {1, 3, 5, 7, 9};
    std::vector<std::vector<int>> queries_6 = {{1, 3}, {4, 5}};
    std::vector<int> expected_6 = {3,15};
    std::vector<int> result_6 = MinimizOr(nums_6, queries_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<long long int> nums_7 = {4, 8, 16, 32};
    std::vector<std::vector<int>> queries_7 = {{2, 4}};
    std::vector<int> expected_7 = {24};
    std::vector<int> result_7 = MinimizOr(nums_7, queries_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<long long int> nums_8 = {1, 2, 4, 8, 16};
    std::vector<std::vector<int>> queries_8 = {{1, 5}};
    std::vector<int> expected_8 = {3};
    std::vector<int> result_8 = MinimizOr(nums_8, queries_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<long long int> nums_9 = {7, 7, 7, 7, 7};
    std::vector<std::vector<int>> queries_9 = {{1, 5}};
    std::vector<int> expected_9 = {7};
    std::vector<int> result_9 = MinimizOr(nums_9, queries_9);
    assert(result_9 == expected_9);
    // TEST_END

    // TEST
    std::vector<long long int> nums_10 = {};
    std::vector<std::vector<int>> queries_10 = {{1, 5}};
    try
    {
        MinimizOr(nums_10, queries_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long int> nums_11 = {0};
    std::vector<std::vector<int>> queries_11 = {{1, 5}};
    try
    {
        MinimizOr(nums_11, queries_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long int> nums_12 = {1<<31};
    std::vector<std::vector<int>> queries_12 = {{1, 5}};
    try
    {
        MinimizOr(nums_12, queries_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long int> nums_13 = {-1};
    std::vector<std::vector<int>> queries_13 = {{1, 5}};
    try
    {
        MinimizOr(nums_13, queries_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long int> nums_14 = {-1};
    std::vector<std::vector<int>> queries_14 = {{1, 5}};
    try
    {
        MinimizOr(nums_14, queries_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long int> nums_15 = {1};
    std::vector<std::vector<int>> queries_15 = {{1, 5}};
    try
    {
        MinimizOr(nums_15, queries_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long int> nums_16 = {1};
    std::vector<std::vector<int>> queries_16 = {};
    try
    {
        MinimizOr(nums_16, queries_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long int> nums_17 = {1};
    std::vector<std::vector<int>> queries_17 = {{-1,-1}};
    try
    {
        MinimizOr(nums_17, queries_17);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long int> nums_18(300000,1);
    std::vector<std::vector<int>> queries_18 = {{-1,-1}};
    try
    {
        MinimizOr(nums_18, queries_18);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<long long int> nums_19(30,1);
    std::vector<std::vector<int>> queries_19(300000,{1,1});
    try
    {
        MinimizOr(nums_19, queries_19);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!" << std::endl;

    return 0;
}
