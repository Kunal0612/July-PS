// https://codeforces.com/problemset/problem/1799/G

#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

int Pow(int base, int times) {
    const int mod = 998244353;
    int ret = 1;
    while (times) {
        if (times & 1)
            ret = 1LL * ret * base % mod;
        times >>= 1;
        base = 1LL * base * base % mod;
    }
    return ret;
}

int CountVoting(std::vector<int> arr,std::vector<int> brr){
    int len=arr.size();
    const int mod = 998244353;
    if (arr.size() <= 0 or arr.size()>200 or arr.size()!=brr.size()){ 
        throw std::invalid_argument("vec length must be positive.");
    }
    for (int i = 0; i < arr.size(); ++i)
    {
        if (arr[i] < 0 || arr[i] > len)
        {
            throw std::invalid_argument("Invalid element value");
        }
    }
    for (int i = 0; i < brr.size(); ++i)
    {
        if (brr[i] <1 || brr[i] > len)
        {
            throw std::invalid_argument("Invalid element value");
        }
    }
    std::vector<std::vector<int>> Cat(len + 1, std::vector<int>(len + 1, 0));
    std::vector<int> srr(len + 1, 0), crr(len, 0), wrr(len + 1, 0), inv(len + 1, 0), fac(len + 1, 1);
    std::vector<std::vector<int>> dpp(len + 1, std::vector<int>(len + 1, 0));

    for (int i = 0; i <= len; i++) {
        Cat[i][0] = 1;
        for (int j = 1; j <= i; j++) {
            Cat[i][j] = (Cat[i - 1][j - 1] + Cat[i - 1][j]) % mod;
        }
    }

    for (int i = 1; i <= len; i++) {
        fac[i] = 1LL * fac[i - 1] * i % mod;
    }

    for (int i = 0; i <= len; i++) {
        inv[i] = Pow(fac[i], mod - 2);
    }

    for (int i = 0; i < len; i++) {
        crr[i]=arr[i];
    }

    int bs = 1;

    for (int i = 0; i < len; i++) {
        int t=brr[i];
        wrr[t]++;
        srr[t] += crr[i];
        bs = 1LL * bs * Cat[srr[t]][crr[i]] % mod;
    }

    dpp[0][0] = 1;
    for (int i = 1; i <= len; i++) {
        for (int k = 0; k <= len - wrr[i]; k++) {
            for (int j = 0; j <= std::min(srr[i], wrr[i]); j++) {
                dpp[i][j + k] = (dpp[i][j + k] + 1LL * dpp[i - 1][k] * Cat[wrr[i]][j] % mod * inv[srr[i] - j]) % mod;
            }
        }
    }

    int sum = 0;
    for (int i = 0; i <= len; i++) {
        sum = (sum + ((i & 1) ? mod - 1LL : 1LL) * dpp[len][i] % mod * fac[len - i]) % mod;
    }

    int ans= 1LL * sum * bs % mod;
    return ans;
}

int main() {

    // TEST
    std::vector<int> arr_1 = {1,2,2,0,0};
    std::vector<int> brr_1 = {3,5,4,3,4};
    int expected_1 = 5;
    int result_1 = CountVoting(arr_1,brr_1);
    assert(result_1 == expected_1);
    // TEST_END
    // TEST
    std::vector<int> arr_2 = {0, 0, 0, 0, 0};
    std::vector<int> brr_2 = {1, 2, 3, 4, 5};
    int expected_2 = 120;
    int result_2 = CountVoting(arr_2, brr_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> arr_3 = {1, 1, 1, 1, 1};
    std::vector<int> brr_3 = {1, 1, 1, 1, 1};
    int expected_3 = 0;
    int result_3 = CountVoting(arr_3, brr_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> arr_4 = {0, 1, 2, 3, 4};
    std::vector<int> brr_4 = {5, 4, 3, 2, 1};
    int expected_4 = 506054429;
    int result_4 = CountVoting(arr_4, brr_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> arr_5 = {1,1,1};
    std::vector<int> brr_5 = {1,2,3};
    int expected_5 = 2;
    int result_5 = CountVoting(arr_5, brr_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> arr_6 = {0, 0, 0, 1, 1};
    std::vector<int> brr_6 = {2, 2, 2, 2, 2};
    int expected_6 = 0;
    int result_6 = CountVoting(arr_6, brr_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> arr_7 = {1, 2, 3, 4, 5};
    std::vector<int> brr_7 = {5, 4, 3, 2, 1};
    int expected_7 = 193005462;
    int result_7 = CountVoting(arr_7, brr_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> arr_8 = {2,0,1,0,2};
    std::vector<int> brr_8 = {1,2,3,4,5};
    int expected_8 = 10;
    int result_8 = CountVoting(arr_8, brr_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    std::vector<int> arr_9 = {};
    std::vector<int> brr_9 = {1,2,3,4,5};
    try
    {
        CountVoting(arr_9, brr_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> brr_10 = {};
    std::vector<int> arr_10 = {1,2,3,4,5};
    try
    {
        CountVoting(arr_10, brr_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_11 = {-1};
    std::vector<int> brr_11 = {1};
    try
    {
        CountVoting(arr_11, brr_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_12 = {1};
    std::vector<int> brr_12 = {-1};
    try
    {
        CountVoting(arr_12, brr_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_13 = {1000000};
    std::vector<int> brr_13 = {1};
    try
    {
        CountVoting(arr_13, brr_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_14 = {1};
    std::vector<int> brr_14 = {1000000};
    try
    {
        CountVoting(arr_14, brr_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_15 = {};
    std::vector<int> brr_15 = {};
    try
    {
        CountVoting(arr_15, brr_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
