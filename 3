/*

https://codeforces.com/problemset/problem/1736/E

Create a C++ function named SwapandTake to find the maximum possible score..

You're given an array consisting of n integers. You have to perform n turns.

Initially your score is 0.

On the i-th turn, you are allowed to leave the array as it is or swap any one pair of 2 adjacent elements in the array and change exactly one of them to 0 (and leave the value of other element unchanged) after swapping. In either case(whether you swap or not), after this you add a[i] to your score.

What's the maximum possible score you can get?

Input:

A vector of integers nums.

Constraints:

nums.size() : ranges from 1 to 500.
nums : ranges from 1 to 1000000.

Output:

A integer answer the maximum possible score.

*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <cassert>

int SwapandTake(std::vector<int> &nums){
    if (nums.size() <= 0 or nums.size()>500) {
        throw std::invalid_argument("vec length must be positive.");
    }
    for (int i = 0; i < nums.size(); ++i)
    {
        if (nums[i] < 1 || nums[i] > 1000000)
        {
            throw std::invalid_argument("Invalid element value");
        }
    }
    int n=nums.size();

    std::vector<int> a(n + 5);
    for (int i = 1; i <= n; i++) {
        a[i]=nums[i-1];
    }
    const int MAX = 505;
    std::vector<std::vector<std::vector<int>>> res(n+1, std::vector<std::vector<int>>(n+1, std::vector<int>(n+1, -(int)(1e9))));

    std::vector<std::vector<int>> prefix(n + 5, std::vector<int>(n + 5, 0));

    int ans = 0;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            for (int k = 0; k <= i; k++) {
                if (k > 0) {
                    res[i][j][k] = res[i - 1][j][k - 1] + a[j];
                }
                if (j >= i) {
                    int need = j - i;
                    if (need > k) {
                        continue;
                    }
                    res[i][j][k] = std::max(res[i][j][k], prefix[k - need][j - 1] + a[j]);
                }
            }
        }

        for (int j = 1; j <= n; j++) {
            for (int k = 0; k <= i; k++) {
                prefix[k][j] = std::max(prefix[k][j], res[i][j][k]);
            }
        }

        for (int j = 0; j <= i; j++) {
            for (int k = 1; k <= n; k++) {
                prefix[j][k] = std::max(prefix[j][k], prefix[j][k - 1]);
                ans = std::max(ans, prefix[j][k]);
            }
        }
    }

    return ans;
}


int main() {
    // TEST
    std::vector<int> nums_1 = {7,3,9,6,12};
    int expected_1 = 52;
    int result_1 = SwapandTake(nums_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {1, 1, 1, 1};
    int expected_2 =4 ;
    int result_2 = SwapandTake(nums_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {4, 3, 2, 1};
    int expected_3 = 16;
    int result_3 = SwapandTake(nums_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {1, 3, 2, 1, 2, 1, 1, 3, 3};
    int expected_4 = 27;
    int result_4 = SwapandTake(nums_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {5, 4, 3, 2, 1};
    int expected_5 = 25;
    int result_5 = SwapandTake(nums_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {1, 2, 3, 4, 5};
    int expected_6 = 19;
    int result_6 = SwapandTake(nums_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {1,2,3,9};
    int expected_7 = 28;
    int result_7 = SwapandTake(nums_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {1, 2, 3,5};
    int expected_8 = 16;
    int result_8 = SwapandTake(nums_8);
    assert(result_8 == expected_8);
    // TEST_END

    //TEST
    std::vector<int> nums_9 = {1, 2, 2, 4, 5};
    int expected_9 = 19;
    int result_9 = SwapandTake(nums_9);
    assert(result_9 == expected_9);
    //TEST_END

    // TEST
    std::vector<int> nums_10 = {};
    int expected_10;
    try
    {
        SwapandTake(nums_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_11 = {-100000002, 100000002};
    int expected_11;
    try
    {
        SwapandTake(nums_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_12(300000, 1);
    int expected_12;
    try
    {
        SwapandTake(nums_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_13 = {100000002};
    int expected_13;
    try
    {
        SwapandTake(nums_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!" << std::endl;
    return 0;
}

