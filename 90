/*

https://codeforces.com/problemset/problem/1421/E

Write a C++ Solution WoodenRaft to find the maximum area of the raft you can craft.

While playing yet another strategy game, Mans has recruited len Swedish heroes, 
whose powers which can be represented as an array nums.

Unfortunately, not all of those mighty heroes were created as capable as he wanted, 
so that he decided to do something about it. In order to accomplish his goal, 
he can pick two consecutive heroes, with powers nums[i] and nums[i+1], remove them 
and insert a hero with power −(nums[i]+nums[i+1]) back in the same position.

For example if the array contains the elements [5,6,7,8], he can pick 6 and 7 and get 
[5,−(6+7),8]=[5,−13,8].

After he will perform this operation len−1 times, Mans will end up having only one hero. 
He wants his power to be as big as possible. What's the largest possible power he can achieve?


Input :

A vector of integers nums.

Constraints :

nums : ranges from 1 to 200000.
nums.size() : ranges from -1000000000 to 1000000000.

Output:

An integer ans to find the largest possible power he can achieve after len−1 operations.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

*/


#include <algorithm>
#include <cstdio>
#include <vector>
#include <limits>
#include <iostream>
#include <map>
#include <cassert>
#include <stdexcept>

void ToMax(long long &first, long long sec) {
    first = std::max(first, sec);
}


int SwedishHeroes(std::vector<int> nums){
    int len=nums.size();
    if (len < 1 || len > 200000) {
        throw std::invalid_argument("Invalid number of nums");
    }
    for(int i=0; i<len; i++){
        if (nums[i] < -1000000000 || nums[i] > 1000000000) {
            throw std::invalid_argument("Invalid log length");
        }
    }
    std::vector<int> arr(len + 1);
    std::vector<std::vector<std::vector<std::vector<long long>>>> dp_table(
        len + 1, 
        std::vector<std::vector<std::vector<long long>>>(
            3, 
            std::vector<std::vector<long long>>(3, std::vector<long long>(2, std::numeric_limits<long long>::min()))
        )
    );

    for (int i = 1; i <= len; ++i) {
        arr[i]=nums[i-1];
    }

    if (len == 1) {
        return arr[1];
    } 
    int sign[] = {1, -1};
    dp_table[0][0][2][0] = 0;

    for (int i = 1; i <= len; ++i) {
        for (int j = 0; j < 3; ++j) {
            for (int k = 0; k < 2; ++k) { 
                for (int l = 0; l < 2; ++l) {
                    for (int w = 0; w < 3; ++w) {
                        if (dp_table[i - 1][(j + !k + 1) % 3][w][l] != std::numeric_limits<long long>::min()) {
                            ToMax(dp_table[i][j][k][l || w == k], dp_table[i - 1][(j + !k + 1) % 3][w][l] + sign[k] * arr[i]);
                        }
                    }
                }
            }
        }
    }

    int ans=std::max(dp_table[len][1][0][1], dp_table[len][1][1][1]);
    return ans;
}


#include <algorithm>
#include <cstdio>
#include <vector>
#include <limits>
#include <iostream>
#include <map>
#include <cassert>
#include <stdexcept>

int main() {
     // TEST
    std::vector<int> nums_1 = {1,2,4,3};
    int expected_1 = 10;
    int result_1 = SwedishHeroes(nums_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {2, 3, 5, 7, 1,2,3,4};
    int expected_2 = 21;
    int result_2 = SwedishHeroes(nums_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {1,2,3,4,5,5};
    int expected_3 = 18;
    int result_3 = SwedishHeroes(nums_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {1, 2, 4, 4, 5};
    int expected_4 = 10;
    int result_4 = SwedishHeroes(nums_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {1, 2, 2, 4, 5, 6};
    int expected_5 = 18;
    int result_5 = SwedishHeroes(nums_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {1, 2, 1, 2, 5, 5};
    int expected_6 =14;
    int result_6 = SwedishHeroes(nums_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {7, 7, 7, 7, 7,1,1,1};
    int expected_7 = 34;
    int result_7 = SwedishHeroes(nums_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {3, 3, 3, 3, 3, 3, 3};
    int expected_8 = 21;
    int result_8 = SwedishHeroes(nums_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<int> nums_9 = {-1000000009};
    try
    {
        SwedishHeroes(nums_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    std::vector<int> nums_10(6000000,0);
    try
    {
        SwedishHeroes(nums_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    std::vector<int> nums_11(6,-1000000009);
    try
    {
        SwedishHeroes(nums_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_12(6,1000000009);
    try
    {
        SwedishHeroes(nums_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_13={};
    try
    {
        SwedishHeroes(nums_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
