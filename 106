/*

https://codeforces.com/problemset/problem/1967/D

Write a C++ Solution KSetTree to  determine the sum of subtree sizes considering all 
possible root vertices and subsets of size k.


Little R is a magician who likes non-decreasing arrays. She has an array of length len, 
initially as arr_1,…,arr_len, in which each element is an integer between [1,range].
She wants it to be non-decreasing, i.e., arr_1≤arr_2≤…≤arr_len.

To do this, she can perform several magic tricks. Little R has a fixed array brr_1…brr_m of length range. 
Formally, let's define a trick as a procedure that does the following things in order:

Choose a set S⊆{1,2,…,len}.

For each u∈S, assign arr[u] with brr[arr[u]].

Little R wonders how many tricks are needed at least to make the initial array non-decreasing. 
If it is not possible with any amount of tricks, print −1 instead.


Input :

An integer range.
An vector of integers arr.
An vector of integers arr.

Constraints :

range : ranges from 1 to 10^6.
arr.size() : ranges from 1 to 10^6.
brr.size() : equal to range.
arr : ranges from 1 to range.
brr : ranges from 1 to range.

Output:

An integer ans to determine the minimum number of tricks needed, or −1 if it is 
impossible to make arr_1,…,arr_len non-decreasing.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

*/

#include <functional>
#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <cassert>
#include <stdexcept>



int LongWayToBeNondecreasing(int range, std::vector<int> &arr, std::vector<int> &brr)
{
    int len = arr.size();
    if (len < 1 || len > 1000000)
    {
        throw std::invalid_argument("len must be between 1 and 1000000");
    }
    if (range < 1 || range > 1000000)
    {
        throw std::invalid_argument("range must be between 1 and 1000000");
    }

    if (arr.size() != static_cast<size_t>(len))
    {
        throw std::invalid_argument("The size of arr must be equal to n");
    }
    for (int &a : arr)
    {
        if (a < 1 || a > range)
        {
            throw std::invalid_argument("Each element in arr must be between 1 and range");
        }
    }
    if (brr.size() != static_cast<size_t>(range))
    {
        throw std::invalid_argument("The size of brr must be equal to range");
    }
    for (int &b : brr)
    {
        if (b < 1 || b > range)
        {
            throw std::invalid_argument("Each element in brr must be between 1 and range");
        }
    }
    int total = 0;
    std::vector<int> array_a(len), array_b(range + 1), visited(range + 1), identifier(range + 1), start(range + 1), end(range + 1), depth(range + 1), root(range + 1), length(range + 1);
    std::vector<std::vector<int>> edges(range + 1);

    for (int i = 0; i < len; i++)
    {
        array_a[i] = arr[i];
    }
    for (int i = 1; i <= range; i++)
    {
        array_b[i] = brr[i - 1];
    }

    for (int i = 1; i <= range; i++)
    {
        if (!visited[i])
        {
            int node_x = i;
            while (!visited[node_x])
            {
                visited[node_x] = i;
                node_x = array_b[node_x];
            }
            if (visited[node_x] == i)
            {
                int node_u = node_x, counter = 0;
                do
                {
                    identifier[node_u] = ++counter;
                    node_u = array_b[node_u];
                } while (node_x != node_u);
                length[i] = counter;
            }
            for (int node_u = i; node_u != node_x; node_u = array_b[node_u])
            {
                edges[array_b[node_u]].push_back(node_u);
            }
        }
    }

    std::function<void(int)> dfs = [&](int node_x)
    {
        start[node_x] = ++total;
        for (int node_y : edges[node_x])
        {
            root[node_y] = root[node_x];
            depth[node_y] = depth[node_x] + 1;
            visited[node_y] = visited[node_x];
            dfs(node_y);
        }
        end[node_x] = total;
    };

    for (int i = 1; i <= range; i++)
    {
        if (identifier[i])
        {
            root[i] = i;
            dfs(i);
        }
    }

    std::function<int(int, int)> distance = [&](int node_x, int node_y)
    {
        if (start[node_y] <= start[node_x] && end[node_x] <= end[node_y])
        {
            return depth[node_x] - depth[node_y];
        }
        if (visited[node_x] == visited[node_y] && identifier[node_y])
        {
            int size = length[visited[node_x]];
            return depth[node_x] + (identifier[node_y] - identifier[root[node_x]] + size) % size;
        }
        return range;
    };

    std::function<bool(int)> check = [&](int node_x)
    {
        int pos = 1;
        for (int value : array_a)
        {
            while (pos <= range && distance(value, pos) > node_x)
            {
                pos++;
            }
            if (pos > range)
            {
                return false;
            }
        }
        return true;
    };

    int left = 0, right = range - 1, ans = -1;
    while (left <= right)
    {
        int mid = (left + right) / 2;
        if (check(mid))
        {
            right = (ans = mid) - 1;
        }
        else
        {
            left = mid + 1;
        }
    }
    return ans;
}

#include <functional>
#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <cassert>
#include <stdexcept>

int main()
{
    // TEST
    int range_1 = 8;
    std::vector<int> arr_1 = {1, 6, 3, 7, 1};
    std::vector<int> brr_1 = {2, 3, 5, 8, 7, 1, 5, 6};
    int expected_1 = 3;
    int result_1 = LongWayToBeNondecreasing(range_1, arr_1, brr_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int range_2 = 10;
    std::vector<int> arr_2 = {9, 1, 3, 2, 4, 8, 7, 6, 5, 10};
    std::vector<int> brr_2 = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    int expected_2 = -1;
    int result_2 = LongWayToBeNondecreasing(range_2, arr_2, brr_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int range_3 = 15;
    std::vector<int> arr_3 = {1, 3, 2, 4, 5, 7, 6, 8, 10, 9, 11, 12, 14, 13, 15};
    std::vector<int> brr_3 = {15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    int expected_3 = -1;
    int result_3 = LongWayToBeNondecreasing(range_3, arr_3, brr_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int range_4 = 10;
    std::vector<int> arr_4 = {2,8,5,4,8,4,1,5,10,10};
    std::vector<int> brr_4 = {6,7,2,6,3,4,1,1,3,5};
    int expected_4 = 3;
    int result_4 = LongWayToBeNondecreasing(range_4, arr_4, brr_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int range_5 = 7;
    std::vector<int> arr_5 = {1, 3, 5, 5, 5, 4, 6};
    std::vector<int> brr_5 = {7, 6, 5, 4, 3, 2, 1};
    int expected_5 = 1;
    int result_5 = LongWayToBeNondecreasing(range_5, arr_5, brr_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int range_6 = 12;
    std::vector<int> arr_6 = {12, 1, 1, 2, 2, 5, 6, 7, 8, 9, 10, 11};
    std::vector<int> brr_6 = {11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 12};
    int expected_6 = -1;
    int result_6 = LongWayToBeNondecreasing(range_6, arr_6, brr_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int range_7 = 6;
    std::vector<int> arr_7 = {6, 6, 4, 4, 2, 1};
    std::vector<int> brr_7 = {1, 2, 3, 4, 5, 6};
    int expected_7 = -1;
    int result_7 = LongWayToBeNondecreasing(range_7, arr_7, brr_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int range_8 = 9;
    std::vector<int> arr_8 = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    std::vector<int> brr_8 = {9, 8, 7, 6, 5, 4, 3, 2, 1};
    int expected_8 = 0;
    int result_8 = LongWayToBeNondecreasing(range_8, arr_8, brr_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int range_9 = 0;
    std::vector<int> arr_9 = {1, 6, 3, 7, 1};
    std::vector<int> brr_9 = {2, 3, 5, 8, 7, 1, 5, 6};
    try
    {
        LongWayToBeNondecreasing(range_9, arr_9, brr_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int range_10 = 2000005;
    std::vector<int> arr_10 = {1, 6, 3, 7, 1};
    std::vector<int> brr_10 = {2, 3, 5, 8, 7, 1, 5, 6};
    try
    {
        LongWayToBeNondecreasing(range_10, arr_10, brr_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int range_11 = 8;
    std::vector<int> arr_11 = {1000005, 6, 3, 7, 1};
    std::vector<int> brr_11 = {2, 3, 5, 8, 7, 1, 5, 6};
    try
    {
        LongWayToBeNondecreasing(range_11, arr_11, brr_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int range_12 = 8;
    std::vector<int> arr_12 = {0, 6, 3, 7, 1};
    std::vector<int> brr_12 = {2, 3, 5, 8, 7, 1, 5, 6};
    try
    {
        LongWayToBeNondecreasing(range_12, arr_12, brr_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int range_13 = 8;
    std::vector<int> arr_13 = {-4, 6, 3, 7, 1};
    std::vector<int> brr_13 = {2, 3, 5, 8, 7, 1, 5, 6};
    try
    {
        LongWayToBeNondecreasing(range_13, arr_13, brr_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int range_14 = 8;
    std::vector<int> arr_14(1000100, 1);
    std::vector<int> brr_14 = {2, 3, 5, 8, 7, 1, 5, 6};
    try
    {
        LongWayToBeNondecreasing(range_14, arr_14, brr_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int range_15 = 8;
    std::vector<int> arr_15(10, 1);
    std::vector<int> brr_15 = {55, 3, 5, 8, 7, 1, 5, 6};
    try
    {
        LongWayToBeNondecreasing(range_15, arr_15, brr_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int range_16 = 8;
    std::vector<int> arr_16(10, 1);
    std::vector<int> brr_16 = {0, 3, 5, 8, 7, 1, 5, 6};
    try
    {
        LongWayToBeNondecreasing(range_16, arr_16, brr_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int range_17 = 8;
    std::vector<int> arr_17(10, 1);
    std::vector<int> brr_17 = {-5, 3, 5, 8, 7, 1, 5, 6};
    try
    {
        LongWayToBeNondecreasing(range_17, arr_17, brr_17);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All testcases passed";
    return 0;
}
