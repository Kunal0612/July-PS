/*

https://codeforces.com/problemset/problem/1830/D


Write a C++ Solution MexTree to find the maximum possible value of any coloring of the tree.


You are given a tree with num_nodes nodes. For each node, you either color it in 0 or 1.

The value of a path (u,v) is equal to the MEX† of the colors of the nodes from the 
shortest path between u and v.

The value of a coloring is equal to the sum of values of all paths (u,v) such that 
1≤u≤v≤num_nodes.

What is the maximum possible value of any coloring of the tree?

†
The MEX (minimum excluded) of an array is the smallest non-negative integer that does 
not belong to the array. For instance:

The MEX of [2,2,1] is 0 , because 0 does not belong to the array.
The MEX of [3,1,0,1] is 2 , because 0 and 1 belong to the array, but 2 does not.
The MEX of [0,3,1,2] is 4 because 0 , 1, 2, and 3 belong to the array, but 4 does not.


Input :

An integer num_nodes.
A vector of vector of integers edge.

Constraints :

num_nodes : ranges from 1 to 200000.
edge.size() : is of size num_nodes - 1.
edge : ranges from 1 to num_nodes and edge[i][0]!=edge[i][1].

Output:

An integer ans the maximum possible value of any coloring of the tree.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.


*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <utility>
#include <limits>
#include <stdexcept>
#include <cassert>



struct DPState {
    std::vector<long long> arr;
    std::vector<long long> brr;
    int lim = 893;
    long long inf = std::numeric_limits<long long>::max();
    void Init() {
        arr.resize(lim + 1, inf);
        brr.resize(lim + 1, inf);
        arr[1] = 1;
        brr[1] = 2;
    }
};



int MexTree(int num_nodes,std::vector<std::vector<int>> edge) {
    if (num_nodes < 1 || num_nodes > 200000) {
        throw std::invalid_argument("Invalid number of num_nodes: " + std::to_string(num_nodes) + ". It should be within the range 1 ≤ n ≤ 2⋅10^5.");
    }
    if (edge.size() != num_nodes - 1) {
        throw std::invalid_argument("Number of edges does not match n-1.");
    }
    for (std::vector<int>& it : edge) {
        int node_a = it[0];
        int node_b = it[1];
        if (node_a < 1 || node_a > num_nodes || node_b < 1 || node_b > num_nodes || node_a == node_b) {
            throw std::invalid_argument("Invalid edge: (" + std::to_string(node_a) + ", " + std::to_string(node_b) + "). It should satisfy 1 ≤ ai, bi ≤ n and ai ≠ bi.");
        }
    }
    std::vector<std::vector<int>> graph(num_nodes + 1);
    std::vector<int> size(num_nodes + 1);
    std::vector<std::pair<int, int>> edges;

    for (int i = 1; i < num_nodes; ++i) {
        int node_x=edge[i-1][0], node_y=edge[i-1][1];
        graph[node_x].push_back(node_y);
        graph[node_y].push_back(node_x);
        edges.push_back({node_x, node_y});
    }
    std::function<int(int, int)> shuffle_kids = [&](int node, int parent) {
        int size = 1;
        std::pair<int, int> best;
        for (int i = 0; i < (int)graph[node].size(); ++i) {
            if (graph[node][i] != parent) {
                int sub_size = shuffle_kids(graph[node][i], node);
                best = std::max(best, {sub_size, i});
                size += sub_size;
            }
        }
        if (!graph[node].empty()) {
            std::swap(graph[node][0], graph[node][best.second]);
        }
        return size;
    };

    shuffle_kids(1, 0);
    int lim = 893;
    long long inf = std::numeric_limits<long long>::max();
    std::vector<std::vector<long long>> merged(2 * lim + 1, std::vector<long long>(2, inf));

    std::function<DPState(int, int)> dfs = [&](int node, int parent) {
        DPState dp_table;
        size[node] = 1;
        bool initialized = false;

        for (int child : graph[node]) {
            if (child != parent) {
                DPState child_dp = dfs(child, node);
                if (!initialized) {
                    dp_table.Init();
                    initialized = true;
                }
                for (int j = 0; j <= std::min(size[node], lim) + std::min(size[child], lim); ++j) {
                    merged[j][0] = merged[j][1] = inf;
                }
                for (int k = 1; k <= std::min(size[node], lim); ++k) {
                    for (int l = 1; l <= std::min(size[child], lim); ++l) {
                        merged[k][0] = std::min(merged[k][0], dp_table.arr[k] + child_dp.brr[l]);
                        merged[k][1] = std::min(merged[k][1], dp_table.brr[k] + child_dp.arr[l]);
                        merged[k + l][0] = std::min(merged[k + l][0], dp_table.arr[k] + child_dp.arr[l] + k * l);
                        merged[k + l][1] = std::min(merged[k + l][1], dp_table.brr[k] + child_dp.brr[l] + k * l * 2);
                    }
                }
                size[node] += size[child];
                for (int k = 1; k <= std::min(size[node], lim); ++k) {
                    dp_table.arr[k] = merged[k][0];
                    dp_table.brr[k] = merged[k][1];
                }
            }
        }
        if (!initialized) {
            dp_table.Init();
            initialized = true;
        }
        return dp_table;
    };

    DPState dp_table = dfs(1, 0);
    long long ans = inf;
    for (int i = 1; i <= lim; ++i) {
        ans = std::min(ans, dp_table.arr[i]);
        ans = std::min(ans, dp_table.brr[i]);
    }
    int answer=num_nodes * (num_nodes + 1) - ans;
    return answer;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <utility>
#include <limits>
#include <stdexcept>
#include <cassert>


int main()
{
    // TEST
    int num_nodes_1 = 4;
    std::vector<std::vector<int>> edges_1 = {{1, 2}, {3, 2}, {2, 4}};
    int expected_1 = 15; 
    int result_1 = MexTree(num_nodes_1, edges_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int num_nodes_2 = 5;
    std::vector<std::vector<int>> edges_2 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    int expected_2 = 23; 
    int result_2 = MexTree(num_nodes_2, edges_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int num_nodes_3 = 3;
    std::vector<std::vector<int>> edges_3 = {{1, 2}, {1, 3}};
    int expected_3 =8;
    int result_3 = MexTree(num_nodes_3, edges_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int num_nodes_4 = 6;
    std::vector<std::vector<int>> edges_4 = {{1, 2}, {1, 3}, {3, 4}, {3, 5}, {5, 6}};
    int expected_4 = 33; 
    int result_4 = MexTree(num_nodes_4, edges_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int num_nodes_5 = 7;
    std::vector<std::vector<int>> edges_5 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}};
    int expected_5 = 47;
    int result_5 = MexTree(num_nodes_5, edges_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int num_nodes_6 = 8;
    std::vector<std::vector<int>> edges_6 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {7, 8}};
    int expected_6 = 61;
    int result_6 = MexTree(num_nodes_6, edges_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int num_nodes_7 = 9;
    std::vector<std::vector<int>> edges_7 = {{1, 2}, {1, 3}, {3, 4}, {3, 5}, {4, 6}, {5, 7}, {6, 8}, {7, 9}};
    int expected_7 = 77;
    int result_7 = MexTree(num_nodes_7, edges_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int num_nodes_8 = 10;
    std::vector<std::vector<int>> edges_8 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {4, 8}, {5, 9}, {6, 10}};
    int expected_8 = 95; 
    int result_8 = MexTree(num_nodes_8, edges_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int num_nodes_9 = 5001;
    std::vector<std::vector<int>> edges_9 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {4, 9}, {5, 9}, {6, 10}};
    try
    {
        MexTree(num_nodes_9, edges_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_nodes_10 = 0;
    std::vector<std::vector<int>> edges_10 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {4, 10}, {5, 10}, {6, 10}};
    try
    {
        MexTree(num_nodes_10, edges_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_11 = -5;
    std::vector<std::vector<int>> edges_11 = {{1, 2}, {3, 2}, {2, 4}};
    try
    {
        MexTree(num_nodes_11, edges_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_12 = 5;
    std::vector<std::vector<int>> edges_12 = {{1, 2}, {3, 2}, {2, 4}};
    try
    {
        MexTree(num_nodes_12, edges_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_13 = 5;
    std::vector<std::vector<int>> edges_13 = {{-1, 2}, {3, 2}, {2, 4}};
    try
    {
        MexTree(num_nodes_13, edges_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_14 = 5;
    std::vector<std::vector<int>> edges_14 = {{1, 0}, {3, 2}, {2, 4}};
    try
    {
        MexTree(num_nodes_14, edges_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
