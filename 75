/*

https://codeforces.com/contest/1842/problem/F

Write a C++ Solution TenzingAndTree to find for all k such that 0≤k≤num_nodes, Tenzing wants to know the maximum value of the tree when k vertices are painted black and num_nodes−k vertices are painted white.

Tenzing has an undirected tree of num_nodes vertices.

Define the value of a tree with black and white vertices in the following way. The value of an edge is the absolute difference between the number of black nodes in the two components of the tree after deleting the edge. The value of the tree is the sum of values over all edges.

For all k such that 0≤k≤num_nodes, Tenzing wants to know the maximum value of the tree when k vertices are painted black and num_nodes−k
vertices are painted white.

Input :
An integer num_nodes.
A vector of vector of edges.

Constraints :

num_nodes: ranges from 1 to 5000.
edges.size() : is equal to num_nodes-1.
edges : ranges from 1 to num_nodes and edges[i][0]!=edges[i][1].


Output:

An vector of integers ans to find for all k such that 0≤k≤num_nodes, Tenzing wants to know the maximum value of the tree when k vertices are painted black and num_nodes−k vertices are painted white.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <cassert>
#include <stdexcept>

void BFS(int start_node, int num_nodes, const std::vector<std::vector<int>> &graph, std::vector<int> &answers)
{
    std::vector<int> queue(num_nodes), distances(num_nodes, -1);
    queue[0] = start_node;
    distances[start_node] = 0;

    int front = 0, rear = 1;
    while (front < rear)
    {
        int node = queue[front++];
        for (int neighbor : graph[node])
        {
            if (distances[neighbor] < 0)
            {
                distances[neighbor] = distances[node] + 1;
                queue[rear++] = neighbor;
            }
        }
    }

    int sum_distances = 0;
    for (int i = 0; i < num_nodes; ++i)
    {
        sum_distances += distances[queue[i]];
        answers[i + 1] = std::max(answers[i + 1], (num_nodes - 1) * (i + 1) - 2 * sum_distances);
    }
}

std::vector<int> TenzingAndTree(int num_nodes, std::vector<std::vector<int>> edges)
{
    if (num_nodes < 1 or num_nodes > 5000 or edges.size() != num_nodes - 1)
    {
        throw std::invalid_argument("Invalid length");
    }
    std::vector<std::vector<int>> graph(num_nodes);
    for (int i = 0; i < num_nodes - 1; ++i)
    {
        int node_u = edges[i][0], node_v = edges[i][1];
        if (node_u < 1 or node_u > num_nodes or node_v < 1 or node_v > num_nodes or node_u == node_v)
        {
            throw std::invalid_argument("Invalid Edges");
        }
        --node_u;
        --node_v;
        graph[node_u].push_back(node_v);
        graph[node_v].push_back(node_u);
    }
    std::vector<int> answer(num_nodes + 1, 0);
    for (int i = 0; i < num_nodes; ++i)
    {
        BFS(i, num_nodes, graph, answer);
    }
    return answer;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <cassert>
#include <stdexcept>

int main()
{
    // TEST
    int num_nodes_1 = 4;
    std::vector<std::vector<int>> edges_1 = {{1, 2}, {3, 2}, {2, 4}};
    std::vector<int> expected_1 = {0, 3, 4, 5, 6}; 
    std::vector<int> result_1 = TenzingAndTree(num_nodes_1, edges_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int num_nodes_2 = 5;
    std::vector<std::vector<int>> edges_2 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    std::vector<int> expected_2 = {0, 4, 6, 8, 8, 8}; 
    std::vector<int> result_2 = TenzingAndTree(num_nodes_2, edges_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int num_nodes_3 = 3;
    std::vector<std::vector<int>> edges_3 = {{1, 2}, {1, 3}};
    std::vector<int> expected_3 = {0, 2, 2, 2}; 
    std::vector<int> result_3 = TenzingAndTree(num_nodes_3, edges_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int num_nodes_4 = 6;
    std::vector<std::vector<int>> edges_4 = {{1, 2}, {1, 3}, {3, 4}, {3, 5}, {5, 6}};
    std::vector<int> expected_4 = {0, 5, 8, 11, 14, 15, 16}; 
    std::vector<int> result_4 = TenzingAndTree(num_nodes_4, edges_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int num_nodes_5 = 7;
    std::vector<std::vector<int>> edges_5 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}};
    std::vector<int> expected_5 = {0, 6, 10, 14, 18, 20, 20, 22}; 
    std::vector<int> result_5 = TenzingAndTree(num_nodes_5, edges_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int num_nodes_6 = 8;
    std::vector<std::vector<int>> edges_6 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {7, 8}};
    std::vector<int> expected_6 = {0, 7, 12, 17, 22, 25, 28, 29, 30};
    std::vector<int> result_6 = TenzingAndTree(num_nodes_6, edges_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int num_nodes_7 = 9;
    std::vector<std::vector<int>> edges_7 = {{1, 2}, {1, 3}, {3, 4}, {3, 5}, {4, 6}, {5, 7}, {6, 8}, {7, 9}};
    std::vector<int> expected_7 = {0, 8, 14, 20, 26, 30, 34, 38, 40, 42};
    std::vector<int> result_7 = TenzingAndTree(num_nodes_7, edges_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int num_nodes_8 = 10;
    std::vector<std::vector<int>> edges_8 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {4, 8}, {5, 9}, {6, 10}};
    std::vector<int> expected_8 = {0, 9, 16, 23, 30, 35, 40, 45, 48, 51, 52}; 
    std::vector<int> result_8 = TenzingAndTree(num_nodes_8, edges_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int num_nodes_9 = 5001;
    std::vector<std::vector<int>> edges_9 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {4, 9}, {5, 9}, {6, 10}};
    try
    {
        TenzingAndTree(num_nodes_9, edges_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_nodes_10 = 0;
    std::vector<std::vector<int>> edges_10 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {4, 10}, {5, 10}, {6, 10}};
    try
    {
        TenzingAndTree(num_nodes_10, edges_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_11 = -5;
    std::vector<std::vector<int>> edges_11 = {{1, 2}, {3, 2}, {2, 4}};
    try
    {
        TenzingAndTree(num_nodes_11, edges_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_12 = 5;
    std::vector<std::vector<int>> edges_12 = {{1, 2}, {3, 2}, {2, 4}};
    try
    {
        TenzingAndTree(num_nodes_12, edges_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_13 = 5;
    std::vector<std::vector<int>> edges_13 = {{-1, 2}, {3, 2}, {2, 4}};
    try
    {
        TenzingAndTree(num_nodes_13, edges_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_14 = 5;
    std::vector<std::vector<int>> edges_14 = {{1, 0}, {3, 2}, {2, 4}};
    try
    {
        TenzingAndTree(num_nodes_14, edges_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
