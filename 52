/*

https://codeforces.com/problemset/problem/1983/F

Write a C++ Solution ArrayValue to find the k-th smallest value among all subarray values calculated for subarrays of length at least 2 in the given array nums.


You're given an array of non-negative integers nums[1], nums[2], ..., nums[len]. We define a new value for each subarray of length at least 2:

Subarray Value: nums[l, r] (where l and r represent starting and ending indices) is the minimum XOR (exclusive-or) of any two elements nums[i] and nums[j] within the subarray, considering l <= i < j <= r.

XOR Operation:

The XOR operation (^ or âŠ•) is a bitwise operation that returns 1 if the corresponding bits of the operands are different and 0 if they are the same.

The Challenge:

Your task is to find the k-th smallest value among all subarray values calculated for subarrays of length at least 2 in the given array a.


Input:

A vector of integers nums.
A long long integer k_value.

Output:

A integer result that consist the k-th smallest value among all subarray values calculated for subarrays of length at least 2 in the given array nums.

Constraints:

nums.size() : ranges from 2 to 100000.
nums : ranges from 0 to 10^9.
k_value : ranges from 1 to (len*(len-1))/2.


Use appropriate Error Handling using the stdexcept library for the invalid test cases.


*/


#include <iostream>
#include <vector>
#include <functional>
#include <cassert>
#include <stdexcept>

void Insert(int root, int value, int index, std::vector<std::vector<int>> &chr,
            std::vector<int> &mxi, int &node_count)
{
    int current = root;
    for (int i = 29; i >= 0; i--)
    {
        int bit = ((value & (1 << i)) != 0);

        if (!chr[current][bit])
        {
            node_count++;
            mxi[node_count] = index;
            chr[current][bit] = node_count;
        }

        mxi[current] = std::max(mxi[current], index);
        current = chr[current][bit];
    }

    mxi[current] = std::max(mxi[current], index);
}

int Query(int root, int mid, int value, std::vector<std::vector<int>> &chr, std::vector<int> &mxi)
{
    int current = root;
    int index = -1;

    for (int i = 29; i >= 0; i--)
    {
        if (!current){
            return index;
        }
        if ((value & (1 << i)) && (mid & (1 << i)))
        {
            if (chr[current][1]){
                index = std::max(index, mxi[chr[current][1]]);
            }
            current = chr[current][0];
        }
        else if (value & (1 << i))
        {
            current = chr[current][1];
        }
        else if (mid & (1 << i))
        {
            if (chr[current][0]){
                index = std::max(index, mxi[chr[current][0]]);
            }
            current = chr[current][1];
        }
        else
        {
            current = chr[current][0];
        }
    }

    if (current){
        index = std::max(index, mxi[current]);
    }

    return index;
}

int ArrayValue(std::vector<int> &nums, long long int k_value)
{
    int len=nums.size();
    if (len <= 1 or len > 100000)
    {
        throw std::invalid_argument("Invalid nums length");
    }
    int res=(len*(len-1))/2;
    if (k_value<1 or k_value>res){
        throw std::invalid_argument("Invalid k_value");
    }
    for (int i = 0; i < len; i++)
    {
        if (nums[i] < 0 or nums[i] > 1000000000)
        {
            throw std::invalid_argument("Invalid nums");
        }
    }
    std::vector<std::vector<int>> chr(1000, std::vector<int>(2, 0));
    std::vector<int> mxi(1000, 0);

    int left = 0, right = (1 << 30) - 1, result;

    while (left <= right)
    {
        int mid = left + (right - left) / 2;

        int left_idx = -1;
        long long ans = 0;
        int node_count = 1;
        int root = node_count;

        for (int i = 0; i < len; i++)
        {
            left_idx = std::max(left_idx, Query(root, mid, nums[i], chr, mxi));
            ans += (long long)(left_idx + 1);
            Insert(root, nums[i], i, chr, mxi, node_count);
        }

        std::fill(chr.begin(), chr.end(), std::vector<int>(2, 0));
        std::fill(mxi.begin(), mxi.end(), 0);

        if (ans < k_value)
        {
            left = mid + 1;
        }
        else
        {
            result = mid;
            right = mid - 1;
        }
    }

    return result;
}


#include <iostream>
#include <vector>
#include <functional>
#include <cassert>
#include <stdexcept>

int main() {
    // TEST
    long long int k_value_1 = 3;
    std::vector<int> nums_1 = {3,3,3,3};
    int expected_1 = 0;
    int result_1 = ArrayValue(nums_1, k_value_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    long long int k_value_2 = 1;
    std::vector<int> nums_2 = {5,7};
    int expected_2 = 2;
    int result_2 = ArrayValue(nums_2, k_value_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    long long int k_value_3 = 2;
    std::vector<int> nums_3 = {3, 4, 8, 16};
    int expected_3 = 7;
    int result_3 = ArrayValue(nums_3, k_value_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    long long int k_value_4 = 4;
    std::vector<int> nums_4 = {4, 5, 10, 20};
    int expected_4 = 15;
    int result_4 = ArrayValue(nums_4, k_value_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    long long int k_value_5 = 2;
    std::vector<int> nums_5 = {5,4,5};
    int expected_5 = 1;
    int result_5 = ArrayValue(nums_5, k_value_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    long long int k_value_6 = 2;
    std::vector<int> nums_6 = {3, 3, 5, 7, 11, 13, 17, 19};
    int expected_6 = 0;
    int result_6 = ArrayValue(nums_6, k_value_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    long long int k_value_7 = 2;
    std::vector<int> nums_7 = {5, 10, 20, 25, 30};
    int expected_7 = 7;
    int result_7 = ArrayValue(nums_7, k_value_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    long long int k_value_8 = 5;
    std::vector<int> nums_8 = {5, 4,5,3,4};
    int expected_8 = 1;
    int result_8 = ArrayValue(nums_8, k_value_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    long long int k_value_9 = 505;
    std::vector<int> nums_9 = {1, 2, 4, 9, 16, 32};
    try
    {
        ArrayValue(nums_9, k_value_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long int k_value_10 = 0;
    std::vector<int> nums_10 = {1, 2, 4, 10, 16, 32};
    try
    {
        ArrayValue(nums_10, k_value_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long int k_value_11 = -1;
    std::vector<int> nums_11 = {1, 2, 4, 11, 16, 32};
    try
    {
        ArrayValue(nums_11, k_value_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long int k_value_12 = 200;
    std::vector<int> nums_12 = {};
    try
    {
        ArrayValue(nums_12, k_value_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long int k_value_13 = 200;
    std::vector<int> nums_13 = {5,2020000000};
    try
    {
        ArrayValue(nums_13, k_value_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long int k_value_14 = 200;
    std::vector<int> nums_14 = {1,-2};
    try
    {
        ArrayValue(nums_14, k_value_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long int k_value_15 = 200;
    std::vector<int> nums_15(200002,5);
    try
    {
        ArrayValue(nums_15, k_value_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long int k_value_16 = 0;
    std::vector<int> nums_16(200002,5);
    try
    {
        ArrayValue(nums_16, k_value_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long int k_value_17 = 1000000008;
    std::vector<int> nums_17(202,5);
    try
    {
        ArrayValue(nums_17, k_value_17);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout<<"All tests passed."<<std::endl;
    return 0;
}
