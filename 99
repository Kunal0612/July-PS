/*

https://codeforces.com/problemset/problem/1422/F


Write a C++ Solution BoringQueries to find the answer to all the queries.


Yura owns a quite ordinary and boring array nums of length len. You think there is 
nothing more boring than that, but Vladik doesn't agree!

In order to make Yura's array even more boring, Vladik makes q_len boring queries. 
Each query consists of two integers left and right. 

Before answering a query, the bounds l and r for this query are calculated: 
l=(last+left)%(len+1), r=(last+right)%(len+1), where last

is the answer on the previous query (zero initially), and mod is the 
remainder operation. Whenever l>r, they are swapped.

After Vladik computes l and r for a query, he is to compute the least 
common multiple (LCM) on the segment [l;r] of the initial array a
modulo 10^9+7. 

LCM of a multiset of integers is the smallest positive integer that is 
divisible by all the elements of the multiset. The obtained LCM is the answer for this query.

Help Vladik and compute the answer for each query!


Input :

A vector of integers nums.
A vector of vector of integers query.

    
Constraints :
    
nums.size() : ranges from 1 to 100000.
nums : ranges from 1 to 200000.
query.size() : ranges from 1 to 100000.
query : query[i][0] ranges from 1 to nums.size() , query[i][1] ranges from 1 to nums.size().


Output:

An vector of integers ans to find the answer to all the queries.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.


*/

#include <iostream>
#include <algorithm>
#include <map>
#include <vector>
#include <cmath>
#include <vector>
#include <functional>
#include <cassert>
#include <stdexcept>


struct TreeNode {
    std::vector<std::pair<int, int>> low;
    std::vector<std::pair<int, int>> high;
    std::vector<int> product;
};

void NodeMerge(const TreeNode& left_node, const TreeNode& right_node, TreeNode& result_node) {
    std::vector<std::pair<int, int>>::const_iterator left_it = left_node.low.begin();
    std::vector<std::pair<int, int>>::const_iterator right_it = right_node.low.begin();
    while (left_it != left_node.low.end() || right_it != right_node.low.end()) {
        if (right_it == right_node.low.end() || (left_it != left_node.low.end() && left_it->first < right_it->first)) {
            result_node.low.emplace_back(left_it->first, left_it->second);
            ++left_it;
        } else if (left_it == left_node.low.end() || (right_it != right_node.low.end() && right_it->first < left_it->first)) {
            result_node.low.emplace_back(right_it->first, right_it->second);
            ++right_it;
        } else {
            result_node.low.emplace_back(left_it->first, std::max(left_it->second, right_it->second));
            ++left_it;
            ++right_it;
        }
    }
    std::merge(left_node.high.begin(), left_node.high.end(), right_node.high.begin(), right_node.high.end(), std::back_inserter(result_node.high));
    int mod = (int)1e+9 + 7;
    int product = 1;
    for (std::pair<int,int>& it : result_node.high) {
        int xec=it.second;
        product = product * static_cast<long long>(xec) % mod;
        result_node.product.push_back(product);
    }
}

void BuildTree(int index, int left, int right, const std::vector<int>& nums, std::vector<TreeNode>& tree, std::map<int, int>& last, const std::vector<int>& primes) {
    int mx_range = (int)sqrt(2e+5 + 42);
    if (left + 1 == right) {
        int xec = nums[left];
        for (const int& prime : primes) {
            if (prime * prime > xec) {
                break;
            }
            int count = 0;
            while (xec % prime == 0) {
                xec /= prime;
                ++count;
            }
            if (count) {
                tree[index].low.emplace_back(prime, count);
            }
        }
        if (xec > 1) {
            if (xec >= mx_range) {
                std::_Rb_tree_iterator<std::pair<const int, int>> it = last.find(xec);
                int prev = it == last.end() ? -1 : it->second;
                tree[index].high.emplace_back(prev, xec);
                tree[index].product.emplace_back(xec);
                last[xec] = left;
            } else {
                tree[index].low.emplace_back(xec, 1);
            }
        }
        return;
    }

    int mid = (left + right) / 2;
    int left_index = 2 * index;
    int right_index = 2 * index + 1;
    BuildTree(left_index, left, mid, nums, tree, last, primes);
    BuildTree(right_index, mid, right, nums, tree, last, primes);
    NodeMerge(tree[left_index], tree[right_index], tree[index]);
}

void GetResult(int index, int left, int right, int query_left, int query_right, std::vector<TreeNode>& tree, int& count, std::vector<int>& update, std::vector<int>& sequence, std::vector<int>& value, int& answer) {
    int mod = (int)1e+9 + 7;
    if (query_left <= left && right <= query_right) {
        for (const std::pair<int,int>& it : tree[index].low) {
            int prime=it.first;
            int power=it.second;
            if (update[prime] != count) {
                update[prime] = count;
                sequence.push_back(prime);
                value[prime] = 0;
            }
            value[prime] = std::max(value[prime], power);
        }

        int pos = std::lower_bound(tree[index].high.begin(), tree[index].high.end(), std::make_pair(query_left, 0)) - tree[index].high.begin();
        if (pos) {
            answer = answer * static_cast<long long>(tree[index].product[pos - 1]) % mod;
        }
        return;
    }

    int mid = (left + right) / 2;
    int left_index = 2 * index;
    int right_index = 2 * index + 1;

    if (query_left < mid) {
        GetResult(left_index, left, mid, query_left, query_right, tree, count, update, sequence, value, answer);
    }

    if (mid < query_right) {
        GetResult(right_index, mid, right, query_left, query_right, tree, count, update, sequence, value, answer);
    }
}

int Powmod(int base, int exp) {
    int mod = (int)1e+9 + 7;
    long long result = 1;
    long long power = base;
    while (exp) {
        if (exp & 1) {
            result = result * power % mod;
        }
        power = power * power % mod;
        exp >>= 1;
    }
    return result;
}

std::vector<int> BoringQueries(std::vector<int> nums,std::vector<std::vector<int>> query){
    int mx_range = (int)sqrt(2e+5 + 42);
    int max_n = 1e+5 + 42;
    int max_t = 4 * max_n;
    int mod = (int)1e+9 + 7;
    std::vector<int> is_prime(mx_range, 1);
    std::vector<int> primes;
    for (int i = 2; i < mx_range; ++i) {
        if (!is_prime[i]) {
            continue;
        }
        primes.push_back(i);
        if (i <= mx_range / i) {
            for (int j = i * i; j < mx_range; j += i) {
                is_prime[j] = false;
            }
        }
    }

    int len=nums.size();
    int q_len=query.size();
    if (len < 1 || len > 100000) {
        throw std::invalid_argument("n must be between 1 and 100000 inclusive.");
    }
    for (int i = 0; i < len; ++i) {
        if (nums[i] < 1 || nums[i] > 200000) {
            throw std::invalid_argument("Array elements must be between 1 and 200000 inclusive.");
        }
    }

    if (q_len < 1 || q_len > 100000) {
        throw std::invalid_argument("q must be between 1 and 100000 inclusive.");
    }

    for (const std::vector<int>& quer : query) {
        int left = quer[0];
        int right = quer[1];
        if (left < 1 || left > len || right < 1 || right > len) {
            throw std::invalid_argument("Query indices must be between 1 and n inclusive.");
        }
    }
    std::vector<TreeNode> tree(max_t);
    std::map<int, int> last;
    int root = 1;
    BuildTree(root, 0, len, nums, tree, last, primes);

    std::vector<int> update(mx_range, 0);
    std::vector<int> value(mx_range, 0);
    std::vector<int> sequence(mx_range, 0);
    int count = 0;
    int answer = 0;
    std::vector<int> ans;
    for (int q = 0; q < q_len; ++q) {
        int left=query[q][0], right=query[q][1];
        left = (left + answer) % len;
        right = (right + answer) % len;
        if (left > right) {
            std::swap(left, right);
        }

        ++count;
        sequence.clear();

        answer = 1;
        GetResult(root, 0, len, left, right + 1, tree, count, update, sequence, value, answer);

        for (int &prime : sequence) {
            answer = answer * static_cast<long long>(Powmod(prime, value[prime])) % mod;
        }
        ans.push_back(answer);
    }
    return ans;
}

#include <iostream>
#include <algorithm>
#include <map>
#include <vector>
#include <cmath>
#include <vector>
#include <functional>
#include <cassert>
#include <stdexcept>

int main() {
    // TEST
    std::vector<int> nums_1 = {2,1,6,3,7,5,4};
    std::vector<std::vector<int>> query_1 = {{1, 2}, {3,7}, {4,5},{6,7},{3,5}};
    std::vector<int> expected_1 = {6,420,35,420,105};
    std::vector<int> result_1 = BoringQueries(nums_1, query_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {2, 1, 3};
    std::vector<std::vector<int>> query_2 = {{1, 3}};
    std::vector<int> expected_2 = {2};
    std::vector<int> result_2 = BoringQueries(nums_2, query_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {3, 2, 1};
    std::vector<std::vector<int>> query_3 = {{1, 2}, {2, 3}, {1, 3}};
    std::vector<int> expected_3 = {2,2,6};
    std::vector<int> result_3 = BoringQueries(nums_3, query_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {3, 4, 1, 2};
    std::vector<std::vector<int>> query_4 = {{1, 2}, {3, 4}, {1, 4}};
    std::vector<int> expected_4 = {4,12,12};
    std::vector<int> result_4 = BoringQueries(nums_4, query_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {5, 2, 1, 3, 4};
    std::vector<std::vector<int>> query_5 = {{1, 3}, {2, 4}, {1, 5}};
    std::vector<int> expected_5 ={6,30,10};
    std::vector<int> result_5 = BoringQueries(nums_5, query_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {1, 3, 5, 4, 2};
    std::vector<std::vector<int>> query_6 = {{1, 5}, {2, 4}, {2, 3}};
    std::vector<int> expected_6 = {3,15,20};
    std::vector<int> result_6 = BoringQueries(nums_6, query_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {5, 4, 3, 2, 1};
    std::vector<std::vector<int>> query_7 = {{1, 2}, {3, 4}, {2, 5}};
    std::vector<int> expected_7 = {12,20,60};
    std::vector<int> result_7 = BoringQueries(nums_7, query_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {1, 5, 4, 3, 2};
    std::vector<std::vector<int>> query_8 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    std::vector<int> expected_8 = {20,12,5,60};
    std::vector<int> result_8 = BoringQueries(nums_8, query_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    std::vector<int> nums_9 = {1, 0, 4, 3, 2};
    std::vector<std::vector<int>> query_9 = {{1, 2}, {2, 2}, {3, 4}, {4, 5}};
    try
    {
        BoringQueries(nums_9, query_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_10 = {1, 1000000004, 4, 3, 2};
    std::vector<std::vector<int>> query_10 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    try
    {
        BoringQueries(nums_10, query_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_11 = {1, 5, -4, 3, 2};
    std::vector<std::vector<int>> query_11 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    try
    {
        BoringQueries(nums_11, query_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_12 = {};
    std::vector<std::vector<int>> query_12 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};

    try
    {
        BoringQueries(nums_12, query_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_13(400000,5);
    std::vector<std::vector<int>> query_13 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};

    try
    {
        BoringQueries(nums_13, query_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_14(4,1);
    std::vector<std::vector<int>> query_14 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    try
    {
        BoringQueries(nums_14, query_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_15(1,1);
    std::vector<std::vector<int>> query_15 = {{1, 1}, {2, 3}, {3, 4}, {4, 5}};
    try
    {
        BoringQueries(nums_15, query_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_16(1,1);
    std::vector<std::vector<int>> query_16 = {{1, 1}, {2, 3}, {3, 4}, {4, 5}};
    try
    {
        BoringQueries(nums_16, query_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_17(1,1);
    std::vector<std::vector<int>> query_17 = {{1,0}};
    try
    {
        BoringQueries(nums_17, query_17);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_18(1,1);
    std::vector<std::vector<int>> query_18(500000,{1,2});
    try
    {
        BoringQueries(nums_18, query_18);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_19(1,1);
    std::vector<std::vector<int>> query_19(5,{2,1});
    try
    {
        BoringQueries(nums_19, query_19);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_20(1,1);
    std::vector<std::vector<int>> query_20(5,{1,-1});
    try
    {
        BoringQueries(nums_20, query_20);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
