/*

https://codeforces.com/problemset/problem/1363/F

Write a C++ Solution RotatingSubstrings to find the minimum number of 
operations to convert str to ptr. If it is not possible to convert str to 
ptr, return −1 instead.


Given two strings, str and ptr, of equal length len consisting of lowercase 
Latin alphabets, find the minimum number of operations required to make str equal to ptr.

Operation:

You can perform a single operation on str any number of times:

Rotate a substring clockwise: Choose a substring s[l, l+1, ..., r] of s. 
The substring becomes s[r, l, l+1, ..., r-1], with all remaining characters 
staying in their positions.

All the remaining characters of s stay in their position.

For example, on rotating the substring [2,4] , string "abcde" becomes "adbce".

Find the minimum number of operations required to convert str to ptr , or 
determine that it's impossible.


Input:

A string str.
A string ptr.

Output:

An integer ans to the the minimum number of operations to convert str to ptr. If it is not possible to convert str to ptr, return −1 instead.

Constraints:

ptr.size()==str.size() : ranges from 1 to 2000. 
str , ptr : consists of lowercase English alphabets.


Use appropriate Error Handling using the stdexcept library for the invalid test cases.



*/
#include <cassert>
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <climits>
#include <stdexcept>

int Helper(int idx, int jdx, const std::string& str, const std::string& ptr, std::vector<std::vector<int>>& cache, std::vector<std::vector<int>>& suf, std::vector<std::vector<int>>& suf_2) {
    if (jdx == 0){
		return 0;
	}
    int &ans = cache[idx][jdx];
    if (ans != -1){
		return ans;
	}
    ans = 2e9;
    if (idx > 0) {
        ans = 1 + Helper(idx - 1, jdx, str, ptr, cache, suf, suf_2);
        if (str[idx - 1] == ptr[jdx - 1]){
			ans = std::min(ans, Helper(idx - 1, jdx - 1, str, ptr, cache, suf, suf_2));
		}
    }
    int chr = ptr[jdx - 1] - 'a';
    if (suf[chr][idx + 1] - suf_2[chr][jdx + 1] > 0){
		ans = std::min(ans, Helper(idx, jdx - 1, str, ptr, cache, suf, suf_2));
	}
    return ans;
}

int RotatingSubstrings(std::string str, std::string ptr)
{
    int len=str.size();
    if(len<1 or len>2000 or str.size()!=ptr.size()) {
        throw std::invalid_argument("Invalid Constraints");
    }
    for(int i=0;i<len;i++){
        if(ptr[i]<'a' or str[i]<'a' or ptr[i]>'z' or str[i]>'z'){
            throw std::invalid_argument("Invalid String character should be in lowercase");
        }
    }
    std::vector<std::vector<int>> cache(len + 1, std::vector<int>(len + 1, -1));
    std::vector<std::vector<int>> suf(26, std::vector<int>(len + 2, 0));
    std::vector<std::vector<int>> suf_2(26, std::vector<int>(len + 2, 0));

    for (int i = len; i >= 1; i--)
    {
        for (int j = 0; j < 26; j++)
        {
            suf[j][i] = suf[j][i + 1];
            suf_2[j][i] = suf_2[j][i + 1];
        }
        suf[str[i - 1] - 'a'][i]++;
        suf_2[ptr[i - 1] - 'a'][i]++;
    }

    int ans = Helper(len, len, str, ptr, cache, suf, suf_2);
    if (ans > 1e9){
		ans = -1;
	}
    return ans;
}

#include <cassert>
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <climits>
#include <stdexcept>

int main() {
    // TEST
    std::string str_1 = "aaaa";
    std::string ptr_1 = "avja";
    int expected_1 = -1;
    int result_1 = RotatingSubstrings(str_1, ptr_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::string str_2 = "abc";
    std::string ptr_2 = "cab";
    int expected_2 = 1;
    int result_2 = RotatingSubstrings(str_2, ptr_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::string str_3 = "abab";
    std::string ptr_3 = "baba";
    int expected_3 = 1;
    int result_3 = RotatingSubstrings(str_3, ptr_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::string str_4 = "xyzxyz";
    std::string ptr_4 = "xyzzyx";
    int expected_4 = 2;
    int result_4 = RotatingSubstrings(str_4, ptr_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::string str_5 = "iiss";
    std::string ptr_5 = "issi";
    int expected_5 = 2;
    int result_5 = RotatingSubstrings(str_5, ptr_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::string str_6 = "raab";
    std::string ptr_6 = "abra";
    int expected_6 = 2;
    int result_6 = RotatingSubstrings(str_6, ptr_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::string str_7 = "fed";
    std::string ptr_7 = "def";
    int expected_7 = 2;
    int result_7 = RotatingSubstrings(str_7, ptr_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::string str_8 = "heoll";
    std::string ptr_8 = "hello";
    int expected_8 = 2;
    int result_8 = RotatingSubstrings(str_8, ptr_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    std::string str_9 = "";
    std::string ptr_9 = "hello";
    try
    {
        RotatingSubstrings(str_9, ptr_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_10 = "";
    std::string ptr_10 = "";
    try
    {
        RotatingSubstrings(str_10, ptr_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_11 = std::string(5005,'a');
    std::string ptr_11 = "a";
    try
    {
        RotatingSubstrings(str_11, ptr_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_12 = "abaa";
    std::string ptr_12 = "avf";
    try
    {
        RotatingSubstrings(str_12, ptr_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_13 = "Abaa";
    std::string ptr_13 = "avf";
    try
    {
        RotatingSubstrings(str_13, ptr_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_14 = "abaa";
    std::string ptr_14 = "aVf";
    try
    {
        RotatingSubstrings(str_14, ptr_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    std::cout<<"All tests passed."<<std::endl;
    return 0;
}
