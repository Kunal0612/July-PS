// https://codeforces.com/problemset/problem/1621/F

#include <iostream>
#include <vector>
#include <algorithm>
#include <limits>
#include <cassert>


void Solver(int turn, long long int &ans, long long int val_a, long long int val_b, long long int val_c, std::vector<int> blocks, long long int other_0, long long int single_0, long long int per, long long int turns_1) {
    long long int cur = 0;
    while (true) {
        if (turn == 1) {
            if (turns_1 > 0) {
                turns_1--;
                cur += val_b;
                ans = std::max(ans, cur);
            } else {
                return;
            }
        } else {
            if (turns_1 == 0) {
                if (other_0 > 0 || !blocks.empty()) {
                    ans = std::max(ans, cur + val_a); 
                }
                if (single_0 > 0) { 
                    single_0--;
                    cur -= val_c;
                    ans = std::max(ans, cur);
                    turns_1++;
                }
            } else {
                if (!blocks.empty()) {
                    blocks.back()--;
                    if (blocks.back() == 1) {
                        blocks.pop_back();
                        single_0++;
                    }
                    cur += val_a;
                    ans = std::max(ans, cur);
                } else if (other_0 > 0) {
                    other_0--;
                    cur += val_a;
                    ans = std::max(ans, cur);
                } else if (single_0 > 0) {
                    single_0--;
                    turns_1++;
                    cur -= val_c;
                    ans = std::max(ans, cur);
                } else if (per > 0) {
                    per--;
                    cur -= val_c;
                    ans = std::max(ans, cur);
                } else {
                    return;
                }
            }
        }
        turn ^= 1;
    }
}

long long int StrangeInstructions(const std::string& str, long long int val_a, long long int val_b, long long int val_c) {
    
    int len=str.length();
    if (str.size() <= 0 or str.size()>100000) {
        throw std::invalid_argument("vec length must be positive.");
    }
    if (val_a <= 0 or val_a>1000000000) {
        throw std::invalid_argument("Invalid Constraints");
    }
    if (val_b <= 0 or val_b>1000000000) {
        throw std::invalid_argument("Invalid Constraints");
    }
    if (val_c <= 0 or val_c>1000000000) {
        throw std::invalid_argument("Invalid Constraints");
    }
    for (int i = 0; i < str.size(); ++i)
    {
        if (str[i] != '0' and str[i] != '1')
        {
            throw std::invalid_argument("Invalid str value");
        }
    }
    if (len == 1) {
        return 0LL;
    }

    long long int ans = 0;
    long long int fir_1 = std::numeric_limits<int>::max(), lst1 = -1;
    
    for (int i = 0; i < len; ++i) {
        if (str[i] == '1') {
            lst1 = i;
        }
    }
    
    for (int i = 0; i < len; ++i) {
        if (str[i] == '1') {
            fir_1 = i;
            break;
        }
    }
    
    if (fir_1 == std::numeric_limits<int>::max()) {
        return val_a;
    }

    std::vector<int> blocks;
    long long int per = 0;
    if (str[0] == '0') per++;
    if (str.back() == '0') per++;
    long long int other_0 = std::max(fir_1 - 1, 0LL) + std::max(len - lst1 - 2, 0LL);
    long long int turns_1 = 0;

    for (int i = 0; i + 1 < len; ++i) {
        if (str[i] == str[i + 1] && str[i] == '1') {
            turns_1++;
        }
    }

    long long int single_0 = 0;
    for (int i = fir_1; i < lst1; ) {
        int j = i + 1;
        while (str[j] != '1') {
            j++;
        }
        int len = j - i - 1;
        if (len == 1) {
            single_0++;
        } else if (len > 1) {
            blocks.push_back(len);
        }
        i = j;
    }
    std::sort(blocks.rbegin(), blocks.rend());

    Solver(0, ans, val_a, val_b, val_c, blocks, other_0, single_0, per, turns_1);
    Solver(1, ans, val_a, val_b, val_c, blocks, other_0, single_0, per, turns_1);

    return ans;
}

int main() {

    // TEST
    std::string str_1="01101";
    int a=2, b=2, c=1;
    int expected_1 = 3;
    int result_1 = StrangeInstructions(str_1, a, b, c);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::string str_2="000";
    a=5, b=3, c=2;
    int expected_2 = 5;
    int result_2 = StrangeInstructions(str_2, a, b, c);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::string str_3="1111";
    a=10, b=10, c=10;
    int expected_3 = 10;
    int result_3 = StrangeInstructions(str_3, a, b, c);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::string str_4="010101";
    a=1, b=2, c=1;
    int expected_4 = 2;
    int result_4 = StrangeInstructions(str_4, a, b, c);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::string str_5="00111000";
    a=3, b=3, c=2;
    int expected_5 = 15;
    int result_5 = StrangeInstructions(str_5, a, b, c);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::string str_6="101010";
    a=2, b=1, c=2;
    int expected_6 = 0;
    int result_6 = StrangeInstructions(str_6, a, b, c);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::string str_7="10000001";
    a=5, b=4, c=3;
    int expected_7 = 5;
    int result_7 = StrangeInstructions(str_7, a, b, c);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::string str_8="1110101110";
    a=7, b=8, c=5;
    int expected_8 = 17;
    int result_8 = StrangeInstructions(str_8, a, b, c);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::string str_9 = "";
    a = 7, b = 9, c = 5;
    try
    {
        StrangeInstructions(str_9, a, b, c);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_10 = std::string(1000000,'0');
    a = 7, b = 10, c = 5;
    try
    {
        StrangeInstructions(str_10, a, b, c);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_11 ="abc";
    a = 7, b = 11, c = 5;
    try
    {
        StrangeInstructions(str_11, a, b, c);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_12 ="010";
    a = 0, b = 12, c = 5;
    try
    {
        StrangeInstructions(str_12, a, b, c);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_13 ="010";
    a = 1, b = 0, c = 5;
    try
    {
        StrangeInstructions(str_13, a, b, c);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_14 ="010";
    a = 1, b = 1, c = 0;
    try
    {
        StrangeInstructions(str_14, a, b, c);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_15 ="010";
    a = 1000000001, b = 1, c = 1;
    try
    {
        StrangeInstructions(str_15, a, b, c);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_16 ="010";
    b = 1000000001, a = 1, c = 1;
    try
    {
        StrangeInstructions(str_16, a, b, c);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_17 ="010";
    c = 1000000001, a = 1, b = 1;
    try
    {
        StrangeInstructions(str_17, a, b, c);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_18 ="010";
    c = -1, a = 1, b = 1;
    try
    {
        StrangeInstructions(str_18, a, b, c);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_19 ="010";
    a = -1, c = 1, b = 1;
    try
    {
        StrangeInstructions(str_19, a, b, c);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_20 ="010";
    b = -1, a = 1, c = 1;
    try
    {
        StrangeInstructions(str_20, a, b, c);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
