/*

https://codeforces.com/problemset/problem/1491/G

Write a C++ Solution SwitchAndFlip to Construct a sequence of at most 
len+1 operations such that after performing all these operations the coin 
i will be on position i
at the end, facing up.


There are len coins labeled from 1 to len. Initially, coin coins[i] 
is on position i and is facing upwards ((coins[1],coins[2],â€¦,coins[len]) 
is a permutation of numbers from 1 to len). You can do some operations on these coins.

In one operation, you can do the following:

Choose 2 distinct indices i and j.

Then, swap the coins on positions i and j.

Then, flip both coins on positions i and j. (If they are initially faced up, 
they will be faced down after the operation and vice versa)

Construct a sequence of at most len+1 operations such that after performing 
all these operations the coin i will be on position i
at the end, facing up.

Note that you do not need to minimize the number of operations.

Input :

A vector of integers coins.

Constraints :

coins.size() : ranges from 3 to 200000.
coins : ranges from 1 to coins.size() , all coins must be unique.

Output:

An pair of intgers and vector of pair of long long intger , long long integer ans to find the number of operations , and the positions you chose for the current operation.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.


*/


#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#include <random>
#include <chrono>
#include <set>
#include <cassert>
#include <stdexcept>

void Cswap(int idx, int jdx, std::vector<int>& arr, std::vector<std::pair<long long, long long>>& ans) {
    std::swap(arr[idx], arr[jdx]);
    arr[idx] = -arr[idx], arr[jdx] = -arr[jdx];
    ans.push_back(std::make_pair(idx, jdx));
}

void SwapCyc(int idx, int jdx, std::vector<int>& arr, std::vector<bool>& vis, 
std::vector<std::pair<long long, long long>>& ans) {
    Cswap(idx, jdx, arr, ans);
    
    int curr = idx;
    while (arr[-arr[curr]] > 0) {
        Cswap(curr, -arr[curr], arr, ans);
    }
    
    curr = -arr[curr];
    while (arr[-arr[curr]] > 0) {
        Cswap(curr, -arr[curr], arr, ans);
    }
    
    Cswap(curr, -arr[curr], arr, ans);
}


std::pair<int,std::vector<std::pair<long long ,long long >>> SwitchAndFlip(std::vector<int> &coins){
    int len=coins.size();
    if (coins.size() < 3 || coins.size() > 200000) {
        throw std::invalid_argument("Invalid number of coins. len must be between 3 and 200000.");
    }
    std::set<int> unique_coins;
    for (int coin : coins) {
        if (coin < 1 || coin > len) {
            throw std::invalid_argument("Coin value out of range. Each coin value must be between 1 and len.");
        }
        if (unique_coins.count(coin)) {
            throw std::invalid_argument("Duplicate coin value found. All coin values must be unique.");
        }
        unique_coins.insert(coin);
    }
    std::vector<int> arr(len + 1);
    std::vector<bool> vis(len + 1, false);
    std::vector<std::pair<long long, long long>> ans;

    for (int x = 1; x <= len; ++x) {
        arr[x]=coins[x-1];
    }
    int p_idx = -1;
    
    for (int x = 1; x <= len; ++x) {
        if (!vis[x]) {
            if (arr[x] == x){
                continue;
            }
            int curr = x;
            do {
                vis[curr] = true;
                curr = arr[curr];
            } while (curr != x);
        
            if (p_idx == -1){
                p_idx = x;
            }
            else {
                SwapCyc(p_idx, x, arr, vis, ans);
                p_idx = -1;
            }
        }
    }
    
    if (p_idx != -1) {
        bool can = false;
        for (int x = 1; x <= len; ++x) {
            if (arr[x] == x) {
                SwapCyc(p_idx, x, arr, vis, ans);
                can = true;
                break;
            }
        }
        
        if (!can) {
            int tr_1 = arr[p_idx], tr_2 = arr[arr[p_idx]];
            Cswap(p_idx, tr_1, arr, ans);
            SwapCyc(tr_1, tr_2, arr, vis, ans);
        }
    }
    return {int(ans.size()),ans};
}

#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#include <random>
#include <chrono>
#include <set>
#include <cassert>
#include <stdexcept>


int main() {
     // TEST
    std::vector<int> coins_1 = {2,1,3};
    std::pair<int,std::vector<std::pair<long long ,long long >>> expected_1 = {3,{{1,3},{3,2},{3,1}}};
    std::pair<int,std::vector<std::pair<long long ,long long >>> result_1 = SwitchAndFlip(coins_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> coins_2 = {1,2,3,4};
    std::pair<int,std::vector<std::pair<long long ,long long >>> expected_2 = {0,{}};
    std::pair<int,std::vector<std::pair<long long ,long long >>> result_2 = SwitchAndFlip(coins_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> coins_3 = {5,2,3,4,1};
    std::pair<int,std::vector<std::pair<long long ,long long >>> expected_3 = {3,{{1,2},{2,5},{2,1}}};
    std::pair<int,std::vector<std::pair<long long ,long long >>> result_3 = SwitchAndFlip(coins_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> coins_4 = {1, 2, 4, 3, 5};
    std::pair<int,std::vector<std::pair<long long ,long long >>> expected_4 = {3,{{3,1},{1,4},{1,3}}};
    std::pair<int,std::vector<std::pair<long long ,long long >>> result_4 = SwitchAndFlip(coins_4);
    
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> coins_5 = {1, 2, 5, 4, 3, 6};
    std::pair<int,std::vector<std::pair<long long ,long long >>> expected_5 = {3,{{3,1},{1,5},{1,3}}};
    std::pair<int,std::vector<std::pair<long long ,long long >>> result_5 = SwitchAndFlip(coins_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> coins_6 = {2, 1, 5,4,3};
    std::pair<int,std::vector<std::pair<long long ,long long >>> expected_6 ={4,{{1,3},{1,5},{3,2},{3,1}}};
    std::pair<int,std::vector<std::pair<long long ,long long >>> result_6 = SwitchAndFlip(coins_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> coins_7 = {5,2,1,6,4,3};
    std::pair<int,std::vector<std::pair<long long ,long long >>> expected_7 = {6,{{1,2},{2,5},{2,4},{2,6},{2,3},{2,1}}};
    std::pair<int,std::vector<std::pair<long long ,long long >>> result_7 = SwitchAndFlip(coins_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> coins_8 = {3,2,1,5,4};
    std::pair<int,std::vector<std::pair<long long ,long long >>> expected_8 = {4,{{1,4},{1,5},{4,3},{4,1}}};
    std::pair<int,std::vector<std::pair<long long ,long long >>> result_8 = SwitchAndFlip(coins_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<int> coins_9 = {0};
    try
    {
        SwitchAndFlip(coins_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    std::vector<int> coins_10(6000000,0);
    try
    {
        SwitchAndFlip(coins_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    std::vector<int> coins_11(6,-1);
    try
    {
        SwitchAndFlip(coins_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> coins_12(6,100000000);
    try
    {
        SwitchAndFlip(coins_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> coins_13={};
    try
    {
        SwitchAndFlip(coins_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> coins_14={1,1,2,2,3};
    try
    {
        SwitchAndFlip(coins_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
