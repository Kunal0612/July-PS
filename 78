/*

https://codeforces.com/problemset/problem/1821/F

Write a C++ Solution Timber to find the number of different unfortunate alleys with num_trees trees of height hec, modulo 998244353.

There is a beautiful alley with trees in front of a shopping mall. Unfortunately, it has to go to make space for the parking lot.

The trees on the alley all grow in a single line. There are num_spots spots for trees, index 0 is the shopping mall, 
index num_spots+1 is the road and indices from 1 to num_spots are the spots for trees. Some of them are taken — there grow trees of the same height hec. No more than one tree grows in each spot.

When you chop down a tree in the spot x , you can make it fall either left or right. If it falls to the left, it takes up spots from x−k to x
, inclusive. If it falls to the right, it takes up spots from x to x+k, inclusive.

Let num_trees trees on the alley grow in some spots x1,x2,…,x_num_trees . Let an alley be called unfortunate if all num_trees trees can be chopped down in such a way that:

no tree falls on the shopping mall or the road

each spot is taken up by no more than one fallen tree.

Calculate the number of different unfortunate alleys with num_trees trees of height hec . Two alleys are considered different if there is a spot y
such that a tree grows in y on the first alley and doesn't grow in y on the second alley.

Output the number modulo 998244353.

Input :

An integer num_spots.
An integer num_trees.
An integer hec

Constraints :


num_trees,hec : ranges from 1 to num_spots.
num_spots : ranges from height to 300000.

Output:

An integer answer to find the number of different unfortunate alleys with num_trees trees of height hec, modulo 998244353.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

*/

#include <algorithm>
#include <cstdio>
#include <vector>
#include <iostream>
#include <cassert>
#include <stdexcept>



int Add(int first, int sec) {
    int mod = 998244353;
    first += sec;
    if (first >= mod){
        first -= mod;
    }
    if (first < 0){
        first += mod;
    }
    return first;
}

int Mul(int first, int sec) {
    int mod = 998244353;
    return first * 1ll * sec % mod;
}

int BinPow(int base, int exponent) {
    int result = 1;
    while (exponent) {
        if (exponent & 1){
            result = Mul(result, base);
        }
        base = Mul(base, base);
        exponent >>= 1;
    }
    return result;
}

int Comb(int num_spots, int k_value, const std::vector<int>& fact, const std::vector<int>& fact_1) {
    if (k_value < 0 || num_spots < 0 || k_value > num_spots){
        return 0;
    }
    return Mul(fact[num_spots], Mul(fact_1[k_value], fact_1[num_spots - k_value]));
}

int SuperBinPow(int num_spots, int k_value, const std::vector<int>& fact, const std::vector<int>& fact_1) {
    return Comb(num_spots + k_value, k_value, fact, fact_1);
}




int Timber(int num_spots, int num_trees,int hec){
    if (num_trees < 1 || hec < 1 || num_spots < num_trees || num_spots< hec || num_spots > 300000) {
        throw std::invalid_argument("Invalid input: Ensure 1 <= num_trees, hec <= num_spots <= 300000");
    }
    int mod = 998244353;
    std::vector<int> fact(2 * num_spots + 1), fact_1(2 * num_spots + 1);
    fact[0] = 1;
    for (int i = 1; i <= 2 * num_spots; ++i){
        fact[i] = Mul(fact[i - 1], i);
    }
    fact_1[2 * num_spots] = BinPow(fact[2 * num_spots], mod - 2);
    for (int i = 2 * num_spots - 1; i >= 0; --i){
        fact_1[i] = Mul(fact_1[i + 1], i + 1);
    }

    int pow_2 = 1;
    int answer = 0;
    for (int i = num_trees; i >= 0; --i) {
        int current = 0;
        if (num_spots - (num_trees - i) * 1ll * (hec + 1) - i * 1ll * (2 * hec + 1) >= 0){
            current = Mul(SuperBinPow(num_spots - (num_trees - i) * (hec + 1) - i * (2 * hec + 1), num_trees, fact, fact_1), 
                          Mul(pow_2, Comb(num_trees, i, fact, fact_1)));
        }
        answer = Add(answer, i & 1 ? -current : current);
        pow_2 = Mul(pow_2, 2);
    }
    return answer;
}

#include <algorithm>
#include <cstdio>
#include <vector>
#include <iostream>
#include <cassert>
#include <stdexcept>


int main() {
    // TEST
    int num_spots_1 = 6, num_trees_1 = 1, hec_1 = 4;
    int expected_1 = 4;
    int result_1 = Timber(num_spots_1, num_trees_1, hec_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int num_spots_2 = 4, num_trees_2 = 1, hec_2 = 1;
    int expected_2 = 4;
    int result_2 = Timber(num_spots_2, num_trees_2, hec_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int num_spots_3 = 22, num_trees_3 = 5, hec_3 = 10;
    int expected_3 = 0;
    int result_3 = Timber(num_spots_3, num_trees_3, hec_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int num_spots_4 = 8, num_trees_4 = 6, hec_4 = 5;
    int expected_4 = 0;
    int result_4 = Timber(num_spots_4, num_trees_4, hec_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int num_spots_5 = 6, num_trees_5 = 2, hec_5 = 2;
    int expected_5 = 4;
    int result_5 = Timber(num_spots_5, num_trees_5, hec_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int num_spots_6 = 15, num_trees_6 = 3, hec_6 = 2;
    int expected_6 = 311;
    int result_6 = Timber(num_spots_6, num_trees_6, hec_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int num_spots_7 = 222, num_trees_7 = 3, hec_7 = 4;
    int expected_7 = 1788524;
    int result_7 = Timber(num_spots_7, num_trees_7, hec_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int num_spots_8 = 543, num_trees_8 = 15, hec_8 = 9;
    int expected_8 = 871056606;
    int result_8 = Timber(num_spots_8, num_trees_8, hec_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int num_spots_9 = 1000000009, num_trees_9 = 125, hec_9 = 987654321;
    try
    {
        Timber(num_spots_9, num_trees_9, hec_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_spots_10 = 0, num_trees_10 = 125, hec_10 = 1087654321;
    try
    {
        Timber(num_spots_10, num_trees_10, hec_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // // TEST
    int num_spots_11 = -10, num_trees_11 = 125, hec_11 = 1187654321;
    try
    {
        Timber(num_spots_11, num_trees_11, hec_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_spots_12 = 10, num_trees_12 = 125000000, hec_12 = 1287654321;
    try
    {
        Timber(num_spots_12, num_trees_12, hec_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_spots_13 = 10, num_trees_13 = -1, hec_13 = 1387654321;
    try
    {
        Timber(num_spots_13, num_trees_13, hec_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_spots_14 = 10, num_trees_14 = -5, hec_14 = 1000000009;
    try
    {
        Timber(num_spots_14, num_trees_14, hec_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_spots_15 = 10, num_trees_15 = 5, hec_15 = -1587654321;
    try
    {
        Timber(num_spots_15, num_trees_15, hec_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_spots_16 = -10, num_trees_16 = 5, hec_16 = 0;
    try
    {
        Timber(num_spots_16, num_trees_16, hec_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_spots_17 = 10, num_trees_17 = 5, hec_17 = -1000000011;
    try
    {
        Timber(num_spots_17, num_trees_17, hec_17);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout<<"All tests passed."<<std::endl;
}
