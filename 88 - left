// https://codeforces.com/problemset/problem/1223/F


#include <iostream>
#include <vector>
#include <map>
#include <cassert>
#include <stdexcept>

/*

Input :

A vector of integers nums.

Constraints :

nums : ranges from 1 to nums.size().
nums.size() : ranges from 1 to 300000.

*/


long long StackExterminableArrays(std::vector<int> nums)
{
    int len=nums.size();
    if (len < 1 || len > 300000) {
        throw std::invalid_argument("Invalid limit");
    }
    for (int i = 0; i < len; ++i) {
        if (nums[i] < 1 || nums[i] > len) {
            throw std::invalid_argument("Invalid limit");
        }
    }
    std::vector<int> nxt(len + 2, -1);
    std::vector<int> dp_table(len + 2, 0);
    std::vector<std::map<int, int>> nxt_x(len + 2);

    for (int i = len - 1; i >= 0; --i)
    {
        if (nxt_x[i + 1].count(nums[i]))
        {
            int pos = nxt_x[i + 1][nums[i]];
            assert(pos < len && nums[pos] == nums[i]);
            nxt[i] = pos;
            std::swap(nxt_x[i], nxt_x[pos + 1]);
            if (pos < len - 1){
                nxt_x[i][nums[pos + 1]] = pos + 1;
            }
        }
        nxt_x[i][nums[i]] = i;
    }

    long long res = 0;
    for (int i = len - 1; i >= 0; --i)
    {
        if (nxt[i] == -1){
            continue;
        }
        dp_table[i] = 1 + dp_table[nxt[i] + 1];
        res += dp_table[i];
    }

    return res;
}


#include <iostream>
#include <vector>
#include <map>
#include <cassert>
#include <stdexcept>


int main()
{
    int t;
    std::cin >> t;
    while (t--)
    {
        int len;
        std::cin >> len;
        std::vector<int> nums(len);
        for (int i = 0; i < len; ++i)
            std::cin >> nums[i];
        int ans=StackExterminableArrays(nums);
        std::cout << ans << std::endl;
    }
    return 0;
}
