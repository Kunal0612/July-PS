/*

https://codeforces.com/problemset/problem/191/D

Write a C++ function MetroScheme to find the the minimum and maximum number of lines correspondingly.

Berland is very concerned with privacy, so almost all plans and blueprints are kept secret. However, a spy from a neighboring state managed to steal the Bertown subway scheme.

The Bertown Subway consists of:

n stations, numbered from 1 to n
m bidirectional tunnels connecting these stations
The subway is composed of two types of lines:

Radial Lines: A sequence of stations v1,v2,...,vk(where k>1) such that each pair of consecutive stations (v[i],v[i+1]) is connected by a tunnel, and no station appears more than once in the line (i.e., 𝑣𝑖≠𝑣𝑗 for 𝑖≠𝑗).
Circular Lines: A series of stations v1,v2,...,vk (where k>2) such that each pair of consecutive stations (v[i],v[i+1]) is connected by a tunnel, and additionally, the first and the last stations (v[1],v[k]) are also connected by a tunnel. No station appears more than once in the line.
The following constraints are given:

There can't be more than one tunnel between any two stations.
Each tunnel belongs to exactly one line.
There is a path between any two stations along the subway tunnels.
The subway can be represented as a vertex cactus graph, meaning each vertex lies on no more than one simple cycle.
However, the scheme stolen by the spy only includes the stations and the tunnels. The spy cannot determine which tunnels belong to which lines. To successfully sabotage, the spy needs to know the minimum and maximum number of lines that may be present in the Bertown subway.

Input :

An integer len.
A vector of vector of integers connections.

Output :

A vector of integers that will contain the minimum and maximum number of lines correspondingly.

Constraints :

len : ranges from 1 to 100000.
connections.size() : ranges from 0 to 300000.
connections[i][0] , connections[i][1] : ranges from 1 to len

Use appropriate Error Handling using the stdexcept library for the invalid test cases


*/

#include <iostream>
#include <vector>
#include <cassert>
#include <stdexcept>


std::vector<int>  MetroScheme(int len,std::vector<std::vector<int>> &connections){
    if (len <= 0 or len>100000) {
        throw std::invalid_argument("Invalid length");
    }
    if (connections.size() <= 0 or connections.size()>300000) {
        throw std::invalid_argument("Invalid length");
    }
    int lem=connections.size();
    std::vector<std::vector<int>> adj(len + 1);
    int ans = 0;
    for (int i = 1; i <= lem; ++i) {
        int node_x=connections[i-1][0], node_y=connections[i-1][1];
        if(node_x<1 or node_y<1 or node_x>len or node_y>len){
            throw std::invalid_argument("Invalid Connections value");
        }
        adj[node_x].push_back(node_y);
        adj[node_y].push_back(node_x);
    }
    for (int i = 1; i <= len; ++i)
        ans += adj[i].size() % 2;
    
    ans /= 2;
    
    for (int i = 1; i <= len; ++i) {
        if (adj[i].size() == 2) {
            int node_x = adj[i][0], node_y = adj[i][1];
            if (node_x == node_y) {
                adj[node_x].clear();
                ans++;
            } else {
                adj[node_x][adj[node_x][1] == i] = node_y;
                adj[node_y][adj[node_y][1] == i] = node_x;
            }
        }
    }
    return {ans,lem};
}

int main() {
    // TEST
    int len_1 = 3;
    std::vector<std::vector<int>> connections_1 = {{1, 2}, {2, 3}, {3, 1}};
    std::vector<int> expected_1 = {1, 3};
    std::vector<int> result_1 = MetroScheme(len_1, connections_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int len_2 = 4;
    std::vector<std::vector<int>> connections_2 = {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 3}};
    std::vector<int> expected_2 = {1, 5};
    std::vector<int> result_2 = MetroScheme(len_2, connections_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int len_3 = 5;
    std::vector<std::vector<int>> connections_3 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 1}};
    std::vector<int> expected_3 = {1, 5};
    std::vector<int> result_3 = MetroScheme(len_3, connections_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int len_4 = 2;
    std::vector<std::vector<int>> connections_4 = {{1, 2}};
    std::vector<int> expected_4 = {1, 1};
    std::vector<int> result_4 = MetroScheme(len_4, connections_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int len_5 = 6;
    std::vector<std::vector<int>> connections_5 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 1}, {1, 3}, {2, 4}};
    std::vector<int> expected_5 = {2, 8};
    std::vector<int> result_5 = MetroScheme(len_5, connections_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int len_6 = 7;
    std::vector<std::vector<int>> connections_6 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 1}, {1, 4}, {3, 6}};
    std::vector<int> expected_6 = {2, 9};
    std::vector<int> result_6 = MetroScheme(len_6, connections_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int len_7 = 5;
    std::vector<std::vector<int>> connections_7 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 1}, {2, 4}};
    std::vector<int> expected_7 = {1, 6};
    std::vector<int> result_7 = MetroScheme(len_7, connections_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int len_8 = 4;
    std::vector<std::vector<int>> connections_8 = {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 3}, {2, 4}};
    std::vector<int> expected_8 = {2, 6};
    std::vector<int> result_8 = MetroScheme(len_8, connections_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int len_9 = 4000000;
    std::vector<std::vector<int>> connections_9 = {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 3}, {2, 4}};
    std::vector<int> expected_9 = {2, 6};
    try
    {
        MetroScheme(len_9, connections_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_10 = 1;
    std::vector<std::vector<int>> connections_10 = {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 3}, {2, 4}};
    std::vector<int> expected_10 = {2, 6};
    try
    {
        MetroScheme(len_10, connections_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_11 = -1;
    std::vector<std::vector<int>> connections_11 = {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 3}, {2, 4}};
    std::vector<int> expected_11 = {2, 6};
    try
    {
        MetroScheme(len_11, connections_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_12 = 2;
    std::vector<std::vector<int>> connections_12 = {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 3}, {2, 4}};
    std::vector<int> expected_12 = {2, 6};
    try
    {
        MetroScheme(len_12, connections_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_13 = 2;
    std::vector<std::vector<int>> connections_13 = {{1, -1}, {2, 3}, {3, 4}, {4, 1}, {1, 3}, {2, 4}};
    std::vector<int> expected_13 = {2, 6};
    try
    {
        MetroScheme(len_13, connections_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_14 = 2;
    std::vector<std::vector<int>> connections_14(300001,{1,1});
    std::vector<int> expected_14 = {2, 6};
    try
    {
        MetroScheme(len_14, connections_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_15 = 2;
    std::vector<std::vector<int>> connections_15={};
    std::vector<int> expected_15 = {2, 6};
    try
    {
        MetroScheme(len_15, connections_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    std::cout << "All test cases passed!" << std::endl;
    return 0;
}
