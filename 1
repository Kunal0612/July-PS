/*

https://codeforces.com/problemset/problem/1572/C

Create a C++ function named Paint the minimum number of operations needed to make all the pixels in the image have the same color.

You are given a  1 by  n pixel image. The i-th pixel of the image has color a[i]. For each color, the number of pixels of that color is at most 20.

You can perform the following operation, which works like the bucket tool in paint programs, on this image: 

-> pick a color â€” an integer from 1 to  n
-> choose a pixel in the image
-> for all pixels connected to the selected pixel, change their colors to the selected color (two pixels of the same color are considered connected if all the pixels between them have the same color as those two pixels).

Compute the minimum number of operations needed to make all the pixels in the image have the same color.

Input:

A vector of integers nums.

Constraints:

nums.size() : ranges from 1 to 3000.
nums : ranges from 1 to nums.size() ,  every nums[i] should be atmost 20.

Output:

A integer answer the minimum number of operations needed to make all the pixels in the image have the same color.

*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <cassert>

int Paint(std::vector<int> &nums) {
    if (nums.size() <= 0 or nums.size()>3000) {
        throw std::invalid_argument("vec length must be positive.");
    }
    for (int i = 0; i < nums.size(); ++i)
    {
        if (nums[i] < 1 || nums[i] > nums.size())
        {
            throw std::invalid_argument("Invalid element value");
        }
    }
    int n = nums.size();
    std::vector<int> vrr[n+1];
    int arr[n+1];
    for(int i = 1; i <= n; i++) {
        arr[i] = nums[i-1];
        vrr[arr[i]].push_back(i);
    }
    int dp[n+1][n+1];
    std::memset(dp, 0, sizeof(dp));
    for(int j = 1; j < n; j++) {
        for(int i = 1; i <= n-j; i++) {
            if(arr[i] == arr[i+1]) {
                dp[i][i+j] = dp[i+1][i+j];
            } else {
                dp[i][i+j] = 1 + dp[i+1][i+j];
                for(int k = 0; k < vrr[arr[i]].size(); k++) {
                    int it = vrr[arr[i]][k];
                    if(it <= i+j && it > i+1) {
                        dp[i][i+j] = std::min(dp[i][i+j], dp[it][i+j] + dp[i+1][it-1] + 1);
                    }
                }
            }
        }
    }
    int ans = dp[1][n];
    return ans;
}

int main() {
    // TEST
    std::vector<int> nums_1 = {1, 2, 1, 4, 2};
    int expected_1 = 3;
    int result_1 = Paint(nums_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {1, 1, 1, 1};
    int expected_2 = 0;
    int result_2 = Paint(nums_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {4, 3, 2, 1};
    int expected_3 = 3;
    int result_3 = Paint(nums_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {1, 3, 2, 1, 2, 1, 1, 3, 3};
    int expected_4 = 4;
    int result_4 = Paint(nums_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {5, 4, 3, 2, 1};
    int expected_5 = 4;
    int result_5 = Paint(nums_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {1, 2, 3, 4, 5};
    int expected_6 = 4;
    int result_6 = Paint(nums_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {3, 3, 3, 3, 3, 3, 3};
    int expected_7 = 0;
    int result_7 = Paint(nums_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {1, 2, 1, 2, 1, 2, 1, 2};
    int expected_8 = 4;
    int result_8 = Paint(nums_8);
    assert(result_8 == expected_8);
    // TEST_END

    //TEST
    std::vector<int> nums_9 = {1, 2, 2, 4, 5};
    int expected_9 = 3;
    int result_9 = Paint(nums_9);
    assert(result_9 == expected_9);
    //TEST_END

    // TEST
    std::vector<int> nums_10 = {};
    int expected_10;
    try
    {
        Paint(nums_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_11 = {-100000002, 100000002};
    int expected_11;
    try
    {
        Paint(nums_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_12(300000, 1);
    int expected_12;
    try
    {
        Paint(nums_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    std::cout << "All test cases passed!" << std::endl;
    return 0;
}
