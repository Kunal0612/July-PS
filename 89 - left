// https://codeforces.com/contest/1223/problem/G

#include <algorithm>
#include <iostream>
#include <map>
#include <vector>
#include <cassert>
#include <stdexcept>



void Check(int first, int sec, long long& ans) {
    if (first > 1) ans = std::max(ans, 1ll * first * sec);
}


/*

Input :

A vector of integers logs.

Constraints :

logs : ranges from 2 to 500000.
logs.size() : ranges from 1 to 500000.

*/

int WoodenRaft(std::vector<int> &logs){
    int len=logs.size();
    if (len < 1 || len > 500000) {
        throw std::invalid_argument("Invalid number of logs");
    }
    for(int i=0; i<len; i++){
        if (logs[i] < 2 || logs[i] > 500000) {
            throw std::invalid_argument("Invalid log length");
        }
    }
    std::vector<int> arr(std::max(len + 1, 3));
    std::map<int, int> cnt;
    std::map<int, int> las;

    for (int i = 1; i <= len; ++i) {
        arr[i]=logs[i-1];
        ++cnt[arr[i]];
    }

    int mxi = *std::max_element(arr.begin() + 1, arr.begin() + len + 1);
    las[0] = -1;

    for (int i = 1; i <= mxi << 1; ++i) {
        las[i] = cnt.count(i) ? i : las[i - 1];
        cnt[i] += cnt[i - 1];
    }

    long long ans = 0;

    for (int y = 2; y <= mxi; ++y) {
        long long tmp = 0;
        int mxa = -1, mxb = -1;

        for (int i = y - 1; i <= mxi; i += y) {
            tmp += (i / y + 1) * (cnt[i + y] - cnt[i]);
        }

        for (int i = mxi, j = (mxi / y) * y; ~i; i = j - 1, j -= y) {
            int xec = las[i], idx = -1;

            if (las[i] > 0) {
                if (cnt[las[i]] - cnt[las[i] - 1] > 1) {
                    idx = las[i];
                }
                else {
                    idx = las[las[i] - 1];
                }
            }

            int kec = j / y;

            if (xec >= j) {
                xec %= y;

                if ((~mxa) && ((~mxb) || xec >= mxa)){
                    Check(std::min(tmp - kec - kec - 1, (long long)j + std::max(xec, mxa)), y, ans);
                }

                if (xec > mxa){
                    mxb = mxa, mxa = xec;
                }
                else if (xec > mxb){
                    mxb = xec;
                }

                if (idx >= j){
                    mxb = std::max(mxb, idx % y);
                }
            }

            if (~mxa) {
                Check(std::min(tmp - kec, (long long)j + mxa >> 1), y, ans);
                if (~mxb){
                    Check(std::min(tmp - kec - kec, (long long)j + mxb), y, ans);
                }
            }
        }
    }
    return ans;
}


#include <algorithm>
#include <iostream>
#include <map>
#include <vector>
#include <cassert>
#include <stdexcept>

int main() {
    int len;
    std::cin >> len;
    std::vector<int> arr(len);
    for (int i = 0; i < len; ++i) {
        std::cin >> arr[i];
    }
    int ans=WoodenRaft(arr);
    std::cout << ans << std::endl;
    return 0;
}
