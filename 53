/*

https://codeforces.com/contest/1956/problem/E2

Write a C++ Solution ArrayValue to determine which monsters (by their indices) will still have a non-zero energy level after all the attacks.


Nene is in a battle against len monsters arranged in a circle. Each monster is assigned an energy level nums_i (1 <= i <= n). Faced with these formidable opponents, Nene decides to use a special spell called "Attack Your Neighbour."

The Attack Your Neighbour Spell:

When Nene casts this spell, a series of attacks occur in a specific order:

Monster 1 attacks Monster 2.
Monster 2 attacks Monster 3. ... n-1. Monster (n-1) attacks Monster n. n. Monster n attacks Monster 1 (back to the beginning).

Attack Mechanics:

During an attack, the following happens:

Monster with energy x attacks Monster with energy y.
The defending monster's (Monster y) energy level becomes max(0, y - x).
The attacking monster's (Monster x) energy remains unchanged.
Nene's Challenge:

Nene plans to cast the "Attack Your Neighbour" spell 10100 times. Your task is to determine which monsters (by their indices) will still have a non-zero energy level after all the attacks.

Input:

A vector of integers nums.

Output:

A vector of integer ans to determine which monsters (by their indices) will still have a non-zero energy level after all the attacks.

Constraints:

nums.size() : ranges from 2 to 100000.
nums : ranges from 0 to 10^9.


Use appropriate Error Handling using the stdexcept library for the invalid test cases.


*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <ctime>
#include <functional>
#include <cassert>
#include <stdexcept>


bool Check(int len, std::vector<int>& arr) {
    arr[len + 1] = arr[1];
    arr[len + 2] = arr[2];
    arr[len + 3] = arr[3];
    for (int i = 1; i <= len; i++) {
        if (arr[i] and arr[i + 1] and arr[i + 2] and arr[i + 3]){
            return true;
        }
    }
    return false;
}

long long Attack(long long first, long long sec) {
    long long k_value = first / sec;
    return (2 * first - (k_value + 1) * sec) * k_value / 2;
}

std::vector<int> NeneVsMonsters(std::vector<int> &nums) {
    int len=nums.size();
    if (len <= 1 or len > 200000)
    {
        throw std::invalid_argument("Invalid nums length");
    }
    for (int i = 0; i < len; i++)
    {
        if (nums[i] < 0 or nums[i] > 1000000000)
        {
            throw std::invalid_argument("Invalid nums");
        }
    }
    std::vector<int> arr(len + 4, 0);
    std::vector<bool> brr(len + 1, false);
    
    for (int i = 1; i <= len; i++) {
        arr[i]=nums[i-1];
    }

    if (len == 2) {
        while (arr[1] && arr[2]) {
            arr[2] = std::max(0, arr[2] - arr[1]);
            arr[1] = std::max(0, arr[1] - arr[2]);
        }
        brr[1] = (arr[1] > 0);
        brr[2] = (arr[2] > 0);
    } 
    else if (len == 3) {
        while (arr[1] && arr[2] && arr[3]) {
            arr[2] = std::max(0, arr[2] - arr[1]);
            arr[3] = std::max(0, arr[3] - arr[2]);
            arr[1] = std::max(0, arr[1] - arr[3]);
        }
        brr[1] = (!arr[3] && arr[1]);
        brr[2] = (!arr[1] && arr[2]);
        brr[3] = (!arr[2] && arr[3]);
    } else {
        while (Check(len, arr)) {
            for (int i = 1; i <= len; i++) {
                arr[i % len + 1] = std::max(0, arr[i % len + 1] - arr[i]);
            }
        }

        for (int i = 1; i <= len; i++) brr[i] = false;

        for (int p = 1; p <= len; p++) {
            if (arr[p] && arr[p % len + 1]) {
                arr[p % len + 1] = std::max(0, arr[p % len + 1] - arr[p]);
            } else {
                break;
            }
        }

        for (int i = 1; i <= len; i++) {
            if (!arr[i] && arr[i % len + 1]) {
                brr[i % len + 1] = true;
                brr[(i + 2) % len + 1] = (arr[(i + 2) % len + 1] > Attack(arr[(i + 1) % len + 1], arr[i % len + 1]));
            }
        }
    }
    std::vector<int> ans;
    for (int i = 1; i <= len; i++) {
        if (brr[i]){
            ans.push_back(i);
        }
    };
    return ans;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <ctime>
#include <functional>
#include <cassert>
#include <stdexcept>


int main() {
    
    
    std::cout << "All test cases passed!\n";
    return 0;
}
