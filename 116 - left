// https://codeforces.com/problemset/problem/1485/E

#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <limits>
#include <stdexcept>
#include <cassert>

void Dfs(long long src, std::vector<long long> adj[], std::vector<std::array<long long, 3>> dadj[], bool visited[], long long dist[], long long &dis)
{
    for (int u : adj[src])
    {
        if (!visited[u])
        {
            visited[u] = true;
            dist[u] = dist[src] + 1;
            dadj[dist[u]].push_back({-1, src, u});
            dis = std::max(dis, dist[u]);
            Dfs(u, adj, dadj, visited, dist, dis);
        }
    }
}

/*
Input :

An integer num_nodes.
A vector of integers arr.
A vector of integers parents

Constraints :

num_nodes : ranges from 2 to 200000.
parents.size() == arr.size() : is equal to num_nodes - 1.
parents : ranges from 1 to num_nodes, parents[i]!=i.
arr : ranges from 1 to 10^9.


*/


int MoveAndSwap(int num_nodes, std::vector<int> arr, std::vector<int> parents)
{
    if (num_nodes < 2 || num_nodes > 200000) {
        throw std::invalid_argument("n is out of bounds (2 ≤ num_nodes ≤ 200000)");
    }

    if (parents.size() != num_nodes - 1) {
        throw std::invalid_argument("The size of the parents vector is incorrect");
    }

    if (arr.size() != num_nodes - 1) {
        throw std::invalid_argument("The size of the arr vector is incorrect");
    }

    for (long long i = 2; i <= num_nodes; ++i) {
        if (parents[i - 2] < 1 || parents[i - 2] > num_nodes || parents[i - 2] == i) {
            throw std::invalid_argument("Parent value is out of bounds or invalid");
        }
    }

    for (long long i = 1; i < num_nodes; ++i) {
        if (arr[i-1] < 1 || arr[i-1] > 1000000000) {
            throw std::invalid_argument("Value is out of bounds (1 ≤ arr[i] ≤ 10^9)");
        }
    }
    long long nums[num_nodes + 1];
    for (long long i = 1; i < num_nodes; i++)
    {
        nums[i] = arr[i - 1];
    }
    std::vector<long long> adj[num_nodes + 1];
    std::vector<std::array<long long, 3>> dadj[num_nodes + 1];
    bool visited[num_nodes + 1] = {false};
    long long dist[num_nodes + 1] = {0};
    long long dp_table[num_nodes + 1] = {0};

    for (long long i = 2; i <= num_nodes; i++)
    {
        long long node = parents[i - 2];
        adj[node - 1].push_back(i - 1);
        adj[i - 1].push_back(node - 1);
    }

    long long dis = 0;
    visited[0] = true;
    Dfs(0, adj, dadj, visited, dist, dis);
    dadj[0].push_back({0, -1, 0});

    for (long long i = 1; i <= dis; i++)
    {
        for (std::array<long long, 3U> &u : dadj[i])
        {
            u[0] = nums[u[2]];
        }
        std::sort(dadj[i].begin(), dadj[i].end());
        long long src = dadj[i].size();
        long long res_1 = dadj[i][0][0];
        long long res_2 = dadj[i][dadj[i].size() - 1][0];
        for (std::array<long long, 3U> &u : dadj[i])
        {
            long long aec_1 = nums[u[2]];
            dp_table[u[2]] = std::max({dp_table[u[2]], dp_table[u[1]] + aec_1 - res_1, dp_table[u[1]] + res_2 - aec_1});
        }
        long long kdx = 0;
        for (long long j = 0; j < src; j++)
        {
            if (dp_table[dadj[i][j][1]] - dadj[i][j][0] > dp_table[dadj[i][kdx][1]] - dadj[i][kdx][0])
            {
                kdx = j;
            }
            dp_table[dadj[i][j][2]] = std::max(dp_table[dadj[i][j][2]], dadj[i][j][0] - dadj[i][kdx][0] + dp_table[dadj[i][kdx][1]]);
        }
        kdx = src - 1;
        for (long long j = src - 1; j >= 0; j--)
        {
            if (dp_table[dadj[i][j][1]] + dadj[i][j][0] > dp_table[dadj[i][kdx][1]] + dadj[i][kdx][0])
            {
                kdx = j;
            }
            dp_table[dadj[i][j][2]] = std::max(dp_table[dadj[i][j][2]], dadj[i][kdx][0] - dadj[i][j][0] + dp_table[dadj[i][kdx][1]]);
        }
    }

    long long res = 0;
    for (long long i = 1; i < num_nodes; i++)
    {
        res = std::max(res, dp_table[i]);
    }

    return res;
}

#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <limits>
#include <stdexcept>
#include <cassert>


int main()
{
    std::ios::sync_with_stdio(0);
    std::cin.tie(0);

    long long t;
    std::cin >> t;
    while (t--)
    {
        long long num_nodes;
        std::cin >> num_nodes;
        std::vector<int> parents(num_nodes - 1), arr(num_nodes - 1);
        for (int i = 0; i < num_nodes - 1; i++)
        {
            std::cin >> parents[i];
        }
        for (int i = 0; i < num_nodes - 1; i++)
        {
            std::cin >> arr[i];
        }
        int ans=MoveAndSwap(num_nodes,arr,parents);
        std::cout << ans << std::endl;
    }

    return 0;
}
