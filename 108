/*

https://codeforces.com/problemset/problem/1554/E

Write a C++ Solution You to find the vector ans where for each k from 1 to  num_nodes, the k-th integer denotes the answer when gcd equals to k.

You are given a tree with num_nodes nodes. As a reminder, a tree is a connected undirected graph without cycles.

Let a1,a2,…,an be a sequence of integers. Perform the following operation exactly num_nodes times:

Select an unerased node u. 

Assign a[u]:= number of unerased nodes adjacent to u. 

Then, erase the node u along with all edges that have it as an endpoint.

For each integer k from 1 to num_nodes, find the number, modulo 998244353, of 
different sequences a1,a2,…,an that satisfy the following conditions:

it is possible to obtain a by performing the aforementioned operations exactly num_nodes times in some order.

gcd(a1,a2,…,an)=k. Here, gcd means the greatest common divisor of the elements in a.


Input :

An integer num_nodes.
A vector of pair of integers edges.

Constraints :

num_nodes : ranges from 2 to 100000.
edges.size() : equal to num_nodes - 1.
edges : ranges from 1 to num_nodes.


Output:

An vector of integers ans where for each k from 1to num_nodes, the k-th integer denotes the answer when gcd equals to k.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

*/


#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <cassert>
#include <stdexcept>



void AddEdge(std::vector<std::vector<int>>& graph, int node_u, int node_v, int num_nodes) {
    graph[node_u].push_back(node_v);
    graph[node_v].push_back(node_u);
}

void Dfs(int node, int parent, const std::vector<std::vector<int>>& graph, 
std::vector<int>& dp_table, bool& is_valid, int dec) {
    if (!is_valid){
        return;
    }
    for (int neighbor : graph[node]) {
        if (neighbor != parent) {
            Dfs(neighbor, node, graph, dp_table, is_valid, dec);
        }
    }
    if (dp_table[node] % dec != 0) {
        if (parent) {
            dp_table[node]++;
        }
        if (dp_table[node] % dec != 0) {
            is_valid = false;
            return;
        }
    } else {
        dp_table[parent]++;
    }
}

std::vector<int> You(int num_nodes,std::vector<std::vector<int>>& edges) {
    if (num_nodes < 2 || num_nodes > 100000) {
        throw std::invalid_argument("Number of num_nodes must be between 2 and 100000.");
    }
    if (edges.size() != num_nodes - 1) {
        throw std::invalid_argument("Number of edges must be num_nodes - 1.");
    }
    for (std::vector<int> &edge : edges) {
        if (edge[0] < 1 || edge[0] > num_nodes || edge[1] < 1 || edge[1] > num_nodes) {
            throw std::invalid_argument("Edge node indices must be within the valid range.");
        }
    }
    std::vector<std::vector<int>> graph(num_nodes + 1);
    for (std::vector<int> &edge : edges)
    {
        AddEdge(graph, edge[0], edge[1], num_nodes);
    }
    std::vector<int> result(num_nodes+1);
    std::fill(result.begin(), result.end(), 0);
    result[1] = 1;
    int mod = 998244353;
    for (int k = 1; k <= num_nodes - 1; k++) {
        result[1] = (result[1] * 2) % mod;
    }

    for (int dec = 2; dec <= num_nodes - 1; dec++) {
        if ((num_nodes - 1) % dec == 0) {
            bool is_valid = true;
            std::vector<int> dp_table(num_nodes + 1, 0);
            Dfs(1, 0, graph, dp_table, is_valid, dec);
            result[dec] = is_valid;
        }
    }
    
    for (int i = num_nodes; i >= 1; i--) {
        for (int j = i + i; j <= num_nodes; j += i) {
            result[i] = (result[i] - result[j] + mod) % mod;
        }
    }
    std::vector<int> ans;
    for (int i = 1; i <= num_nodes; i++) {
        ans.push_back(result[i]);
    }
    return ans;
}


#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <cassert>
#include <stdexcept>


int main()
{
    // TEST
    int num_nodes_1 = 4;
    std::vector<std::vector<int>> edges_1 = {{1, 2}, {3, 2}, {2, 4}};
    std::vector<int> expected_1 = {7,0,1,0}; 
    std::vector<int> result_1 = You(num_nodes_1, edges_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int num_nodes_2 = 5;
    std::vector<std::vector<int>> edges_2 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    std::vector<int> expected_2 = {15,1,0,0,0}; 
    std::vector<int> result_2 = You(num_nodes_2, edges_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int num_nodes_3 = 3;
    std::vector<std::vector<int>> edges_3 = {{1, 2}, {1, 3}};
    std::vector<int> expected_3 ={3,1,0};
    std::vector<int> result_3 = You(num_nodes_3, edges_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int num_nodes_4 = 6;
    std::vector<std::vector<int>> edges_4 = {{1, 2}, {1, 3}, {3, 4}, {3, 5}, {5, 6}};
    std::vector<int> expected_4 = {32,0,0,0,0,0}; 
    std::vector<int> result_4 = You(num_nodes_4, edges_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int num_nodes_5 = 7;
    std::vector<std::vector<int>> edges_5 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}};
    std::vector<int> expected_5 = {62,1,1,0,0,0,0};
    std::vector<int> result_5 = You(num_nodes_5, edges_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int num_nodes_6 = 8;
    std::vector<std::vector<int>> edges_6 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {7, 8}};
    std::vector<int> expected_6 = {128,0,0,0,0,0,0,0};
    std::vector<int> result_6 = You(num_nodes_6, edges_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int num_nodes_7 = 9;
    std::vector<std::vector<int>> edges_7 = {{1, 2}, {1, 3}, {3, 4}, {3, 5}, {4, 6}, {5, 7}, {6, 8}, {7, 9}};
    std::vector<int> expected_7 = {255,1,0,0,0,0,0,0,0};
    std::vector<int> result_7 = You(num_nodes_7, edges_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int num_nodes_8 = 10;
    std::vector<std::vector<int>> edges_8 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {4, 8}, {5, 9}, {6, 10}};
    std::vector<int> expected_8 = {512,0,0,0,0,0,0,0,0,0}; 
    std::vector<int> result_8 = You(num_nodes_8, edges_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int num_nodes_9 = 500001;
    std::vector<std::vector<int>> edges_9 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {4, 9}, {5, 9}, {6, 10}};
    try
    {
        You(num_nodes_9, edges_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_nodes_10 = 0;
    std::vector<std::vector<int>> edges_10 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {4, 10}, {5, 10}, {6, 10}};
    try
    {
        You(num_nodes_10, edges_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_11 = -5;
    std::vector<std::vector<int>> edges_11 = {{1, 2}, {3, 2}, {2, 4}};
    try
    {
        You(num_nodes_11, edges_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_12 = 5;
    std::vector<std::vector<int>> edges_12 = {{1, 2}, {3, 2}, {2, 4}};
    try
    {
        You(num_nodes_12, edges_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_13 = 5;
    std::vector<std::vector<int>> edges_13 = {{-1, 2}, {3, 2}, {2, 4}};
    try
    {
        You(num_nodes_13, edges_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_14 = 5;
    std::vector<std::vector<int>> edges_14 = {{1, 0}, {3, 2}, {2, 4}};
    try
    {
        You(num_nodes_14, edges_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_15 = 5;
    std::vector<std::vector<int>> edges_15 = {};
    try
    {
        You(num_nodes_15, edges_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
