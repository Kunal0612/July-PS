/*

https://codeforces.com/problemset/problem/1808/E2

Write a C++ Solution FindTickets to find the number of lucky tickets modulo 10^9 + 7.

Maxim, a minibus driver on Venus, operates a system with unique ticket 
numbers. Here's how it works:

Number System: Venusians use a base-k_value numeral system 
(different from our decimal system).

Ticket Length: Each ticket has num digits.

Digit Range: Valid digits range from 0 to k_value - 1 (inclusive).

Lucky Tickets:

Venusians consider a ticket "lucky" if one of its digits is equal to the sum 
of all other digits modulo k_value. Modulo here refers to the remainder after division.

Example (k_value = 10): Ticket 7135 is lucky because (7 + 1 + 5) % 10 = 3, and 3 
exists as a digit in the ticket.

Maxim's Challenge:

During a trip, Maxim wonders how many lucky tickets exist. However, 
the answer might be a very large number. So, he's only interested in 
the count modulo 10^9 + 7 (a prime number has exactly two divisors: 1 and itself).

Challenge:

Given the number of digits num, the base k_value, 
your task is to determine the number of lucky tickets modulo 10^9 + 7.


Input:

An integer num.
An integer k_value.

Output:

A integer ans that consist the number of lucky tickets modulo 10^9 + 7.

Constraints:

num : ranges from 1 to 10^18.
k_value : ranges from 1 to 100.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.


*/

#include <iostream>
#include <vector>
#include <functional>
#include <cassert>
#include <stdexcept>

long long GCD(long long first, long long sec) {
    while (sec != 0) {
        long long temp = sec;
        sec = first % sec;
        first = temp;
    }
    return first;
}

long long Power(long long base, long long exponent, long long mod) {
    long long result = 1;
    for (exponent %= (mod - 1); exponent; base = base * base % mod, exponent >>= 1) {
        if (exponent & 1) {
            result = result * base % mod;
        }
    }
    return result;
}

long long FindTickets(long long num,long long k_value){
    if(num<1 or num>1000000000000000000){
        throw std::invalid_argument("Invalid num");
    }
    if(k_value<1 or k_value>100){
        throw std::invalid_argument("Invalid k_value");
    }
    if (num == 1) {
        return 1;
    }
    long long prime_mod=1e9+7;
    long long gcd_value, ans;
    if (k_value & 1) {
        gcd_value = GCD(num - 2, k_value);
        ans = Power(k_value, num, prime_mod);
        ans = (ans - Power(k_value - 1, num, prime_mod) + prime_mod) % prime_mod;
        if (num & 1) {
            ans = (ans + gcd_value - 1) % prime_mod;
        } else {
            ans = (ans - gcd_value + 1 + prime_mod) % prime_mod;
        }
    } else {
        gcd_value = GCD(num - 2, k_value >> 1);
        ans = Power(k_value, num, prime_mod);
        ans = (ans - Power(k_value - 2, num, prime_mod) + prime_mod) % prime_mod;
        ans = (ans + Power(prime_mod - 2, num, prime_mod)) % prime_mod;
        if (ans & 1) {
            ans = (ans + prime_mod) >> 1;
        } else {
            ans >>= 1;
        }
        if (num & 1) {
            ans = (ans + Power(2, num - 1, prime_mod) * gcd_value % prime_mod) % prime_mod;
        } else {
            ans = (ans - Power(2, num - 1, prime_mod) * gcd_value % prime_mod + prime_mod) % prime_mod;
        }
    }

    return ans;
}


#include <iostream>
#include <vector>
#include <functional>
#include <cassert>
#include <stdexcept>

int main() {
    // TEST
    long long num_1 = 3, k_value_1 = 2;
    long long expected_1 = 4;
    long long result_1 = FindTickets(num_1, k_value_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    long long num_2 = 1, k_value_2 = 1;
    long long expected_2 = 1;
    long long result_2 = FindTickets(num_2, k_value_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    long long num_3 = 10, k_value_3 = 5;
    long long expected_3 =8717049;
    long long result_3 = FindTickets(num_3, k_value_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    long long num_4 = 20, k_value_4 = 10;
    long long expected_4 = 731804205;
    long long result_4 = FindTickets(num_4, k_value_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    long long num_5 = 50, k_value_5 = 25;
    long long expected_5 = 539626069;
    long long result_5 = FindTickets(num_5, k_value_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    long long num_6 = 100, k_value_6 = 50;
    long long expected_6 = 724647762;
    long long result_6 = FindTickets(num_6, k_value_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    long long num_7 = 30, k_value_7 = 15;
    long long expected_7 = 78765620;
    long long result_7 = FindTickets(num_7, k_value_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    long long num_8 = 40, k_value_8 = 20;
    long long expected_8 = 272951805;
    long long result_8 = FindTickets(num_8, k_value_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    long long num_9 = 40, k_value_9 = 205;
    try
    {
        FindTickets(num_9, k_value_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long num_10 = 40, k_value_10 = 0;
    try
    {
        FindTickets(num_10, k_value_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long num_11 = 40, k_value_11 = -2;
    try
    {
        FindTickets(num_11, k_value_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long num_12 = 0, k_value_12 = -2;
    try
    {
        FindTickets(num_12, k_value_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long num_13 = -5, k_value_13 = -2;
    try
    {
        FindTickets(num_13, k_value_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    long long num_14 = 1000000004, k_value_14 = -2;
    try
    {
        FindTickets(num_14, k_value_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
