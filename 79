/*

https://codeforces.com/problemset/problem/1310/B

Write a C++ Solution Double Elimination to determine the maximum 
possible number of championship games featuring at least one of 
your favorite teams under your influence over game outcomes. 


The "The Innernational" Cota 2 world championship is approaching, 
and you're a die-hard fan of specific teams!

Double-Elimination Format:

The championship employs a double-elimination format to determine 
the champion. Here's a breakdown:

Number of Teams: 2^num teams participate, numbered from 1 to 
2^num.

Upper Bracket: All teams initially compete in the upper bracket. 
Matches are played between teams without prior losses. Winners 
advance, losers drop to the lower bracket.

Lower Bracket: Teams losing their first upper bracket match enter 
the lower bracket. It starts with 2^(num-1) teams.

Lower Bracket Rounds: Each round in the lower bracket involves two games:

First Game: Teams are paired by number. 2^k_value teams compete if 
it's the k_value-th round (k_value starts at 1). 
Winners (2^(k_value-1)) play losers from the upper bracket's same round.

Second Game: Losers from the first game are eliminated. 
Winners (2^(k_value-1)) play losers eliminated in the 
corresponding upper bracket round (again paired by number).

Grand Finals: The remaining team from the upper bracket 
faces the remaining team from the lower bracket to crown the champion.

The Fanatic's Challenge:

You have a special ability to influence the outcome of any 
championship game! Your goal is to maximize the number of 
games that involve your favorite teams, denoted by a 
list [nums_1, nums_2, ..., nums_k_value].

Develop an algorithm to determine the maximum possible number 
of championship games featuring at least one of your favorite 
teams under your influence over game outcomes. 


Input :

An integer num
An integer k_value
A vector of integers arr.

Constraints :

num : ranges from 2 to 17.
k_value : ranges from 1 to 2^num.
arr : ranges from 1 to 2^num.

Output:

An integer result to determine the maximum possible number 
of championship games featuring at least one of your favorite teams under your influence over game outcomes. 

Use appropriate Error Handling using the stdexcept library 
for the invalid test cases.

*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <cassert>
#include <stdexcept>


int DoubleElimination(int num,int k_value,std::vector<int> &arr){
    if(num<2 or num>17 or k_value<0 or k_value>(1<<num) or k_value!=arr.size()){
        throw std::invalid_argument("Invalid Constraints");
    }
    for(int i=0; i<arr.size();i++){
        if(arr[i]<1 or arr[i]>(1<<num)){
            throw std::invalid_argument("Invalid Constraints");
        }
    }
    int bit;
    int inf = INT_MAX;
    bit = 1 << (num - 1);
    
    std::vector<std::vector<int>> dp_table(bit * 2, std::vector<int>(4, -inf));
    
    for (int i = 1; i <= k_value; ++i) {
        int cnt=arr[i-1];
        cnt = bit + (cnt - 1) / 2;
        dp_table[cnt][3] = dp_table[cnt][1];
        dp_table[cnt][1] = dp_table[cnt][2] = 1;
    }
    
    for (int i = bit - 1; i > 0; --i) {
        for (int x = 0; x < 4; ++x) {
            for (int y = 0; y < 4; ++y) {
                dp_table[i][x | y] = std::max(dp_table[i][x | y], dp_table[2 * i][x] + dp_table[2 * i + 1][y] + (x | y));
            }
        }
    }
    
    int result = std::max({dp_table[1][1], dp_table[1][2], dp_table[1][3], -1}) + 1;
    return result;
}




#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <cassert>
#include <stdexcept>

int main()
{
    // TEST
    int num_1 = 4;
    int k_value_1 = 2;
    std::vector<int> arr_1 = {5,6};
    int expected_1 = 30;
    int result_1 = DoubleElimination(num_1, k_value_1, arr_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int num_2 = 5;
    int k_value_2 = 5;
    std::vector<int> arr_2 = {2, 3, 4, 5, 6};
    int expected_2 = 62;
    int result_2 = DoubleElimination(num_2, k_value_2, arr_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int num_3 = 3;
    int k_value_3 = 3;
    std::vector<int> arr_3 = {1, 4, 6};
    int expected_3 = 14;
    int result_3 = DoubleElimination(num_3, k_value_3, arr_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int num_4 = 6;
    int k_value_4 = 6;
    std::vector<int> arr_4 = {2, 5, 10, 15, 18, 20};
    int expected_4 = 126;
    int result_4 = DoubleElimination(num_4, k_value_4, arr_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int num_5 = 7;
    int k_value_5 = 7;
    std::vector<int> arr_5 = {1, 3, 5, 7, 9, 11, 13};
    int expected_5 = 254;
    int result_5 = DoubleElimination(num_5, k_value_5, arr_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int num_6 = 2;
    int k_value_6 = 2;
    std::vector<int> arr_6 = {2, 4};
    int expected_6 = 6;
    int result_6 = DoubleElimination(num_6, k_value_6, arr_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int num_7 = 10;
    int k_value_7 = 10;
    std::vector<int> arr_7 = {5, 10, 15, 20, 25, 30, 35, 40, 45, 50};
    int expected_7 = 2046;
    int result_7 = DoubleElimination(num_7, k_value_7, arr_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int num_8 = 8;
    int k_value_8 = 8;
    std::vector<int> arr_8 = {2, 4, 6, 8, 10, 12, 1, 3};
    int expected_8 = 510;
    int result_8 = DoubleElimination(num_8, k_value_8, arr_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int num_9 = 1000000009;
    int k_value_9 = 8;
    std::vector<int> arr_9 = {2, 4, 6, 9, 10, 12, 1, 3};
    try
    {
        DoubleElimination(num_9, k_value_9, arr_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_10 = -1;
    int k_value_10 = 8;
    std::vector<int> arr_10 = {2, 4, 6, 9, 10, 12, 1, 3};
    try
    {
        DoubleElimination(num_10, k_value_10, arr_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_11 = 2005;
    int k_value_11 = 1200000008;
    std::vector<int> arr_11 = {2, 4, 6, 9, 10, 12, 1, 3};
    try
    {
        DoubleElimination(num_11, k_value_11, arr_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_12 = 8;
    int k_value_12 = -1;
    std::vector<int> arr_12 = {2, 4, 6, 9, 10, 12, 1, 3};
    try
    {
        DoubleElimination(num_12, k_value_12, arr_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_13 = 8;
    int k_value_13 = -1;
    std::vector<int> arr_13 = {2, 4, 6, 9, 10, 13, 1, 3};
    try
    {
        DoubleElimination(num_13, k_value_13, arr_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_14 = 8;
    int k_value_14 = -2;
    std::vector<int> arr_14 = {2, 4, 6, 9, 10, 14, 1, 3};
    try
    {
        DoubleElimination(num_14, k_value_14, arr_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_15 = 8;
    int k_value_15 = 5;
    std::vector<int> arr_15 = {2, 4, 6, 9, -5, 1, 3};
    try
    {
        DoubleElimination(num_15, k_value_15, arr_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_16 = 8;
    int k_value_16 = 5;
    std::vector<int> arr_16 = {2, 1000000005, 6, 9, 16, 1, 3,200};
    try
    {
        DoubleElimination(num_16, k_value_16, arr_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_17 = 8;
    int k_value_17 = 5;
    std::vector<int> arr_17 = {2, 4, 0, 0, -44, 1, 3,0};
    try
    {
        DoubleElimination(num_17, k_value_17, arr_17);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_18 = 8;
    int k_value_18 = 5;
    std::vector<int> arr_18(400000,5);
    try
    {
        DoubleElimination(num_18, k_value_18, arr_18);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_19 = 8;
    int k_value_19 = 5;
    std::vector<int> arr_19 = {};
    try
    {
        DoubleElimination(num_19, k_value_19, arr_19);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
