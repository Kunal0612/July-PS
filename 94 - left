// https://codeforces.com/problemset/problem/1731/F

#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <cassert>
#include <stdexcept>

long long Power(long long base, long long exponent, long long mod)
{
    long long ans = 1;
    base = (base % mod + mod) % mod;
    while (exponent)
    {
        if (exponent & 1){
            ans = (ans * base) % mod;
        }
        base = (base * base) % mod;
        exponent /= 2;
    }
    return ans;
}

int Ncr(int num, int r_value, const std::vector<int> &fact, const std::vector<int> &invfact)
{
    if (r_value > num || r_value < 0){
        return 0;
    }
    int mod = 998244353;
    return (1ll * fact[num] * invfact[r_value] % mod) * invfact[num - r_value] % mod;
}


int Interpolate(const std::vector<int> &y_value, int r_value, int num, const std::vector<int> &fact, const std::vector<int> &invfact)
{
    int mod = 998244353;
    int ans = 0, prod = 1, temp;
    for (int i = 1; i <= r_value; ++i)
    {
        prod = (1ll * prod * (num - i)) % mod;
    }
    for (int i = 0; i < r_value; ++i)
    {
        temp = (1ll * prod * Power(num - i - 1, mod - 2, mod)) % mod;
        temp = (1ll * temp * y_value[i]) % mod;
        temp = (1ll * temp * invfact[i]) % mod;
        temp = (1ll * temp * invfact[r_value - i - 1]) % mod;
        if ((r_value - i) % 2 == 0){
            temp = mod - temp;
        }
        ans = (ans + temp) % mod;
    }
    return ans;
}


/*
Input :

An integer num.
An integer k_value.

Constraints :

num : ranges from 1 to 50.
k_value : ranges from 2 to 998244353.



*/


int FunctionSum(int num, int k_value)
{
    int max_num = 201;
    std::vector<int> fact(max_num);
    std::vector<int> invfact(max_num);
    fact[0] = 1;
    invfact[0] = 1;
    int mod = 998244353;
    for (int i = 1; i < max_num; ++i)
    {
        fact[i] = (1ll * i * fact[i - 1]) % mod;
        invfact[i] = Power(fact[i], mod - 2, mod);
    }
    if (num < 1 || num > 50 || k_value < 2 || k_value >= mod)
    {
        throw std::invalid_argument("Invalid input: Ensure 1 <= num <= 50 and 2 <= k_value < 998244353");
    }

    std::vector<int> values_of_polynomial(num + 3, 0);
    for (int i = 1; i <= num; ++i)
    {
        for (int x = 0; x < i; ++x)
        {
            for (int y_value = x + 1; y_value <= num - i; ++y_value)
            {
                for (int val = 1; val <= num + 3; ++val)
                {
                    long long calculation = (1ll * Ncr(i - 1, x, fact, invfact) * Power(val - 1, x, mod)) % mod;
                    calculation = (calculation * Power(k_value + 1 - val, i - 1 - x, mod)) % mod;
                    calculation = (calculation * (1ll * Ncr(num - i, y_value, fact, invfact) * Power(k_value - val, y_value, mod)) % mod) % mod;
                    calculation = (calculation * Power(val, num - i - y_value, mod)) % mod;
                    calculation = (calculation * val) % mod;
                    values_of_polynomial[val - 1] = (values_of_polynomial[val - 1] + calculation) % mod;
                }
            }
        }
    }

    for (int i = 1; i < num + 3; ++i)
    {
        values_of_polynomial[i] = (values_of_polynomial[i] + values_of_polynomial[i - 1]) % mod;
    }
    int ans;
    if (k_value <= num + 3)
    {
        ans=values_of_polynomial[k_value - 1];
    }
    else
    {
        ans=Interpolate(values_of_polynomial, num + 3, k_value, fact, invfact);
    }
    return ans;
}


#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <cassert>
#include <stdexcept>

int main()
{
    int num, k_value;
    std::cin >> num >> k_value;
    int ans = FunctionSum(num, k_value);
    std::cout << ans;
    return 0;
}
