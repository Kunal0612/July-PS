// https://codeforces.com/problemset/problem/1089/I

#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <stdexcept>

inline void Initialize(int mod, int num, std::vector<int>& factorial, std::vector<int>& non_trivial_interval_count, std::vector<int>& interval_free_permutations, std::vector<std::vector<int>>& interval_count) {
    factorial[0] = factorial[1] = 1;
    non_trivial_interval_count[0] = 1;
    interval_count[0][0] = 1;

    for (int i = 2; i <= num; i++){
        factorial[i] = 1LL * factorial[i - 1] * i % mod;
    }
    
    for (int i = 1; i <= num; i++) {
        non_trivial_interval_count[i] = factorial[i];
        for (int j = 1; j < i; j++) {
            non_trivial_interval_count[i] = (non_trivial_interval_count[i] - 1LL * non_trivial_interval_count[j] * factorial[i - j]) % mod;
        }
    }
    
    for (int i = 1; i <= num; i++) {
        for (int j = 1; j <= i; j++) {
            for (int k = 1; k <= i; k++) {
                interval_count[i][j] = (interval_count[i][j] + 1LL * interval_count[i - k][j - 1] * factorial[k]) % mod;
            }
        }
    }
    
    interval_free_permutations[1] = 1;
    interval_free_permutations[2] = 2;
    interval_free_permutations[3] = 0;

    for (int i = 4; i <= num; i++) {
        interval_free_permutations[i] = factorial[i];
        for (int j = 1; j < i; j++) {
            interval_free_permutations[i] = (interval_free_permutations[i] - 2LL * non_trivial_interval_count[j] * factorial[i - j]) % mod;
        }
        for (int j = 4; j < i; j++) {
            interval_free_permutations[i] = (interval_free_permutations[i] - 1LL * interval_count[i][j] * interval_free_permutations[j]) % mod;
        }
    }
}

/*
Input :

An integer num.

Constraints :

num : ranges from 1 to 400.


*/



int IntervalFreePermutations(int num){
    if(num<1 or num>400){
        throw std::invalid_argument("Invalid num value");
    }
    int mod=1e9+7;
    std::vector<int> factorial(num + 1), non_trivial_interval_count(num + 1), interval_free_permutations(num + 1);
    std::vector<std::vector<int>> interval_count(num + 1, std::vector<int>(num + 1, 0));

    Initialize(mod, num, factorial, non_trivial_interval_count, interval_free_permutations, interval_count);
    int ans=(interval_free_permutations[num] + mod) % mod;
    return ans;
}


#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <stdexcept>

int main() {
    int n;
    std::cin>>n;
    int ans=IntervalFreePermutations(n);
    std::cout<<ans<<std::endl;
    return 0;
}
