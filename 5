/*

https://codeforces.com/problemset/problem/1793/E

Create a C++ function named VelepinAndMarketing to find the answer for each query.

The famous writer Velepin is very productive. Recently, he signed a contract with a well-known publication and now he needs to write quer[i] books for i-th year.
This is not a problem for him at all, he can write as much as he wants about samurai, space, emptiness, insects and werewolves.

He has n regular readers, each of whom in the i-th year will read one of the quer[i] 
books published by Velepin. Readers are very fond of discussing books, so the j-th of them will be satisfied within a year if at least nums[j]
persons read the same book as him (including himself).

Velepin has obvious problems with marketing, so he turned to you! A well-known book reading service can control what each of Velepin's regular readers will read, but he does not want books to be wasted, so someone should read each book. And so they turned to you with a request to tell you what the maximum number of regular readers can be made satisfied during each of the years, if you can choose each person the book he will read.


Input:

A vector of integers nums.
A vector of integers quer.


Constraints:

nums.size() : ranges from 1 to 300000.
nums : ranges from 1 to nums.size().
quer.size() :  ranges from 1 to 300000.
quer : ranges from 2 to nums.size().

Output:

An vector of integers answer that contain the maximum number of people who can be satisfied in i-th a year if Velepin releases quer[j] books.


*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <limits>
#include <stdexcept>
#include <cassert>


std::vector<int> VelepinAndMarketing(std::vector<int> &nums,std::vector<int> &quer){
    if (nums.size() <= 0 or nums.size()>300000) {
        throw std::invalid_argument("vec length must be positive.");
    }
    for (int i = 0; i < nums.size(); ++i)
    {
        if (nums[i] < 1|| nums[i] > nums.size())
        {
            throw std::invalid_argument("Invalid element value");
        }
    }
    if (quer.size() <= 0 or quer.size()>300000) {
        throw std::invalid_argument("vec length must be positive.");
    }
    for (int i = 0; i < quer.size(); ++i)
    {
        if (quer[i] < 2|| quer[i] > nums.size())
        {
            throw std::invalid_argument("Invalid element value");
        }
    }
    int n=nums.size();    
    // Sort satisfaction thresholds in ascending order
    int inf = std::numeric_limits<int>::max();
    std::sort(nums.begin(), nums.end());

    std::vector<int> max_satisfied_readers(n + 1); 
    std::vector<int> dpp(n + 1, -inf);
    dpp[0] = 0;

    for (int i = 1; i <= n; ++i) {
        if (nums[i - 1] <= i) {
            dpp[i] = dpp[i - nums[i - 1]] + 1;
            max_satisfied_readers[dpp[i] + n - i] = std::max(max_satisfied_readers[dpp[i] + n - i], i);
        } else {
            if (nums[i - 1] <= n) {
                max_satisfied_readers[1 + n - nums[i - 1]] = std::max(max_satisfied_readers[1 + n - nums[i - 1]], i);
            }
        }
        dpp[i] = std::max(dpp[i], dpp[i - 1]);
    }

    for (int i = n - 1; i >= 0; --i) {
        max_satisfied_readers[i] = std::max(max_satisfied_readers[i], max_satisfied_readers[i + 1]);
    }
    std::vector<int> ans;
    for (int i = 0; i < quer.size(); ++i) {
        ans.push_back(max_satisfied_readers[quer[i]]);
    }
    return ans;
}



int main() {
    // TEST
    std::vector<int> nums_1 = {1, 2, 2, 2, 2};
    std::vector<int> quer_1 = {2, 3, 4};
    std::vector<int> expected_1 = {5, 5, 3};
    std::vector<int> result_1 = VelepinAndMarketing(nums_1, quer_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {3, 3, 3, 3, 3};
    std::vector<int> quer_2 = {2, 3, 5};
    std::vector<int> expected_2 = {4, 3, 0};
    std::vector<int> result_2 = VelepinAndMarketing(nums_2, quer_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {1, 1, 3, 2, 1};
    std::vector<int> quer_3 = {2, 2, 5};
    std::vector<int> expected_3 = {5, 5, 3};
    std::vector<int> result_3 = VelepinAndMarketing(nums_3, quer_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {2, 2, 2, 2, 2};
    std::vector<int> quer_4 = {2, 3, 4};
    std::vector<int> expected_4 = {5, 4, 2};
    std::vector<int> result_4 = VelepinAndMarketing(nums_4, quer_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {5, 4, 3, 2, 1};
    std::vector<int> quer_5 = {2, 2, 3};
    std::vector<int> expected_5 = {4, 4, 3};
    std::vector<int> result_5 = VelepinAndMarketing(nums_5, quer_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {3, 2, 1, 2, 3};
    std::vector<int> quer_6 = {2, 3, 4};
    std::vector<int> expected_6 = {5, 4, 3};
    std::vector<int> result_6 = VelepinAndMarketing(nums_6, quer_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    std::vector<int> quer_7 = {2, 2, 5, 10};
    std::vector<int> expected_7 = {10, 10, 10, 10};
    std::vector<int> result_7 = VelepinAndMarketing(nums_7, quer_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {4, 3, 3, 2, 1};
    std::vector<int> quer_8 = {2, 3, 5};
    std::vector<int> expected_8 = {5, 4, 1};
    std::vector<int> result_8 = VelepinAndMarketing(nums_8, quer_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    std::vector<int> nums_9 = {0, 3, 3, 2, 1};
    std::vector<int> quer_9 = {2, 3, 5};
    try
    {
        VelepinAndMarketing(nums_9,quer_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_10 = {10, 3, 3, 2, 1};
    std::vector<int> quer_10 = {2, 3, 5};
    try
    {
        VelepinAndMarketing(nums_10,quer_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_11 = {-1, 3, 3, 2, 1};
    std::vector<int> quer_11 = {2, 3, 5};
    try
    {
        VelepinAndMarketing(nums_11,quer_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_12 = {};
    std::vector<int> quer_12 = {2, 3, 5};
    try
    {
        VelepinAndMarketing(nums_12,quer_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_13 = {1};
    std::vector<int> quer_13 = {2, 3, 5};
    try
    {
        VelepinAndMarketing(nums_13,quer_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    std::vector<int> nums_14 = {1};
    std::vector<int> quer_14 = {};
    try
    {
        VelepinAndMarketing(nums_14,quer_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    std::vector<int> nums_15 = {1};
    std::vector<int> quer_15 = {-1};
    try
    {
        VelepinAndMarketing(nums_15,quer_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    std::cout << "All tests passed!" << std::endl;

    return 0;
}
