/*

https://codeforces.com/problemset/problem/1946/F


Write a C++ Solution NobodyIsNeeded to find the answers to all of Nechipor's questions.

Oleg received a permutation a of length len as a birthday present.

Oleg's friend Nechipor asks Oleg q_len questions, each question is characterized 
by two numbers l and r, in response to the question Oleg must say the number of sets 
of indices (t1,t2,…,tk) of any length k≥1 such that:

- l≤t[i]≤r for each i from 1 to k.
- t[i]<t[i+1] for each i from 1 to k−1.
- arr[t[i+1]] is divisible by arr[t[i]] for each i from 1 to k−1.

Help Oleg and answer all of Nechipor's questions.


Input :

A vector of integers arr.
A vector of vectors of integers query.

Constraints :

arr.size() , query.size() : ranges from 1 to 1000000.
arr : ranges from 1 to arr.size() , it is a permutation of size arr.size().
query : query[i][0] ranges from 1 to query[i][1], query[i][1] ranges from query[i][0] to arr.size().

Output:

An vector of integers ans that are output the answers to all of Nechipor's questions

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Use Fenwick tree template if required.

*/


#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <cassert>
#include <stdexcept>


template<class Info>
struct Fenwick {
    std::vector<Info> tree;
    int len;
    
    Fenwick(int len = 0) : len(len) {
        tree.resize(len);
    }
    
    void Add(int idx, const Info &val) {
        for (int i = idx + 1; i <= len; i += i & -i) {
            tree[i - 1] = tree[i - 1] + val;
        }
    }
    
    Info Sum(int idx) {
        idx++;
        Info res = Info();
        for (int i = idx; i > 0; i -= i & -i) {
            res = res + tree[i - 1];
        }
        return res;
    }
    
    Info RangeSum(int left, int right) {
        Info res = Sum(right) - Sum(left - 1);
        return res;
    }
};


std::vector<long long int> NobodyIsNeeded(std::vector<int> &arr,std::vector<std::vector<int>> query) {
    int len=arr.size(), q_len=query.size();
    std::set<int> per;
    if (len < 1 || len > 1000000) {
        throw std::invalid_argument("Invalid value of len: " + std::to_string(len) + ". It should be within the range 1 ≤ len ≤ 10^6.");
    }
    if (q_len < 1 || q_len > 1000000) {
        throw std::invalid_argument("Invalid value of q_len: " + std::to_string(q_len) + ". It should be within the range 1 ≤ q_len ≤ 10^6.");
    }
    for (int i = 0; i < len; ++i) {
        per.insert(arr[i]);
        if (arr[i] < 1 || arr[i] > len) {
            throw std::invalid_argument("Invalid value in arr: " + std::to_string(arr[i]) + ". It should be within the range 1 ≤ arr[i] ≤ len.");
        }
    }
    if(per.size()!=len){
        throw std::invalid_argument("Invalid Permutation arr");
    }
    for (std::vector<int>& it : query) {
        int left = it[0];
        int right = it[1];
        if (left < 1 || left > right || right > len) {
            throw std::invalid_argument("Invalid it: (" + std::to_string(left) + ", " + std::to_string(right) + "). It should satisfy 1 ≤ left ≤ right ≤ len.");
        }
    }
    std::vector<int> pos(len + 1);
    std::reverse(arr.begin(), arr.end());
    for (int i = 0; i < len; i++) {
        pos[arr[i]] = i;
    }
    std::vector<long long int> res(q_len);
    std::vector<std::vector<std::pair<int, int>>> qry(len);
    for (int i = 0; i < q_len; i++) {
        int left=query[i][0], right=query[i][1];;
        left--, right--;
        std::swap(left, right);
        left = len - left - 1;
        right = len - right - 1;
        qry[right].emplace_back(left, i);
    }
    std::vector<long long int> dp_table(len + 1);
    Fenwick<long long int> fnwk_tree(len);
    for (int right = 0; right < len; right++) {
        int idx = arr[right];
        dp_table[idx] = 1;
        for (int y = idx; y <= len; y += idx) {
            if (pos[y] > pos[idx]) {
                continue;
            }
            for (int z = 2 * y; z <= len; z += y) {
                if (pos[z] > pos[y]) {
                    continue;
                }
                dp_table[z] += dp_table[y];
            }
        }
        for (int y = idx; y <= len; y += idx) {
            fnwk_tree.Add(pos[y], dp_table[y]);
            dp_table[y] = 0;
        }
        for (std::pair<int,int> it : qry[right]) {
            int left=it.first;
            int i=it.second;
            res[i] += fnwk_tree.RangeSum(left, right);
        }
    }
    return res;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <stdexcept>

int main() {
    // TEST
    std::vector<int> arr_1 = {1,2,3,4,5,6,7,8};
    std::vector<std::vector<int>> query_1 = {{1, 8}};
    std::vector<long long int> expected_1 = {27};
    std::vector<long long int> result_1 = NobodyIsNeeded(arr_1, query_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> arr_2 = {2, 1, 3};
    std::vector<std::vector<int>> query_2 = {{1, 3}};
    std::vector<long long int> expected_2 = {4};
    std::vector<long long int> result_2 = NobodyIsNeeded(arr_2, query_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> arr_3 = {3, 2, 1};
    std::vector<std::vector<int>> query_3 = {{1, 2}, {2, 3}, {1, 3}};
    std::vector<long long int> expected_3 = {2,2,3};
    std::vector<long long int> result_3 = NobodyIsNeeded(arr_3, query_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> arr_4 = {3, 4, 1, 2};
    std::vector<std::vector<int>> query_4 = {{1, 2}, {3, 4}, {1, 4}};
    std::vector<long long int> expected_4 = {2,3,5};
    std::vector<long long int> result_4 = NobodyIsNeeded(arr_4, query_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> arr_5 = {5, 2, 1, 3, 4};
    std::vector<std::vector<int>> query_5 = {{1, 3}, {2, 4}, {1, 5}};
    std::vector<long long int> expected_5 ={3,4,8};
    std::vector<long long int> result_5 = NobodyIsNeeded(arr_5, query_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> arr_6 = {1, 3, 5, 4, 2};
    std::vector<std::vector<int>> query_6 = {{1, 5}, {2, 4}, {2, 3}};
    std::vector<long long int> expected_6 = {9,3,2};
    std::vector<long long int> result_6 = NobodyIsNeeded(arr_6, query_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> arr_7 = {5, 4, 3, 2, 1};
    std::vector<std::vector<int>> query_7 = {{1, 2}, {3, 4}, {2, 5}};
    std::vector<long long int> expected_7 = {2,2,4};
    std::vector<long long int> result_7 = NobodyIsNeeded(arr_7, query_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> arr_8 = {1, 5, 4, 3, 2};
    std::vector<std::vector<int>> query_8 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    std::vector<long long int> expected_8 = {3,2,2,2};
    std::vector<long long int> result_8 = NobodyIsNeeded(arr_8, query_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    std::vector<int> arr_9 = {1, 0, 4, 3, 2};
    std::vector<std::vector<int>> query_9 = {{1, 2}, {2, 2}, {3, 4}, {4, 5}};
    try
    {
        NobodyIsNeeded(arr_9, query_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_10 = {1, 1000000004, 4, 3, 2};
    std::vector<std::vector<int>> query_10 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    try
    {
        NobodyIsNeeded(arr_10, query_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_11 = {1, 5, -4, 3, 2};
    std::vector<std::vector<int>> query_11 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    try
    {
        NobodyIsNeeded(arr_11, query_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_12 = {};
    std::vector<std::vector<int>> query_12 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};

    try
    {
        NobodyIsNeeded(arr_12, query_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_13(400000,5);
    std::vector<std::vector<int>> query_13 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};

    try
    {
        NobodyIsNeeded(arr_13, query_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_14(4,1);
    std::vector<std::vector<int>> query_14 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    try
    {
        NobodyIsNeeded(arr_14, query_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_15(1,1);
    std::vector<std::vector<int>> query_15 = {{1, 1}, {2, 3}, {3, 4}, {4, 5}};
    try
    {
        NobodyIsNeeded(arr_15, query_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_16(1,1);
    std::vector<std::vector<int>> query_16 = {{1, 1}, {2, 3}, {3, 4}, {4, 5}};
    try
    {
        NobodyIsNeeded(arr_16, query_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_17(1,1);
    std::vector<std::vector<int>> query_17 = {{1,0}};
    try
    {
        NobodyIsNeeded(arr_17, query_17);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_18(1,1);
    std::vector<std::vector<int>> query_18(500000,{1,2});
    try
    {
        NobodyIsNeeded(arr_18, query_18);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_19(1,1);
    std::vector<std::vector<int>> query_19(5,{2,1});
    try
    {
        NobodyIsNeeded(arr_19, query_19);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> arr_20(1,1);
    std::vector<std::vector<int>> query_20(5,{1,-1});
    try
    {
        NobodyIsNeeded(arr_20, query_20);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
