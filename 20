// https://codeforces.com/problemset/problem/484/C

#include <iostream>
#include <vector>
#include <cstring>
#include <cassert>
#include <cstdio>

std::vector<std::string> StrangeSorting(std::string &str,std::vector<std::vector<int>> queries){
    
    int q_len=queries.size();
    int len = str.size();
    if (len <= 0 or len>200000 or q_len<=0 or q_len>200000) {
        throw std::invalid_argument("Invalid Length.");
    }
    for(int i=0;i<len;i++){
        if(str[i]>'z' or str[i]<'a'){
            throw std::invalid_argument("Invalid Str.");
        }
    }
    for(int i=0;i<q_len;i++){
        int left=queries[i][0];
        int right=queries[i][1];
        if(left<1 or right<1 or left>len or right>len){
            throw std::invalid_argument("Invalid Queries");
        }
    }
    std::vector<int> lrr(len+1), crr(len+1), prr(len+1), xrr(len+1), trr(len+1);
    for (int i = 0; i < len; i++)
        lrr[i] = (len + i - 1) % len;
    std::vector<std::string> ans;
    for(int i=0;i<q_len;i++) {
        int krr=queries[i][0],drr=queries[i][1],bee;
        for (int i = 0; i < len; i++)
            crr[i] = i;
        int right = 0;
        for (int i = 0; i < drr; i++)
            for (int j = i; j < krr; j += drr)
                crr[j] = right++;
        for (int i = 0; i < len; i++)
            prr[i] = crr[i];
        for (int i = 0; i < len; i++)
            xrr[i] = crr[lrr[i]];
        bee = len - krr;
        while (bee) {
            if (bee & 1) {
                for (int i = 0; i < len; i++)
                    prr[i] = xrr[prr[i]];
            }
            for (int i = 0; i < len; i++)
                trr[i] = xrr[xrr[i]];
            for (int i = 0; i < len; i++)
                xrr[i] = trr[i];
            bee >>= 1;
        }
        for (int i = 0; i < len; i++)
            trr[prr[i]] = str[i];
        for (int i = 0; i < len; i++)
            str[(i + len - krr) % len] = trr[i];
        ans.push_back(str);
    }
    return ans;
}


int main() {
    // TEST
    std::string str_1 = "abcaaa";
    std::vector<std::vector<int>> queries_1 = {{2, 4}, {1, 5}, {3, 5}};
    std::vector<std::string> expected_1 = {"abcaaa","abcaaa","abcaaa"};
    std::vector<std::string> result_1 = StrangeSorting(str_1, queries_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::string str_2 = "abjkds";
    std::vector<std::vector<int>> queries_2 = {{1, 3}, {2, 4}, {1, 5}};
    std::vector<std::string> expected_2 = {"abjkds","abjkds","abjkds"};
    std::vector<std::string> result_2 = StrangeSorting(str_2, queries_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::string str_3 = "querty";
    std::vector<std::vector<int>> queries_3 = {{4,2}, {6,3}, {5,2}};
    std::vector<std::string> expected_3 = {"qertuy","qteury","qetyru"};
    std::vector<std::string> result_3 = StrangeSorting(str_3, queries_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::string str_4 = "abcfe";
    std::vector<std::vector<int>> queries_4 = {{5, 1}, {4, 3}, {4, 5}};
    std::vector<std::string> expected_4 = {"abcfe","afebc","afebc"};
    std::vector<std::string> result_4 = StrangeSorting(str_4, queries_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::string str_5 = "vfznf";
    std::vector<std::vector<int>> queries_5 = {{1, 4}, {2, 5}, {3, 5}};
    std::vector<std::string> expected_5 = {"vfznf","vfznf","vfznf"};
    std::vector<std::string> result_5 = StrangeSorting(str_5, queries_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::string str_6 = "gdnffbdbd";
    std::vector<std::vector<int>> queries_6 = {{1, 8}, {2, 7}, {3, 6}};
    std::vector<std::string> expected_6 = {"gdnffbdbd","gdnffbdbd","gdnffbdbd"};
    std::vector<std::string> result_6 = StrangeSorting(str_6, queries_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::string str_7 = "fjvfnknkj";
    std::vector<std::vector<int>> queries_7 = {{1, 8}, {1, 4}, {5, 8}};
    std::vector<std::string> expected_7 = {"fjvfnknkj","fjvfnknkj","fjvfnknkj"};
    std::vector<std::string> result_7 = StrangeSorting(str_7, queries_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::string str_8 = "vfkkfndkjvn";
    std::vector<std::vector<int>> queries_8 = {{1, 9}, {2, 8}, {3, 7}};
    std::vector<std::string> expected_8 = {"vfkkfndkjvn","vfkkfndkjvn","vfkkfndkjvn"};
    std::vector<std::string> result_8 = StrangeSorting(str_8, queries_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::string str_9 = "";
    std::vector<std::vector<int>> queries_9 = {{1, 9}, {2, 9}, {3, 7}};
    try
    {
        StrangeSorting(str_9, queries_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_10 = "10";
    std::vector<std::vector<int>> queries_10 = {{1, 10}, {2, 10}, {3, 7}};
    try
    {
        StrangeSorting(str_10, queries_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_11 = std::string(200002,'1');
    std::vector<std::vector<int>> queries_11 = {{1, 11}, {2, 11}, {3, 7}};
    try
    {
        StrangeSorting(str_11, queries_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_12 = std::string(2,'1');
    std::vector<std::vector<int>> queries_12 = {{1, 12}, {2, 12}, {3, 7}};
    try
    {
        StrangeSorting(str_12, queries_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_13 = "abbb";
    std::vector<std::vector<int>> queries_13 = {{1, -13}, {2, 13}, {3, 7}};
    try
    {
        StrangeSorting(str_13, queries_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_14 = std::string(2,'aaa');
    std::vector<std::vector<int>> queries_14(200002,{1,1});
    try
    {
        StrangeSorting(str_14, queries_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!" << std::endl;
    return 0;
}
