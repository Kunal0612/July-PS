// https://codeforces.com/problemset/problem/1016/G

#include <iostream>
#include <vector>
#include <cmath>
#include <cassert>
#include <algorithm>
#include <iomanip>
#include <stdexcept>



long long GCD(long long first, long long second)
{
    while (first > 0)
    {
        second %= first;
        std::swap(first, second);
    }
    return second;
}

std::vector<std::pair<long long, long long>> Factorize(long long num, const std::vector<long long> &cnd)
{
    std::vector<std::pair<long long, long long>> prime_div;
    for (long long xec = 2; xec <= 1'000'000 && xec * xec <= num; xec++)
    {
        int cnt = 0;
        while (num % xec == 0)
        {
            num /= xec, cnt++;
        }
        if (cnt > 0)
        {
            prime_div.emplace_back(xec, cnt);
        }
    }
    if (num > 1)
    {
        for (long long s = std::max(1ll, (long long)std::sqrt(num) - 2); s * s <= num; s++)
            if (s * s == num)
            {
                prime_div.emplace_back(s, 2);
                num = 1;
                break;
            }
        if (num > 1)
        {
            for (long long c : cnd)
            {
                long long gcd = GCD(num, c);
                if (gcd != 1 && gcd != num)
                {
                    long long first = gcd, sec = num / gcd;
                    if (first > sec){
                        std::swap(first, sec);
                    }
                    prime_div.emplace_back(first, 1);
                    prime_div.emplace_back(sec, 1);
                    num = 1;
                    break;
                }
            }
            if (num > 1){
                prime_div.emplace_back(num, 1), num = 1;
            }
        }
    }
    return prime_div;
}

/*
Input :

An integer num.
An long long integer xec.
An long long integer yec.
A vector of long long integer arr.


Constraints :

num : ranges from 1 to 200000.
xec : ranges from 1 to yec.
yec : ranges from xec+1 to 10^18.
arr : ranges froom 1 to 10^18.


*/


int AppropriateTeam(int num, long long xec, long long yec, std::vector<long long> &arr)
{
    
    if (num < 1 || num > 200000) {
        throw std::invalid_argument("Invalid value for n. It should be 1 ≤ n ≤ 2 * 10^5.");
    }
    if (xec < 1 || xec > yec || yec > 1000000000000000000LL) {
        throw std::invalid_argument("Invalid values for X and Y. It should be 1 ≤ X ≤ Y ≤ 10^18.");
    }

    for (long long it : arr) {
        if (it < 1 || it > 1000000000000000000LL) {
            throw std::invalid_argument("Invalid value for arr[i]. It should be 1 ≤ arr[i] ≤ 10^18.");
        }
    }
    if (yec % xec != 0)
    {
        return 0;
    }

    std::vector<std::pair<long long, long long>> prime_y = Factorize(yec, std::vector<long long>(arr.begin(), arr.end()));
    std::vector<std::pair<long long, long long>> prime_x;
    long long cxec = xec;
    for (auto p : prime_y)
    {
        int cnt = 0;
        while (cxec % p.first == 0){
            cxec /= p.first, cnt++;
        }
        prime_x.emplace_back(p.first, cnt);
    }

    std::vector<long long> psec;
    std::vector<std::pair<long long, long long>> brr;

    for (int i = 0; i < prime_y.size(); i++)
    {
        if (prime_x[i].second < prime_y[i].second)
        {
            psec.push_back(prime_y[i].first);
            brr.emplace_back(prime_x[i].second, prime_y[i].second);
        }
    }

    std::vector<int> res((1 << 18) + 3, 0);

    for (int i = 0; i < num; i++)
    {
        if (arr[i] % xec != 0){
            continue;
        }
        int mask = 0;
        long long csec = arr[i];
        for (int j = 0; j < psec.size(); j++)
        {
            int cnt = 0;
            while (csec % psec[j] == 0){
                csec /= psec[j], cnt++;
            }
            assert(cnt >= brr[j].first);
            mask |= (cnt > brr[j].first) << j;
        }
        res[mask]++;
    }

    for (int i = 0; i < psec.size(); i++)
    {
        for (int mask = 0; mask < (1 << psec.size()); mask++)
        {
            if ((mask >> i) & 1){
                res[mask] += res[mask ^ (1 << i)];
            }
        }
    }

    long long ans = 0;
    for (int i = 0; i < num; i++)
    {
        if (yec % arr[i] != 0){
            continue;
        }
        int mask = 0;
        long long csec = arr[i];
        for (int j = 0; j < psec.size(); j++)
        {
            int cnt = 0;
            while (csec % psec[j] == 0){
                csec /= psec[j], cnt++;
            }
            assert(cnt <= brr[j].second);
            mask |= (cnt < brr[j].second) << j;
        }
        int r = psec.size();
        ans += res[mask ^ ((1 << r) - 1)];
    }
    return ans;
}


#include <iostream>
#include <vector>
#include <cmath>
#include <cassert>
#include <algorithm>
#include <iomanip>
#include <stdexcept>


int main()
{
    int num;
    long long xec, yec;
    std::cin >> num >> xec >> yec;
    std::vector<long long> arr(num);
    for (int i = 0; i < num; i++)
    {
        std::cin >> arr[i];
    }
    int ans=AppropriateTeam(num, xec, yec, arr);
    std::cout << ans << std::endl;
    return 0;
}
