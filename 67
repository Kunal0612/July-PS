/*

https://codeforces.com/problemset/problem/875/E

Write a C++ Solution DeliveryClub to determine the minimum possible maximal 
distance between couriers during delivery.

Petya and Vasya got employed as couriers. During the working day they are to 
deliver packages to len different points on the line. According to the company's 
internal rules, the delivery of packages must be carried out strictly in a certain order. 
Initially, Petya is at the point with the coordinate start_a, Vasya is at the point with 
the coordinate start_b, and the clients are at the points nums_1, nums_2, ..., nums_n in 
the order of the required visit.

The guys agree in advance who of them will deliver the package to which of the customers, 
and then they act as follows. When the package for the i-th client is delivered, the one 
who delivers the package to the (i + 1)-st client is sent to the path (it can be the same 
person who went to the point nums_i, or the other). The friend who is not busy in delivering the current package, is standing still.

To communicate with each other, the guys have got walkie-talkies. The walkie-talkies work 
rather poorly at great distances, so Petya and Vasya want to distribute the orders so that 
the maximum distance between them during the day is as low as possible. Help Petya and Vasya 
to minimize the maximum distance between them, observing all delivery rules.

Input :

An integer start_a
An integer start_b
A vector of integer nums

Output:

An integer ans to determine the minimum possible maximal distance between couriers during delivery.

Constraints :

start_a : ranges from 0 to 1000000000.
start_b : ranges from 0 to 1000000000.
nums : ranges from 0 to 1000000000.
nums.size() : ranges from 1 to 100000.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.


*/


#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cstdio>
#include <cassert>
#include <stdexcept>

int check(int nums, int start_a, int start_b, const std::vector<int>& arr) {
    std::set<int> points{start_a, start_b};
    for (int i = 1; i <= arr.size(); i++) {
        points.erase(points.begin(), points.lower_bound(arr[i - 1] - nums));
        points.erase(points.upper_bound(arr[i - 1] + nums), points.end());
        if (points.empty()){
            return false;
        }
        points.insert(arr[i - 1]);
    }
    return std::abs(start_a - start_b) <= nums;
}


int DeliveryClub(int start_a, int start_b, const std::vector<int> nums){
    int len=nums.size();
    if(start_a<0 || start_a>1000000000 || start_b<0 || start_b>1000000000){
        throw std::invalid_argument("Invalid Constraints");
    }
    if(nums.size()<1 || nums.size()>100000){
        throw std::invalid_argument("Invalid Constraints");
    }
    for(int i=0;i<nums.size();i++){
        if(nums[i]<0 || nums[i]>1000000000){
            throw std::invalid_argument("Invalid nums");
        }
    }
    int left = 0, right = 1e9;
    while (left < right) {
        int mid = (left + right) >> 1;
        if (!check(mid, start_a, start_b, nums)){
            left = mid + 1;
        }
        else right = mid;
    }
    int ans=left;
    return ans;
}

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cstdio>
#include <cassert>
#include <stdexcept>


int main()
{
    // TEST
    int start_a_1 = 0;
    int start_b_1 = 10;
    std::vector<int> nums_1 = {5,6};
    int expected_1 = 10;
    int result_1 = DeliveryClub(start_a_1, start_b_1, nums_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int start_a_2 = 5;
    int start_b_2 = 15;
    std::vector<int> nums_2 = {2, 3, 4, 5, 6};
    int expected_2 = 10;
    int result_2 = DeliveryClub(start_a_2, start_b_2, nums_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int start_a_3 = 3;
    int start_b_3 = 8;
    std::vector<int> nums_3 = {1, 4, 6};
    int expected_3 = 5;
    int result_3 = DeliveryClub(start_a_3, start_b_3, nums_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int start_a_4 = 6;
    int start_b_4 = 20;
    std::vector<int> nums_4 = {2, 5, 10, 15, 18, 20};
    int expected_4 = 14;
    int result_4 = DeliveryClub(start_a_4, start_b_4, nums_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int start_a_5 = 7;
    int start_b_5 = 25;
    std::vector<int> nums_5 = {1, 3, 5, 7, 9, 11, 13};
    int expected_5 = 18;
    int result_5 = DeliveryClub(start_a_5, start_b_5, nums_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int start_a_6 = 2;
    int start_b_6 = 5;
    std::vector<int> nums_6 = {2, 4};
    int expected_6 = 3;
    int result_6 = DeliveryClub(start_a_6, start_b_6, nums_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int start_a_7 = 10;
    int start_b_7 = 50;
    std::vector<int> nums_7 = {5, 10, 15, 20, 25, 30, 35, 40, 45, 50};
    int expected_7 = 40;
    int result_7 = DeliveryClub(start_a_7, start_b_7, nums_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int start_a_8 = 8;
    int start_b_8 = 12;
    std::vector<int> nums_8 = {2, 4, 6, 8, 10, 12, 1, 3};
    int expected_8 = 6;
    int result_8 = DeliveryClub(start_a_8, start_b_8, nums_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int start_a_9 = 1000000009;
    int start_b_9 = 12;
    std::vector<int> nums_9 = {2, 4, 6, 9, 10, 12, 1, 3};
    try
    {
        DeliveryClub(start_a_9, start_b_9, nums_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int start_a_10 = -1;
    int start_b_10 = 12;
    std::vector<int> nums_10 = {2, 4, 6, 9, 10, 12, 1, 3};
    try
    {
        DeliveryClub(start_a_10, start_b_10, nums_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int start_a_11 = 2005;
    int start_b_11 = 1200000008;
    std::vector<int> nums_11 = {2, 4, 6, 9, 10, 12, 1, 3};
    try
    {
        DeliveryClub(start_a_11, start_b_11, nums_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int start_a_12 = 8;
    int start_b_12 = -1;
    std::vector<int> nums_12 = {2, 4, 6, 9, 10, 12, 1, 3};
    try
    {
        DeliveryClub(start_a_12, start_b_12, nums_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int start_a_13 = 8;
    int start_b_13 = -1;
    std::vector<int> nums_13 = {2, 4, 6, 9, 10, 13, 1, 3};
    try
    {
        DeliveryClub(start_a_13, start_b_13, nums_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int start_a_14 = 8;
    int start_b_14 = -2;
    std::vector<int> nums_14 = {2, 4, 6, 9, 10, 14, 1, 3};
    try
    {
        DeliveryClub(start_a_14, start_b_14, nums_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int start_a_15 = 8;
    int start_b_15 = 5;
    std::vector<int> nums_15 = {2, 4, 6, 9, -5, 1, 3};
    try
    {
        DeliveryClub(start_a_15, start_b_15, nums_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int start_a_16 = 8;
    int start_b_16 = 5;
    std::vector<int> nums_16 = {2, 1000000005, 6, 9, 16, 1, 3,200};
    try
    {
        DeliveryClub(start_a_16, start_b_16, nums_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int start_a_17 = 8;
    int start_b_17 = 5;
    std::vector<int> nums_17 = {2, 4, 0, 0, -44, 1, 3,0};
    try
    {
        DeliveryClub(start_a_17, start_b_17, nums_17);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int start_a_18 = 8;
    int start_b_18 = 5;
    std::vector<int> nums_18(400000,5);
    try
    {
        DeliveryClub(start_a_18, start_b_18, nums_18);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int start_a_19 = 8;
    int start_b_19 = 5;
    std::vector<int> nums_19 = {};
    try
    {
        DeliveryClub(start_a_19, start_b_19, nums_19);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
