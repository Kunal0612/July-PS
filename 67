// https://codeforces.com/problemset/problem/875/E



#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cstdio>

bool check(int length, int start_a, int start_b, const std::vector<int>& arr) {
    std::set<int> points{start_a, start_b};
    for (int i = 1; i <= arr.size(); i++) {
        points.erase(points.begin(), points.lower_bound(arr[i - 1] - length));
        points.erase(points.upper_bound(arr[i - 1] + length), points.end());
        if (points.empty()){
            return false;
        }
        points.insert(arr[i - 1]);
    }
    return std::abs(start_a - start_b) <= length;
}

/*
Input :

An integer start_a
An integer start_b
A vector of integer nums

Constraints :

start_a : ranges from 0 to 1000000000.
start_b : ranges from 0 to 1000000000.
nums : ranges from 0 to 1000000000.
nums.size() : ranges from 1 to 100000.

*/

int DeliveryClub(int start_a, int start_b, const std::vector<int> nums){
    if(start_a<0 || start_a>1000000000 || start_b<0 || start_b>1000000000){
        throw std::invalid_argument("Invalid Constraints");
    }
    if(nums.size()<1 || nums.size()>100000){
        throw std::invalid_argument("Invalid Constraints");
    }
    for(int i=0;i<nums.size();i++){
        if(nums[i]<0 || nums[i]>1000000000){
            throw std::invalid_argument("Invalid nums");
        }
    }
    int left = 0, right = 1e9;
    while (left < right) {
        int mid = (left + right) >> 1;
        if (!check(mid, start_a, start_b, nums)) left = mid + 1;
        else right = mid;
    }

}

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cstdio>


int main() {
    std::cout << "All test cases passed!\n";
    return 0;
}
