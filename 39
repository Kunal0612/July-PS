/*

https://codeforces.com/problemset/problem/1891/E

Write a C++ Solution BrukhovichAndExams to find the minimum possible sadness 
that can be achieved by performing no more than k_value operations.


In the bustling Academy of Arcana, Smilo, a young boy with a mop of unruly brown 
hair and eyes that sparkled with curiosity, was on a quest to master the art of 
algorithms. His guide on this journey was Brukhovich, a wizened old mage with 
a beard that resembled a tangled forest and a twinkle in his eye that promised 
both wisdom and mischief.

Over the year, Brukhovich had crafted a series of len exams, each a portal to 
a new level of algorithmic understanding. Each exam had a difficulty level, 
represented as a non-negative integer nums, signifying the complexity of the 
challenges Smilo would face within.

However, Smilo wasn't just any student. He was particularly susceptible to a 
peculiar affliction - "The Sadness of Sudden Shifts." When the difficulty 
levels of consecutive exams had no common ground (their greatest common divisor, or GCD, was 1), 
it sent Smilo's spirits plummeting. These sudden jumps or drops in difficulty 
left him flustered and frustrated, making the learning process a bumpy road.

Brukhovich, a teacher with a heart as big as his beard, couldn't bear to see 
his student suffer. He devised a plan. As a master of manipulation, he 
possessed the power to alter the difficulty of any exam by setting it to 
zero. However, he didn't want to make Smilo's journey a cakewalk. Therefore, 
he limited himself to performing this magic trick a maximum of k_value times.

Here's where you, the legendary problem solver, come in! Your task was to help 
Brukhovich strategize. You needed to determine the minimum number of exams 
Brukhovich had to adjust to zero (using at most k_value adjustments) such that no 
consecutive exams would have a GCD of 1. This would pave the way for a smooth 
learning journey for Smilo, minimizing his "Sadness of Sudden Shifts" and 
allowing him to conquer the world of algorithms with confidence.

With your ingenious plan in hand, Brukhovich could finally put his magic to 
good use. By strategically setting the difficulty of some exams to zero, 
he would create a seamless progression of challenges for Smilo. No longer 
would Smilo be thrown off balance by drastic difficulty changes. Instead, 
he would be able to approach each exam with a steady mind and a determined 
spirit, ensuring his path to algorithmic mastery was filled with excitement 
and steady growth.


Input:

An integer k_value.
An vector of integer nums.

Output:

An integer result contains the minimum possible sadness that can be achieved by performing no more than k operations.

Constraints:

k_value : ranges from 1 to nums.size().
nums.size() : ranges from k_value to 100000.
nums : ranges from 1 to 1000000000.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.


*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <stdexcept>


int Gcd(int first, int sec) {
    while (sec != 0) {
        int temp = sec;
        sec = first % sec;
        first = temp;
    }
    return first;
}

int BrukhovichAndExams(std::vector<int> nums,int k_value) {
    if(k_value>nums.size() or k_value<0 or nums.size()>100000){
        throw std::invalid_argument("Invalis Constraints");
    }
    for (int i = 0; i < nums.size(); ++i)
    {
        if (nums[i] < 0 || nums[i] > 1000000000)
        {
            throw std::invalid_argument("Invalid nums value");
        }
    }
    int len=nums.size();
    std::vector<int> array(len + 1);
    bool all_ones = true;
    for (int i = 1; i <= len; ++i) {
        array[i] = nums[i-1];
        if (array[i] != 1){
            all_ones = false;
        }
    }

    if (all_ones) {
        int ans=len - k_value;
        return ans; 
    }

    int left = 1, count_two = 0, count_one = 0, total_count = 0;
    std::vector<int> result_array(len + 1, 0);
    std::vector<int> res(len + 1, 0);
    result_array[0] = 0;

    for (int i = 1; i <= len; ++i) {
        if (i != 1 && Gcd(array[i - 1], array[i]) == 1) {
            ++result_array[0];
        }
        if (array[i] == 1 && array[i + 1] != 1) {
            int length = i - left + 1;
            if (left == 1 || i == len) {
                count_one += length;
            }
            else {
                res[++total_count] = length;
            }
            left = i + 1;
        } 
        else if (Gcd(array[i], array[i + 1]) != 1 || (array[i + 1] == 1 && array[i] != 1)) {
            int length = i - left;
            count_two += length / 2;
            count_one += length % 2;
            left = i + 1;
        }
    }

    std::sort(res.begin() + 1, res.begin() + total_count + 1);

    for (int i = 1; i <= count_two; ++i){
        result_array[i] = result_array[i - 1] - 2;
    }
    int current_count = count_two;

    for (int i = 1; i <= total_count; ++i) {
        for (int j = 1; j < res[i]; ++j) {
            result_array[current_count + 1] = result_array[current_count] - 1;
            ++current_count;
        }
        result_array[current_count + 1] = result_array[current_count] - 2;
        ++current_count;
    }

    for (int i = 1; i <= count_one; ++i) {
        result_array[current_count + i] = result_array[current_count + i - 1] - 1;
    }

    int ans=result_array[k_value];
    return ans;
}


#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <stdexcept>

int main() {
    // TEST
    int k_value_1 = 3;
    std::vector<int> nums_1 = {1,1,1,1,1};
    int expected_1 = 2;
    int result_1 = BrukhovichAndExams(nums_1, k_value_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int k_value_2 = 2;
    std::vector<int> nums_2 = {3,5,7,9,11};
    int expected_2 = 0;
    int result_2 = BrukhovichAndExams(nums_2, k_value_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int k_value_3 = 2;
    std::vector<int> nums_3 = {2, 4, 8, 16};
    int expected_3 = 0;
    int result_3 = BrukhovichAndExams(nums_3, k_value_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int k_value_4 = 4;
    std::vector<int> nums_4 = {1, 5, 10, 20};
    int expected_4 = 0;
    int result_4 = BrukhovichAndExams(nums_4, k_value_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int k_value_5 = 2;
    std::vector<int> nums_5 = {1,1,1,1,2};
    int expected_5 = 2;
    int result_5 = BrukhovichAndExams(nums_5, k_value_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int k_value_6 = 3;
    std::vector<int> nums_6 = {2, 3, 5, 7, 11, 13, 17, 19};
    int expected_6 = 1;
    int result_6 = BrukhovichAndExams(nums_6, k_value_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int k_value_7 = 4;
    std::vector<int> nums_7 = {5, 10, 20, 25, 30};
    int expected_7 = 0;
    int result_7 = BrukhovichAndExams(nums_7, k_value_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int k_value_8 = 5;
    std::vector<int> nums_8 = {1, 1,2,3,4};
    int expected_8 = 0;
    int result_8 = BrukhovichAndExams(nums_8, k_value_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int k_value_9 = 505;
    std::vector<int> nums_9 = {1, 2, 4, 9, 16, 32};
    try
    {
        BrukhovichAndExams(nums_9, k_value_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int k_value_10 = 10;
    std::vector<int> nums_10 = {1, 2, 4, 10, 16, 32};
    try
    {
        BrukhovichAndExams(nums_10, k_value_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int k_value_11 = -1;
    std::vector<int> nums_11 = {1, 2, 4, 11, 16, 32};
    try
    {
        BrukhovichAndExams(nums_11, k_value_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int k_value_12 = 200;
    std::vector<int> nums_12 = {};
    try
    {
        BrukhovichAndExams(nums_12, k_value_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int k_value_13 = 200;
    std::vector<int> nums_13 = {1,202};
    try
    {
        BrukhovichAndExams(nums_13, k_value_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int k_value_14 = 200;
    std::vector<int> nums_14 = {1,-2};
    try
    {
        BrukhovichAndExams(nums_14, k_value_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int k_value_15 = 200;
    std::vector<int> nums_15(200000,1);
    try
    {
        BrukhovichAndExams(nums_15, k_value_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout<<"All tests passed."<<std::endl;
    return 0;
}
