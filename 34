/*

https://codeforces.com/problemset/problem/1854/C

Write a C++ Solution ExpectedDestruction to find the expected 
number of seconds until nums is empty, modulo 1000000007,instead.


You are given a set nums containing n distinct integers between 1 and m. 
In each second, you perform the following steps:

Pick an element: Choose an element x from nums uniformly at random 
(all elements have an equal chance of being chosen).

Remove the element: Remove the chosen element x from the set nums.

Add potential successor: If x + 1 is less than or equal to m (upper bound) 
and x + 1 is not currently in nums, add x + 1 to nums.

The task is to find the expected number of seconds it takes for the set 
nums to become empty using this process.


Input:

An integer bound.
A vector of integers nums.

Output:

An integer ans to find the expected number of seconds until nums is empty, 
modulo 1000000007,instead.

Constraints:

bound : ranges from 1 to 500.
nums.size() : ranges from 1 to nums.size().
nums : ranges from 1 to bound and are in increasing order.


Use appropriate Error Handling using the stdexcept library for the invalid test cases.

*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <limits>
#include <stdexcept>
#include <cassert>


int ExpectedDestruction(std::vector<int> nums,int bound){
    if(nums.size()>bound or bound>500 or nums.size()<1 or bound<1){
        throw std::invalid_argument("Invalid Constraints");
    }
    for(int i=0;i<nums.size()-1;i++){
        if(nums[i]>=nums[i+1] or nums[i]>bound or nums[i+1]>bound){
            throw std::invalid_argument("Invalid nums array");
        }
    }
    int mod = 1e9 + 7;
    int mx_range = 505;
    int len=nums.size();
    std::vector<std::vector<int>> dp_table(mx_range, std::vector<int>(mx_range, 0));
    long long ans = 0;
    for (int i = bound; i >= 1; i--) {
        dp_table[i][bound+1] = bound - i + 1;
        for (int j = bound; j > i; j--) {
            dp_table[i][j] = (500000004LL * (dp_table[i+1][j] + dp_table[i][j+1] + 1)) % mod;
        }
    }

    std::vector<int> arr(len + 2);
    for (int i = 1; i <= len; i++) {
        arr[i]=nums[i-1];
    }
    arr[len + 1] = bound + 1;

    for (int i = 1; i <= len; i++) {
        ans = (ans + dp_table[arr[i]][arr[i+1]]) % mod;
    }

    return ans;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <limits>
#include <stdexcept>
#include <cassert>

int main() {
    // TEST
    int bound_1 = 10;
    std::vector<int> nums_1 = {1, 2, 3, 4, 5};
    int expected_1 = 300277731;
    int result_1 = ExpectedDestruction(nums_1, bound_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int bound_2 = 15;
    std::vector<int> nums_2 = {1, 3, 6, 10, 15};
    int expected_2 = 849113205;
    int result_2 = ExpectedDestruction(nums_2, bound_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int bound_3 = 20;
    std::vector<int> nums_3 = {2, 4, 8, 16};
    int expected_3 = 908780695;
    int result_3 = ExpectedDestruction(nums_3, bound_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int bound_4 = 25;
    std::vector<int> nums_4 = {1, 5, 10, 20};
    int expected_4 = 186440123;
    int result_4 = ExpectedDestruction(nums_4, bound_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int bound_5 = 30;
    std::vector<int> nums_5 = {3, 6, 9, 12, 15, 18};
    int expected_5 = 309845677;
    int result_5 = ExpectedDestruction(nums_5, bound_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int bound_6 = 35;
    std::vector<int> nums_6 = {2, 3, 5, 7, 11, 13, 17, 19};
    int expected_6 = 365458036;
    int result_6 = ExpectedDestruction(nums_6, bound_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int bound_7 = 40;
    std::vector<int> nums_7 = {5, 10, 20, 25, 30};
    int expected_7 = 980384273;
    int result_7 = ExpectedDestruction(nums_7, bound_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int bound_8 = 50;
    std::vector<int> nums_8 = {1, 2, 4, 8, 16, 32};
    int expected_8 = 619956619;
    int result_8 = ExpectedDestruction(nums_8, bound_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int bound_9 = 505;
    std::vector<int> nums_9 = {1, 2, 4, 9, 16, 32};
    try
    {
        ExpectedDestruction(nums_9, bound_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int bound_10 = 0;
    std::vector<int> nums_10 = {1, 2, 4, 10, 16, 32};
    try
    {
        ExpectedDestruction(nums_10, bound_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int bound_11 = -1;
    std::vector<int> nums_11 = {1, 2, 4, 11, 16, 32};
    try
    {
        ExpectedDestruction(nums_11, bound_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int bound_12 = 200;
    std::vector<int> nums_12 = {};
    try
    {
        ExpectedDestruction(nums_12, bound_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int bound_13 = 200;
    std::vector<int> nums_13 = {1,202};
    try
    {
        ExpectedDestruction(nums_13, bound_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int bound_14 = 200;
    std::vector<int> nums_14 = {1,-2};
    try
    {
        ExpectedDestruction(nums_14, bound_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout<<"All tests passed."<<std::endl;
    return 0;
}
