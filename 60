
/*

https://codeforces.com/problemset/problem/1208/F

Write a C++ Solution BitsAndPieces to determine the maximum value of the expression given in the statement.

You are given an array nums of len integers.

You need to find the maximum value of nums[i]|(nums[j]&nums[k]) over all triplets (i,j,k) such that i<j<k.

Here & denotes the bitwise AND operation, and | denotes the bitwise OR operation.

Input:

A vector of integers nums.

Output:

An integer ans to determine the maximum value of the expression given in the statement.

Constraints:

nums.size() : ranges from 3 to 1000000.
nums : ranges from 0 to 2000000.


Use appropriate Error Handling using the stdexcept library for the invalid test cases.


*/

#include <iostream>
#include <vector>
#include <map>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cassert>
#include <stdexcept>

void Add(std::vector<std::pair<int, int>>& dpp, int mask, int weight) {
    if (dpp[mask].first == -1){
        dpp[mask].first = weight;
    }
    else if (dpp[mask].second == -1) {
        if (dpp[mask].first == weight){
            return;
        }
        dpp[mask].second = weight;
        if (dpp[mask].first > dpp[mask].second){
            std::swap(dpp[mask].first, dpp[mask].second);
        }
    } else {
        if (dpp[mask].second < weight) {
            dpp[mask].first = dpp[mask].second;
            dpp[mask].second = weight;
        } else if (dpp[mask].first < weight && dpp[mask].second != weight) {
            dpp[mask].first = weight;
        }
    }
}

void Merge(std::vector<std::pair<int, int>>& dpp, int mask1, int mask2) {
    if (dpp[mask2].first != -1){
        Add(dpp, mask1, dpp[mask2].first);
    }
    if (dpp[mask2].second != -1){
        Add(dpp, mask1, dpp[mask2].second);
    }
}

int BitsAndPieces(std::vector<int> nums) {
    int len=nums.size();
    if(len<3 or len>1000000){
        throw std::invalid_argument("Invalid length");
    }
    for(int i=0;i<nums.size();i++){
        if(nums[i]<0 or nums[i]>2000000){
            throw std::invalid_argument("Invalid nums value");
        }
    }
    int max_bits = 0;
    for (int i = 0; i < len; ++i) {
        max_bits = std::max(max_bits, static_cast<int>(std::log2(nums[i])));
    }
    max_bits++;
    
    std::vector<std::pair<int, int>> dpp(1 << max_bits, {-1, -1});

    for (int i = 0; i < len; ++i) {
        Add(dpp, nums[i], i);
    }

    for (int i = 0; i < max_bits; ++i) {
        for (int mask = 0; mask < (1 << max_bits); ++mask) {
            if (mask & (1 << i)) {
                Merge(dpp, mask ^ (1 << i), mask);
            }
        }
    }

    int ans = 0;
    for (int i = 0; i < len; ++i) {
        int current_mask = (1 << max_bits) - 1 - nums[i];
        int optimal = 0;
        for (int j = max_bits - 1; j >= 0; --j) {
            if ((current_mask >> j) & 1) {
                if (dpp[optimal ^ (1 << j)].second != -1 && dpp[optimal ^ (1 << j)].first > i) {
                    optimal ^= (1 << j);
                }
            }
        }
        if (dpp[optimal].second != -1 && dpp[optimal].first > i) {
            ans = std::max(ans, nums[i] ^ optimal);
        }
    }
    return ans;
}

#include <iostream>
#include <vector>
#include <map>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <cassert>
#include <stdexcept>

int main() {
     // TEST
    std::vector<int> nums_1 = {1, 1, 1, 1, 1, 1};
    int expected_1 = 1;
    int result_1 = BitsAndPieces(nums_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
    int expected_2 = 31;
    int result_2 = BitsAndPieces(nums_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {1000000,5,5};
    int expected_3 = 1000005;
    int result_3 = BitsAndPieces(nums_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {1, 2, 3, 4, 5};
    int expected_4 = 7;
    int result_4 = BitsAndPieces(nums_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {10, 20, 30, 40, 50, 60};
    int expected_5 = 62;
    int result_5 = BitsAndPieces(nums_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {5, 5, 5, 5, 5, 5};
    int expected_6 =5;
    int result_6 = BitsAndPieces(nums_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {7, 7, 7, 7, 7};
    int expected_7 = 7;
    int result_7 = BitsAndPieces(nums_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {3, 3, 3, 3, 3, 3, 3};
    int expected_8 = 3;
    int result_8 = BitsAndPieces(nums_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<int> nums_9 = {0};
    try
    {
        BitsAndPieces(nums_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    std::vector<int> nums_10(6000000,0);
    try
    {
        BitsAndPieces(nums_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    std::vector<int> nums_11(6,-1);
    try
    {
        BitsAndPieces(nums_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_12(6,100000000);
    try
    {
        BitsAndPieces(nums_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_13={};
    try
    {
        BitsAndPieces(nums_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
