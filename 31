/*

https://codeforces.com/problemset/problem/1870/F

Write a C++ Solution FancyArrays to find the number of fancy arrays of length len , 
taken modulo 10^9+7.

Let's define an array nums of len non-negative integers as fancy if the following 
conditions hold:

Existence Condition: At least one number from the set {x,x+1,…,x+k−1} appears 
in the array.

Difference Condition: The absolute difference between consecutive elements of 
the array is at most k (i.e., ∣a[i]−a[i−1]∣≤k for each i∈[2,len]).

You are given the integers len, val, and lex. Your task is to calculate the number 
of fancy arrays of length len. Since the answer can be very large, print it modulo 10^9+7.


Input:

An integer len.
An integer val.
An integer lex.

Output:

An integer ans to find the number of fancy arrays of length len , taken modulo 10^9+7.

Constraints:

len : ranges from 1 to 10^9.
val : ranges from 1 to 10^9.
lex : ranges from 0 to 40.


Use appropriate Error Handling using the stdexcept library for the invalid test cases.

*/

#include <iostream>
#include <vector>
#include <cmath>
#include <stdexcept>
#include <cassert>

int Power(int base, int exponent) {
    int res = 1;
    int mod = 1e9 + 7;
    for (; exponent; exponent >>= 1, base = 1LL * base * base % mod)
        if (exponent & 1) res = 1LL * res * base % mod;
    return res;
}

std::vector<std::vector<int>> operator*(const std::vector<std::vector<int>> &arr, 
                                        const std::vector<std::vector<int>> &brr) {
    int len = arr.size();
    int mod = 1e9 + 7;
    std::vector<std::vector<int>> ans(len, std::vector<int>(len));
    for (int i = 0; i < len; ++i)
        for (int j = 0; j < len; ++j)
            for (int val = 0; val < len; ++val)
                ans[i][j] = (ans[i][j] + 1LL * arr[i][val] * brr[val][j]) % mod;
    return ans;
}

int FancyArrays(int len, int val, int lex) {
    if (len < 1 || len > 1000000000) {
        throw std::invalid_argument("Invalid Constraints");
    }
    if (val < 1 || val > 1000000000) {
        throw std::invalid_argument("Invalid Constraints");
    }
    if (lex < 0 || lex > 40) {
        throw std::invalid_argument("Invalid Constraints");
    }
    int mod = 1e9 + 7;
    int ans = 1LL * (lex + val) * Power((2 * val + 1) % mod, len - 1) % mod;
    std::vector<std::vector<int>> arr(lex, std::vector<int>(lex)), res(lex, std::vector<int>(lex));

    for (int i = 0; i < lex; ++i) {
        for (int j = 0; j < lex; ++j) {
            arr[i][j] = std::abs(i - j) <= val;
            res[i][j] = (i == j);
        }
    }

    for (int m = len - 1; m; m >>= 1, arr = arr * arr)
        if (m & 1) res = res * arr;

    for (int i = 0; i < res.size(); ++i) {
        for (int j = 0; j < res[i].size(); ++j) {
            ans = (ans + mod - res[i][j]) % mod;
        }
    }

    return ans;
}

#include <iostream>
#include <vector>
#include <cmath>
#include <stdexcept>
#include <cassert>

int main() {
    // TEST
    int len_1 = 3, val_1 = 1, lex_1 = 0;
    int expected_1 = 9;
    int result_1 = FancyArrays(len_1, val_1, lex_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int len_2 = 5, val_2 = 2, lex_2 = 1;
    int expected_2 = 1874;
    int result_2 = FancyArrays(len_2, val_2, lex_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int len_3 = 10, val_3 = 3, lex_3 = 2;
    int expected_3 = 201767011;
    int result_3 = FancyArrays(len_3, val_3, lex_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int len_4 = 20, val_4 = 4, lex_4 = 3;
    int expected_4 = 32426544;
    int result_4 = FancyArrays(len_4, val_4, lex_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int len_5 = 15, val_5 = 5, lex_5 = 4;
    int expected_5 = 404583116;
    int result_5 = FancyArrays(len_5, val_5, lex_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int len_6 = 7, val_6 = 2, lex_6 = 2;
    int expected_6 = 62372;
    int result_6 = FancyArrays(len_6, val_6, lex_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST 
    int len_7 = 12, val_7 = 3, lex_7 = 2;
    int expected_7 = 886629556;
    int result_7 = FancyArrays(len_7, val_7, lex_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int len_8 = 18, val_8 = 4, lex_8 = 3;
    int expected_8 = 693063604;
    int result_8 = FancyArrays(len_8, val_8, lex_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int len_9 = 0, val_9 = 4, lex_9 = 3;
    try
    {
        FancyArrays(len_9, val_9, lex_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_10 = 1000000002, val_10 = 4, lex_10 = 3;
    try
    {
        FancyArrays(len_10, val_10, lex_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_11 = -100002, val_11 = 4, lex_11 = 3;
    try
    {
        FancyArrays(len_11, val_11, lex_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_12 = 10, val_12 = -4, lex_12 = 3;
    try
    {
        FancyArrays(len_12, val_12, lex_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_13 = 1, val_13 = 1300000002, lex_13 = 3;
    try
    {
        FancyArrays(len_13, val_13, lex_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_14 = 100002, val_14 = 0, lex_14 = 3;
    try
    {
        FancyArrays(len_14, val_14, lex_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_15 = 1, val_15 = 1, lex_15 = -1;
    try
    {
        FancyArrays(len_15, val_15, lex_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_16 = 1, val_16 = 1, lex_16 = 120;
    try
    {
        FancyArrays(len_16, val_16, lex_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int len_17 = 1, val_17 = 1, lex_17 = -55;
    try
    {
        FancyArrays(len_17, val_17, lex_17);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!";
    return 0;
}
