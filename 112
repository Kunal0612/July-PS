/*

https://codeforces.com/problemset/problem/1036/G

Write a C++ Solution SourcesAndSinks if the graph becomes strongly connected no 
matter the choice of sources and sinks on the second step of the algorithm.


You are given an acyclic directed graph, consisting of num_nodes vertices and 
num_edges edges. The graph contains no multiple edges and no self-loops.

The vertex is called a source if it has no incoming edges. The vertex is 
called a sink if it has no outgoing edges. These definitions imply that 
some vertices can be both source and sink.

The number of sources in the given graph is equal to the number of sinks 
in it, and each of these numbers doesn't exceed 20.

The following algorithm is applied to the graph:

if the graph has no sources and sinks then quit,choose arbitrary source s , 
arbitrary sink t, add an edge from t to s to the graph and go to step 1 
(that operation pops s out of sources and t out of sinks). 

Note that s and t may be the same vertex, then a self-loop is added.

At the end you check if the graph becomes strongly connected (that is, any vertex 
is reachable from any other vertex).

Your task is to check that the graph becomes strongly connected no matter the 
choice of sources and sinks on the second step of the algorithm.


Input :

An integer num_nodes.
A vector of pair of integer edges.

Constraints : 

num_nodes : ranges from 1 to 10^6.
edges.size() : ranges from 1 to 10^6.
edges : ranges from 1 to num_nodes and edges[i][0]!=edges[i][1].

Output:

An bool ans is true if the graph becomes strongly connected no matter the choice of 
sources and sinks on the second step of the algorithm.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

*/

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cassert>
#include <stdexcept>


void DepthFirstSearch(int node, const std::vector<std::vector<int>>& graph, std::vector<bool>& visited) {
    if (visited[node]){
        return;
    }
    visited[node] = true;
    for (int neighbor : graph[node]) {
        DepthFirstSearch(neighbor, graph, visited);
    }
}



bool SourcesAndSinks(int num_nodes,const std::vector<std::vector<int>>& edges) {
    if (num_nodes < 1 || num_nodes > 1000000) {
        throw std::invalid_argument("The number of vertices (n) must be between 1 and 1,000,000.");
    }
    int num_edges=edges.size();
    if (num_edges < 1 || num_edges > 1000000) {
        throw std::invalid_argument("The number of edges (m) must be between 1 and 1,000,000.");
    }

    std::set<std::pair<int,int>> edge_set;
    for (const std::vector<int>& edge : edges) {
        int node_a = edge[0];
        int node_b = edge[1];

        if (node_a == node_b) {
            throw std::invalid_argument("Self-loops are not allowed.");
        }

        if (node_a < 1 || node_a > num_nodes || node_b < 1 || node_b > num_nodes) {
            throw std::invalid_argument("Edge vertices are out of bounds.");
        }

        if (!edge_set.insert({node_a, node_b}).second) {
            throw std::invalid_argument("Multiple edges between the same vertices are not allowed.");
        }
    }
    std::vector<std::vector<int>> graph(num_nodes);
    std::vector<std::vector<int>> reverse_graph(num_nodes);
    std::vector<int> sources;
    std::vector<int> sinks;
    std::vector<int> reachability(20, 0);
    std::vector<bool> visited(num_nodes, false);


    for (const std::vector<int>& edge : edges) {
        int node_a = edge[0];
        int node_b = edge[1];
        graph[node_a-1].push_back(node_b-1);
        reverse_graph[node_b-1].push_back(node_a-1);
    }

    for (int i = 0; i < num_nodes; i++) {
        if (graph[i].empty()) {
            sinks.push_back(i);
        }
        if (reverse_graph[i].empty()) {
            sources.push_back(i);
        }
    }

    int num_sources = sources.size();
    for (int i = 0; i < num_sources; i++) {
        std::fill(visited.begin(), visited.end(), false);
        DepthFirstSearch(sources[i], graph, visited);
        for (int j = 0; j < num_sources; j++) {
            if (visited[sinks[j]]) {
                reachability[i] ^= (1 << j);
            }
        }
    }

    bool ans = true;
    for (int mask = 0; mask < (1 << num_sources); mask++) {
        int combined_reachability = 0;
        for (int j = 0; j < num_sources; j++) {
            if (mask & (1 << j)) {
                combined_reachability |= reachability[j];
            }
        }
        int selected_count = __builtin_popcount(mask);
        int reachable_count = __builtin_popcount(combined_reachability);
        if (reachable_count < selected_count || (reachable_count == selected_count && selected_count != 0 && selected_count != num_sources)) {
            ans = false;
        }
    }
    return ans;
}

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cassert>
#include <stdexcept>


int main()
{
    // TEST
    int num_nodes_1 = 3;
    std::vector<std::vector<int>> edges_1 = {{1, 2}, {1, 3}, {2, 3}};
    bool expected_1 = 1; 
    bool result_1 = SourcesAndSinks(num_nodes_1, edges_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    int num_nodes_2 = 5;
    std::vector<std::vector<int>> edges_2 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
    bool expected_2 = 1; 
    bool result_2 = SourcesAndSinks(num_nodes_2, edges_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    int num_nodes_3 = 3;
    std::vector<std::vector<int>> edges_3 = {{1, 2}, {1, 3}};
    bool expected_3 = 1; 
    bool result_3 = SourcesAndSinks(num_nodes_3, edges_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    int num_nodes_4 = 6;
    std::vector<std::vector<int>> edges_4 = {{1, 2}, {1, 3}, {3, 4}, {3, 5}, {5, 6}};
    bool expected_4 =1; 
    bool result_4 = SourcesAndSinks(num_nodes_4, edges_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    int num_nodes_5 = 7;
    std::vector<std::vector<int>> edges_5 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}};
    bool expected_5 = 1; 
    bool result_5 = SourcesAndSinks(num_nodes_5, edges_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    int num_nodes_6 = 8;
    std::vector<std::vector<int>> edges_6 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {7, 8}};
    bool expected_6 = 1;
    bool result_6 = SourcesAndSinks(num_nodes_6, edges_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    int num_nodes_7 = 9;
    std::vector<std::vector<int>> edges_7 = {{1, 2}, {1, 3}, {3, 4}, {3, 5}, {4, 6}, {5, 7}, {6, 8}, {7, 9}};
    bool expected_7 =1;
    bool result_7 = SourcesAndSinks(num_nodes_7, edges_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    int num_nodes_8 = 10;
    std::vector<std::vector<int>> edges_8 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {4, 8}, {5, 9}, {6, 10}};
    bool expected_8 = 1; 
    bool result_8 = SourcesAndSinks(num_nodes_8, edges_8);
    assert(result_8 == expected_8);
    // TEST_END
    // TEST
    int num_nodes_9 = 10000005;
    std::vector<std::vector<int>> edges_9 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {4, 9}, {5, 9}, {6, 10}};
    try
    {
        SourcesAndSinks(num_nodes_9, edges_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    int num_nodes_10 = 0;
    std::vector<std::vector<int>> edges_10 = {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 6}, {3, 7}, {4, 10}, {5, 10}, {6, 10}};
    try
    {
        SourcesAndSinks(num_nodes_10, edges_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_11 = -5;
    std::vector<std::vector<int>> edges_11 = {{1, 2}, {3, 2}, {2, 4}};
    try
    {
        SourcesAndSinks(num_nodes_11, edges_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_12 = 5;
    std::vector<std::vector<int>> edges_12 = {{1, 1}, {3, 2}, {2, 4}};
    try
    {
        SourcesAndSinks(num_nodes_12, edges_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_13 = 5;
    std::vector<std::vector<int>> edges_13 = {{-1, -2}, {3, 2}, {2, 4}};
    try
    {
        SourcesAndSinks(num_nodes_13, edges_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_14 = 5;
    std::vector<std::vector<int>> edges_14 = {{1, -5}, {3, 2}, {2, 4}};
    try
    {
        SourcesAndSinks(num_nodes_14, edges_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_15 = 5;
    std::vector<std::vector<int>> edges_15 = {{1, 2},{1, 2},{3, 2},{2, 4}};
    try
    {
        SourcesAndSinks(num_nodes_15, edges_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
     // TEST
    int num_nodes_16 = 5;
    std::vector<std::vector<int>> edges_16 = {{1, 2},{1, 9},{3, 2},{2, 4}};
    try
    {
        SourcesAndSinks(num_nodes_16, edges_16);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!\n";
    return 0;
}
