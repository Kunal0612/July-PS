/*

https://codeforces.com/contest/1720/problem/D2


In the mystical realm of arrays, there exists a character named Bryap who is fascinated by the concept of beautiful subsequences. He has an array of 
n integers nums[0] , nums[1] , nums[2] ... nums[n-1] and wants to find the longest beautiful subsequence within it.

A subsequence b=[b[0],b[1],…,b[m−1]], where 0≤b[0]<b[1]<…<b[m−1]<n, is a subsequence of length m of the array nums.

Bryap considers a subsequence b=[b[0],b[1],…,b[m−1]] of length m to be beautiful if the following condition holds for every p (where 0≤p<m−1):

For any p: a[b[p]]⊕b[p+1]<a[b[p+1]]⊕b[p]

Here, a⊕b denotes the bitwise XOR of a and b. For example, 2⊕4=6 and 3⊕1=2.

Bryap, being a straightforward individual, is only interested in knowing the length of the longest such beautiful subsequence. Help Bryap find the answer to his question.


Input :

A  vector of integers nums.

Output :

An integer answer to find the the length of the longest beautiful subsequence.


Constraints :

nums.size() : ranges from 1 to 300000.
nums : ranges from 0 to 1000000000 .

Use appropriate Error Handling using the stdexcept library for the invalid test cases


*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>



int Helper(std::vector<std::vector<int>>& nodes, std::vector<std::vector<int>>& nodev, int& last) {
    nodes[last][0] = 0;
    nodes[last][1] = 0;
    nodev[last][0] = 0;
    nodev[last][1] = 0;
    return last++;
}

int XorSubsequence(std::vector<int> &nums){
     if (nums.size() < 1 or nums.size()>300000) {
        throw std::invalid_argument("Invalid Nums Length");
    }
    for (int i = 0; i < nums.size(); ++i)
    {
        if (nums[i] < 0 || nums[i] > 1000000000)
        {
            throw std::invalid_argument("Invalid element value");
        }
    }
    int len=nums.size();
    int ans = 0;
    int last = 0;
    int MAXLOG = 30;
    std::vector<std::vector<int>> nodes(len * MAXLOG + MAXLOG, std::vector<int>(2, 0));
    std::vector<std::vector<int>> nodev(len * MAXLOG + MAXLOG, std::vector<int>(2, 0));
    Helper(nodes, nodev, last);
    for (int i = 0; i < len; ++i) {
        int val_a = 0;
        int val_b = nums[i] ^ i;
        int val_c = i;
        int getmax = 0;
        for (int j = MAXLOG; j >= 0; --j) {
            if (nodes[val_a][((val_b >> j) & 1) ^ 1]) 
                getmax = std::max(getmax, nodev[nodes[val_a][((val_b >> j) & 1) ^ 1]][(((val_b ^ val_c) >> j) & 1) ^ 1]);
            if (!nodes[val_a][(val_b >> j) & 1]) 
                break;
            val_a = nodes[val_a][(val_b >> j) & 1];
        }
        ans = std::max(ans, getmax + 1);
        val_a = 0;
        val_b = nums[i] ^ i;
        val_c = i;
        int d = getmax + 1;
        for (int j = MAXLOG; j >= 0; --j) {
            if (!nodes[val_a][(val_b >> j) & 1]) nodes[val_a][(val_b >> j) & 1] = Helper(nodes, nodev, last);
            nodev[nodes[val_a][(val_b >> j) & 1]][(val_c >> j) & 1] = std::max(nodev[nodes[val_a][(val_b >> j) & 1]][(val_c >> j) & 1], d);
            val_a = nodes[val_a][(val_b >> j) & 1];
        }
    }
    return ans;
}

#include <cassert>

int main() {

    // TEST
    std::vector<int> nums_1 = {1};
    int expected_1 = 1;
    int result_1 = XorSubsequence(nums_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {1, 2};
    int expected_2 = 2;
    int result_2 = XorSubsequence(nums_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {2,3,4,4};
    int expected_3 =2;
    int result_3 = XorSubsequence(nums_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {2,3,4,5,4};
    int expected_4 = 3;
    int result_4 = XorSubsequence(nums_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {2, 3, 4, 2, 2};
    int expected_5 =2;
    int result_5 = XorSubsequence(nums_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {3, 4, 4, 1, 5};
    int expected_6 = 3;
    int result_6 = XorSubsequence(nums_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {1, 2, 3, 3, 4};
    int expected_7 = 4;
    int result_7 = XorSubsequence(nums_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {6, 7, 8, 1, 1,1,2,3,4,5};
    int expected_8 = 3;
    int result_8 = XorSubsequence(nums_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<int> nums_9 = {4,4,2,4,5};
    int expected_9 = 3;
    int result_9 = XorSubsequence(nums_9);
    assert(result_9 == expected_9);
    // TEST_END

    // TEST
    std::vector<int> nums_10 = {5, 5, 5, 5, 5, 5};
    int expected_10 = 4;
    int result_10 = XorSubsequence(nums_10);
    assert(result_10 == expected_10);
    // TEST_END

    // TEST
    std::vector<int> nums_11 = {};
    try
    {
        XorSubsequence(nums_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_12 = {-1};
    try
    {
        XorSubsequence(nums_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_13 = {1000000001};
    try
    {
        XorSubsequence(nums_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_14 = {-1};
    try
    {
        XorSubsequence(nums_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::vector<int> nums_15(300001,1);
    try
    {
        XorSubsequence(nums_15);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END

    std::cout << "All test cases passed!\n";
    return 0;
}
