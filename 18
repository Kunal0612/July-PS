/*

https://codeforces.com/problemset/problem/1672/H

Write a C++ Solution ZiguZagu to find the minimum number of operations needed for the each query.


In the land of Binaryia, there exists a magical binary string str of length n, composed solely of the mystical digits 0 and 1. This string holds great power and mystery, and it has caught the attention of the scholars of Binaryia.

One day, the scholars posed a challenging quest involving this string. They presented q queries to the adventurers of the land. In each query, adventurers were given two indices l and r (such that 1‚â§l‚â§r‚â§n), defining a substring s=a[l,r].

The challenge was to perform a series of operations on this substring s to make it disappear completely. The rules for the operations were as follows:

Choose two indices x and y within s (where 1‚â§x‚â§y‚â§‚à£s‚à£).
Let t be the substring s[x,y].
For t to be a valid substring for deletion, every adjacent pair of characters in t must differ (ùë°ùëñ‚â†ùë°ùëñ + 1) for all 1‚â§i‚â§‚à£t‚à£‚àí1). 
Note that x=y is always valid, as a single character is trivially alternating.
Delete the substring s[x,y] from s.
The goal for each query was to determine the minimum number of such operations needed to make s an empty string.

The scholars tasked the adventurers to embark on this journey and find the solution for each query, ensuring the magical binary string could be cleared efficiently. This grand quest would test the logic and determination of the bravest minds in Binaryia.


Input :

A string str.
A vector of vector of integer queries.

Output :

A vector of integers answer the answer[i] representing the minimum number of operations needed for the i-th query.

Constraints :

str.size() : ranges from 1 to 200000.
str : contains either 0 or 1.
queries.size() : ranges from 1 to 200000.
queries[i][0] or queries[i][1] : ranges from 1 to str.size().



*/
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stdexcept>
#include <cassert>

std::vector<int> ZiguZagu(std::string &str,std::vector<std::vector<int>> &queries){

    int len=str.size(), q_len=queries.size();
    if (len <= 0 or len>200000 or q_len<=0 or q_len>200000) {
        throw std::invalid_argument("Invalid Length.");
    }
    for(int i=0;i<len;i++){
        if(str[i]!='0' and str[i]!='1'){
            throw std::invalid_argument("Invalid Str.");
        }
    }
    for(int i=0;i<q_len;i++){
        int left=queries[i][0];
        int right=queries[i][1];
        if(left<1 or right>len or right>len){
            throw std::invalid_argument("Invalid Queries");
        }
    }
    str = str[0] + str + str[len - 1];
    
    std::vector<int> left(len + 2, 0);
    std::vector<int> right(len + 2, 0);
    std::vector<int> p_sum(len + 2, 0);
    std::vector<int> balance(len + 2, 0);
    
    for (int x = 1; x <= len; x++) {
        if (str[x - 1] == str[x]) left[x] = x;
        else left[x] = left[x - 1];
    }
    
    for (int x = len; x >= 1; x--) {
        if (str[x] == str[x + 1]) {
            right[x] = x;
            p_sum[x] = 1;
            if ((x - left[x]) % 2 == 0) {
                balance[x] = (str[x] == '1' ? 1 : -1);
            }
        } else {
            right[x] = right[x + 1];
        }
    }
    
    for (int x = 1; x <= len; x++) {
        p_sum[x] += p_sum[x - 1];
        balance[x] += balance[x - 1];
    }
    std::vector<int> answer;
    for(int i=0;i<q_len;i++) {
        int a=queries[i][0], b=queries[i][1];
        a = left[a];
        b = right[b];
        
        int bl = balance[b] - balance[a - 1];
        int sum = p_sum[b] - p_sum[a - 1];
        
        int ans = (sum + std::abs(bl)) / 2;
        
        if ((sum + std::abs(bl)) % 2 == 1) ans++;
        else if (std::abs(bl) == 0) ans++;
        else if ((bl > 0) ^ (str[a] == '1')) ans++;
        answer.push_back(ans);
    }
    return answer;
}


int main() {
    // TEST
    std::string str_1 = "11011";
    std::vector<std::vector<int>> queries_1 = {{2, 4}, {1, 5}, {3, 5}};
    std::vector<int> expected_1 = {1, 3, 2};
    std::vector<int> result_1 = ZiguZagu(str_1, queries_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::string str_2 = "10101";
    std::vector<std::vector<int>> queries_2 = {{1, 3}, {2, 4}, {1, 5}};
    std::vector<int> expected_2 = {1,1,1};
    std::vector<int> result_2 = ZiguZagu(str_2, queries_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::string str_3 = "00000";
    std::vector<std::vector<int>> queries_3 = {{1, 5}, {2, 4}, {1, 1}};
    std::vector<int> expected_3 = {5, 3, 1};
    std::vector<int> result_3 = ZiguZagu(str_3, queries_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::string str_4 = "11111";
    std::vector<std::vector<int>> queries_4 = {{1, 5}, {2, 3}, {4, 5}};
    std::vector<int> expected_4 = {5, 2, 2};
    std::vector<int> result_4 = ZiguZagu(str_4, queries_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::string str_5 = "0101010101";
    std::vector<std::vector<int>> queries_5 = {{1, 10}, {1, 5}, {6, 10}};
    std::vector<int> expected_5 = {1,1,1};
    std::vector<int> result_5 = ZiguZagu(str_5, queries_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::string str_6 = "00110011";
    std::vector<std::vector<int>> queries_6 = {{1, 8}, {2, 7}, {3, 6}};
    std::vector<int> expected_6 = {3, 2, 2};
    std::vector<int> result_6 = ZiguZagu(str_6, queries_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::string str_7 = "11001100";
    std::vector<std::vector<int>> queries_7 = {{1, 8}, {1, 4}, {5, 8}};
    std::vector<int> expected_7 = {3,2,2};
    std::vector<int> result_7 = ZiguZagu(str_7, queries_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::string str_8 = "111000111";
    std::vector<std::vector<int>> queries_8 = {{1, 9}, {2, 8}, {3, 7}};
    std::vector<int> expected_8 = {5,3,3};
    std::vector<int> result_8 = ZiguZagu(str_8, queries_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::string str_9 = "";
    std::vector<std::vector<int>> queries_9 = {{1, 9}, {2, 9}, {3, 7}};
    try
    {
        ZiguZagu(str_9, queries_9);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_10 = "10";
    std::vector<std::vector<int>> queries_10 = {{1, 10}, {2, 10}, {3, 7}};
    try
    {
        ZiguZagu(str_10, queries_10);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_11 = std::string(200002,'1');
    std::vector<std::vector<int>> queries_11 = {{1, 11}, {2, 11}, {3, 7}};
    try
    {
        ZiguZagu(str_11, queries_11);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_12 = std::string(2,'1');
    std::vector<std::vector<int>> queries_12 = {{1, 12}, {2, 12}, {3, 7}};
    try
    {
        ZiguZagu(str_12, queries_12);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_13 = std::string(2,'1');
    std::vector<std::vector<int>> queries_13 = {{1, -13}, {2, 13}, {3, 7}};
    try
    {
        ZiguZagu(str_13, queries_13);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    // TEST
    std::string str_14 = std::string(2,'1');
    std::vector<std::vector<int>> queries_14(200002,{1,1});
    try
    {
        ZiguZagu(str_14, queries_14);
        assert(false);
    }
    catch (const std::invalid_argument &e)
    {
        assert(true);
    }
    // TEST_END
    std::cout << "All test cases passed!" << std::endl;
    return 0;
}
