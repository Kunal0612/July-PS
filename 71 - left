// https://codeforces.com/problemset/problem/1887/D

#include <iostream>
#include <vector>
#include <set>
#include <functional>
#include <cassert>
#include <stdexcept>

void AddValue(std::vector<int>& crr, int xec, int val, int len) {
    while (xec <= len) {
        crr[xec] += val;
        xec += xec & -xec;
    }
}

int QueryValue(const std::vector<int>& crr, int xec) {
    int res = 0;
    while (xec) {
        res += crr[xec];
        xec -= xec & -xec;
    }
    return res;
}

std::vector<int> Split(std::vector<int> nums,std::vector<std::vector<int>> quer){

    int len=nums.size(), q_len=quer.size();
    std::vector<int> arr(len + 1), pos(len + 1), stk(len + 1), left(len + 1), right(len + 1), crr(len + 1), ans(len + 1);
    std::vector<std::vector<std::pair<int, int>>> pairs(len + 1), chr(len + 1);
    std::set<int> stt;

    for (int i = 1; i <= len; ++i) {
        arr[i]=nums[i-1];
        pos[arr[i]] = i;
    }
    for (int i = 1; i <= q_len; ++i) {
        int qli=quer[i-1][0], qri=quer[i-1][1];
        pairs[qri].emplace_back(qli, i);
    }

    for (int i = 1, j = 0; i <= len; left[i] = stk[j], stk[++j] = i++) {
        while (j and arr[stk[j]] < arr[i]){
            --j;
        }
    }
    for (int i = len, j = 0; i >= 1; right[i] = stk[j], stk[++j] = i--) {
        while (j and arr[stk[j]] < arr[i]){
            --j;
        }
    }

    for (int i = 1; i <= len; ++i) {
        int j = pos[i];
        if (right[j]) {
            auto it = stt.upper_bound(right[j]);
            chr[right[j]].emplace_back(left[j] + 1, 1);
            chr[right[j]].emplace_back(j + 1, -1);
            if (it != stt.end()) {
                chr[*it].emplace_back(left[j] + 1, -1);
                chr[*it].emplace_back(j + 1, 1);
            }
        }
        stt.insert(j);
    }

    for (int i = 1; i <= len; ++i) {
        for (auto xec : chr[i]) AddValue(crr, xec.first, xec.second, len);
        for (auto xec : pairs[i]) ans[xec.second] = QueryValue(crr, xec.first);
    }
    std::vector<int> answer;
    for (int i = 1; i <= q_len; ++i) {
        if(ans[i]) answer.push_back(1);
        else answer.push_back(0);
    }
    return answer;
}


#include <iostream>
#include <vector>
#include <set>
#include <functional>
#include <cassert>
#include <stdexcept>



int main() {
    std::vector<int> nums={3,2,1,4,5};
    std::vector<std::vector<int>> quer={{1,5},{1,3},{1,4},{1,2},{2,5}};
    std::vector<int> ans=Split(nums,quer);
    for(auto x:ans) std::cout<<x<<" ";
    std::cout<<std::endl;
    return 0;
}
