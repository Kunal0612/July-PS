// https://codeforces.com/contest/1373/problem/F

#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>
#include <iomanip>
#include <cassert>
#include <stdexcept>


struct func {
    int minx, mink, maxk;
    func() : minx(0), mink(0), maxk(0) {}
    func(int minx, int mink, int maxk) : minx(minx), mink(mink), maxk(maxk) {}
};

func GetFunc(int first, int sec) {
    if (first <= sec){
        return func(0, sec - first, sec);
    }
    else{
        return func(first - sec, 0, sec);
    }
}

func Merge(func first, func sec) {
    if (first.minx == -1 || sec.minx == -1){
        return func(-1, -1, -1);
    }
    
    if (first.maxk < sec.minx){
        return func(-1, -1, -1);
    }
    if (first.mink >= sec.minx){
        return func(first.minx, std::min(sec.maxk, sec.mink + (first.mink - sec.minx)), std::min(sec.maxk, sec.mink + (first.maxk - sec.minx)));
    }
    else {
        int add = sec.minx - first.mink;
        return func(first.minx + add, sec.mink, std::min(sec.maxk, sec.mink + (first.maxk - sec.minx)));
    }
}

/*

Input :

A integer len.
A vector of integers household.
A vector of integers capacities

Constraints :
len : ranges from 2 to 10^6.
household : ranges from 1 to 10^9.
capacities : ranges from 1 to 10^9.

*/


int NetworkCoverage(int len, const std::vector<int>& household, const std::vector<int>& capacities) {
    if(len<2 or len>1000000){
        throw std::invalid_argument("Invalid length");
    }
    for(int i=0;i<len;i++){
        if(household[i]<1 or household[i]>1000000000){
            throw std::invalid_argument("Invalid household vector");
        }
    }
    for(int i=0;i<len;i++){
        if(capacities[i]<1 or capacities[i]>1000000000){
            throw std::invalid_argument("Invalid capacities vector");
        }
    }
    
    func total = GetFunc(household[0], capacities[0]);
    for(int i = 1; i < len; ++i){
        total = Merge(total, GetFunc(household[i], capacities[i]));
    }
    
    if (total.minx != -1 && total.minx <= total.mink){
        return 1;
    }
    return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>
#include <iomanip>
#include <cassert>
#include <stdexcept>

int main() {    
    int tc;
    std::cin >> tc;
    
    while(tc--) {
        int len;
        std::vector<int> household, capacities;
        if (std::cin >> len) {
            household.resize(len);
            capacities.resize(len);
            for(int i = 0; i < len; ++i) {
                std::cin >> household[i];
            }
            for(int i = 0; i < len; ++i) {
                std::cin >> capacities[i];
            }
            int ans=NetworkCoverage(len, household, capacities);
            std::cout << ans << std::endl;
        }
    }
    return 0;
}
